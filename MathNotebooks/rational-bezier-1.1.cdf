(* Content-type: application/vnd.wolfram.cdf.text *)

(*** Wolfram CDF File ***)
(* http://www.wolfram.com/cdf *)

(* CreatedBy='Mathematica 11.0' *)

(*************************************************************************)
(*                                                                       *)
(*  The Mathematica License under which this file was created prohibits  *)
(*  restricting third parties in receipt of this file from republishing  *)
(*  or redistributing it by any means, including but not limited to      *)
(*  rights management or terms of use, without the express consent of    *)
(*  Wolfram Research, Inc. For additional information concerning CDF     *)
(*  licensing and redistribution see:                                    *)
(*                                                                       *)
(*        www.wolfram.com/cdf/adopting-cdf/licensing-options.html        *)
(*                                                                       *)
(*************************************************************************)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[      1064,         20]
NotebookDataLength[   1076677,      21907]
NotebookOptionsPosition[   1058869,      21335]
NotebookOutlinePosition[   1059318,      21355]
CellTagsIndexPosition[   1059275,      21352]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["This is so we can export a demo.", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"Manipulate", ",", " ", 
    RowBox[{"{", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "}"}]}], "]"}], 
  ";"}]], "Input"],

Cell["\<\
This creates a vector with each element of the homogeneous Bernstein basis\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bb", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s_", ",", " ", "t_"}], "}"}], ",", " ", "n_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", ",", "v"}], "}"}], ",", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "k"}], "]"}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"v", "-", "u"}], ")"}], "^", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}], " ", 
        RowBox[{"u", "^", "k"}]}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"k", ",", " ", "0", ",", " ", "n"}], "}"}]}], "]"}], " ", "/.",
      " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u", "\[Rule]", "s"}], ",", " ", 
       RowBox[{"v", "\[Rule]", "t"}]}], "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "This is just for speed. We ",
 StyleBox["could",
  FontSlant->"Italic"],
 " use bb[{t,1},2] directly, but ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " would expand things algebraically. Not only would this take longer, but it \
would produce indeterminate results at t=0 and t=1... "
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bb1", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"bb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "1"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"pb1", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"pb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "1"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"bb2", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"bb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "2"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"pb2", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"pb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "2"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"bb3", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"bb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "3"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"pb3", "[", "t_", "]"}], " ", ":=", " ", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"pb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "1"}], "}"}], ",", " ", "3"}], "]"}], "]"}], 
  " "}]], "Input",
 InitializationCell->True],

Cell["\<\
This creates a vector with each element of the homogeneous Power basis\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pb", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s_", ",", " ", "t_"}], "}"}], ",", " ", "n_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", ",", "v"}], "}"}], ",", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"v", "^", 
         RowBox[{"(", 
          RowBox[{"n", "-", "k"}], ")"}]}], " ", 
        RowBox[{"u", "^", "k"}]}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"k", ",", " ", "0", ",", " ", "n"}], "}"}]}], "]"}], " ", "/.",
      " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u", "\[Rule]", "s"}], ",", " ", 
       RowBox[{"v", "\[Rule]", "t"}]}], "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
This gives the matrix that converts from the Power basis to the Bernstein \
basis\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2b", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "t"}], "}"}], ",", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Coefficient", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"pb", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"s", ",", "t"}], "}"}], ",", "n"}], "]"}]}], "]"}], 
        "&"}], ",", " ", 
       RowBox[{"bb", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s", ",", "t"}], "}"}], ",", "n"}], "]"}]}], "]"}]}], "]"}],
    "]"}]}]], "Input",
 InitializationCell->True],

Cell["Check that this works", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"pb", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s", ",", "t"}], "}"}], ",", " ", "n"}], "]"}], ".", 
      RowBox[{"p2b", "[", "n", "]"}]}], " ", "-", " ", 
     RowBox[{"bb", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s", ",", "t"}], "}"}], ",", "n"}], "]"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "2", ",", " ", "6"}], "}"}]}], "]"}], " ", "//", 
  " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}],
     "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["Obviously, this performs the inverse operation", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"b2p", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"Inverse", "[", 
   RowBox[{"p2b", "[", "n", "]"}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Here is a function that produces generic affine control points.\
\>", "Text"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"apoints", "[", "n_", "]"}], " ", ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Append", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Symbol", "[", 
           RowBox[{"#", " ", "<>", 
            RowBox[{"ToString", "[", "k", "]"}]}], "]"}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"\"\<x\>\"", ",", " ", "\"\<y\>\""}], "}"}]}], "]"}], ",", 
       "1"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"k", ",", " ", "0", ",", " ", "n"}], "}"}]}], "]"}]}],
  InitializationCell->True]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"apoints", "[", "2", "]"}], " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"x0", "y0", "1"},
     {"x1", "y1", "1"},
     {"x2", "y2", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Here is a function that returns a matrix with homogeneous control points for \
a rational B\[EAcute]zier of any degree\
\>", "Text"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"ppoints", "[", "n_", "]"}], " ", ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Symbol", "[", 
         RowBox[{"#", " ", "<>", 
          RowBox[{"ToString", "[", "k", "]"}]}], "]"}], "&"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", " ", "\"\<y\>\"", ",", " ", "\"\<w\>\""}], 
        "}"}]}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"k", ",", " ", "0", ",", " ", "n"}], "}"}]}], "]"}]}],
  InitializationCell->True]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ppoints", "[", "2", "]"}], " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"x0", "y0", "w0"},
     {"x1", "y1", "w1"},
     {"x2", "y2", "w2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
It turns out that all integral quadratic parametric curves are parabolas. To \
see this, we will find the implicit form for the integral quadratic curve \
using a simple trick. We will find an affine transformation T that takes the \
curve to the simplest possible parabola y=x^2. In affine coordinates, we get\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "[", "t", "]"}], ",", " ", 
    RowBox[{"y", "[", "t", "]"}], ",", " ", "1"}], "}"}], " ", "\[Equal]", 
  " ", 
  RowBox[{"{", 
   RowBox[{"t", ",", " ", 
    RowBox[{"t", "^", "2"}], ",", "1"}], "}"}], " "}]], "Input"],

Cell["\<\
We know how to transform the power basis to our canonical parabola.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pb2", "[", "t", "]"}], ".", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "0", "1"},
      {"1", "0", "0"},
      {"0", "1", "0"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], " "}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"t", ",", 
   SuperscriptBox["t", "2"], ",", "1"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
To transform the Bernstein basis into our canonical parabola takes almost not \
additional work\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bb2", "[", "t", "]"}], ".", 
   RowBox[{"b2p", "[", "2", "]"}], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "0", "1"},
       {"1", "0", "0"},
       {"0", "1", "0"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "  ", "//", " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"t", ",", 
   SuperscriptBox["t", "2"], ",", "1"}], "}"}]], "Output"]
}, Open  ]],

Cell["So the control-point matrix of our canonical parabola is", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"b2p", "[", "2", "]"}], ".", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "0", "1"},
      {"1", "0", "0"},
      {"0", "1", "0"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], " "}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
We want to find an affine transformation that maps these control-points into \
the control-points of our canonical parabola. But affine transformations can \
always map between three pairs of non-colinear control-points. So affine \
control points give us only parabolas! We need more power.\
\>", "Text"],

Cell["\<\
Let\[CloseCurlyQuote]s start by finding a polynomial parametrization for the \
unit circle.\
\>", "Text"],

Cell["\<\
The unit circle implicit equation is x^2 + y^2 = 1. Since Cos[t]^2 + Sin[t]^2 \
= 1, we will use x = Cos[t] and y = Sin[t] as our parametrization.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "t", "]"}], ",", " ", 
     RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", 
     RowBox[{"-", "Pi"}], ",", " ", "Pi"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1:eJxdm3c81f/7/42KyCiVSoPIqCgqWroKJSMjRcNbRkqyFSlSGkrKXmVGtsys
cNl7772OdTjnvJKRQn1fn9vvv59/3O631/E6r/N8Xs/retxvt0PI2PqyKQsT
E9MDViam//3+fz8/kE1/8xHR2KgC44MHBVb+ETjNVqvk53sLBWPSLX6Q3DB0
wdLL1xqZwW++n2SXrz7lEymOuJrXkVFCstJGeZ5nvq54Msc1Lpxk03v2HW++
v0D2opBWe5LF11E76lPcceyk1NFzJBfw7+XjjHyHtq4q9etIXspXCFLw9UKn
0t8fy/8SeOH6cdkTpT44tkcz8jHJjKZ7jerf/fB78M1+cZInwlRDbmYF4G6+
I5pNqwRq1v8QME0JQoUbM0uWJA8l2/eZxYag+e7QnjUkqy3N6N+J+IQreppn
BVYIZL0nlq/uE4EscR6VH5cJnGfbpLWjIhJlRQ+/3ESybpqSlEdJFFaeORs7
/ZvA2rXvsvXzo1G05yeHGsn1pmXjRdkxmPwlIi56iUC3cCeOnZlfUCTZ8638
LwLXbM0+U5kUh/e5RJqeLpLr023etik+Hi0Jk0u5CwSyBf+5ez0mAR/rRc7z
zROYUcT/qS00Ca98rpuz/EHeH0PsHr5PRdXM62tsCQKv9WbHVSilIaNAWdOC
QWC1sXdkfWka2pkpBqjRCBQ4NybbWJSOjtWC1ORJAr3N3T+FZmfiH/b17bYT
BD52HXJ7eTQLqyqfL0uNE1jad8f1bkYWnhw3ZPYdJZCn9ZH87q/fsCBibPZP
P4HjLfseqH3JQXO3y7XP+whM2GiRxC6ci++1/4ww9RL4bIrOUhyZiwUqNs2T
nQRKPlEK3hmah6taSVnXmgncbDLL6uH7HZU8Ti5WlhD4/qnAXoGniD/ZAu3j
kFzvz8i3zFKMf81k+p8WkvU0xsoydqEYA+PjbTflke9n69sW11iMCRceYX0q
gYO8pw8sDJRg5LLX0w+fCLQ24vkWsFyG1fcK/w0EE8jxgbfnMJSjQbeio0gg
gVUOr2Uq3crR66azeqA3gXfvuB4fWl+Bevs2xnK9IvdXs8G+mr8SC6OnW9Qs
CCx+Qqm8I1ON9fptApz3CBS8ryUb+rAaL1FL75WYErjqWBBbm1uNJVzOW/hu
EdhMzZbfBDU4df5Slao2+fmiEverqtWirPG7BxuOEvj2o9gpdeN65F+T5Tz8
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
98dvMQ==
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-1., 0.9999998831351729}, {-0.9999998782744886, 
   0.9999998592812047}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
Remember the half-arc formulas for Sin and Cos in terms of Tan\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", "t", "]"}], " ", "==", " ", 
  FractionBox[
   RowBox[{"2", 
    RowBox[{"Sin", "[", 
     RowBox[{"t", "/", "2"}], "]"}], 
    RowBox[{"Cos", "[", 
     RowBox[{"t", "/", "2"}], "]"}]}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cos", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], " ", "+", " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "\[Equal]", " ", 
  FractionBox[
   RowBox[{"2", 
    RowBox[{"Tan", "[", 
     RowBox[{"t", "/", "2"}], "]"}]}], 
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"2", " ", 
    RowBox[{"Tan", "[", 
     RowBox[{"t", "/", "2"}], "]"}]}], 
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sin", "[", "t", "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "t", "]"}], " ", "\[Equal]", " ", 
  FractionBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cos", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], "-", 
    SuperscriptBox[
     RowBox[{"Sin", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cos", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], " ", "+", " ", 
    SuperscriptBox[
     RowBox[{"Sin", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], "\[Equal]", 
  FractionBox[
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}], 
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}], 
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tan", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "//", "  ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cos", "[", "t", "]"}]], "Output"]
}, Open  ]],

Cell["Unit circle parametrization in terms of Tan of half arc.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"1", "-", 
       SuperscriptBox[
        RowBox[{"Tan", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"]}], 
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"Tan", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"]}]], ",", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"Tan", "[", 
        RowBox[{"t", "/", "2"}], "]"}]}], 
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"Tan", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", 
     RowBox[{"-", "Pi"}], ",", " ", "Pi"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1:eJxdm3k0Vf8X9w0VJSGVvmkgMhQyFE3aZUiGQoqSypBCZlEKaZCSyjxkjswy
JoRtnud5nq7xuveeFKWinvN7nv8e/1ivdc66zvl89t6f92utS9DU7oI5CxMT
011WJqb//f5/P1+RzWiLnEhiXLGphAT/yj8C59gaVAIDbqBAQrb1V5KbRs/Y
vA2wQ2YIXBwi2e2jf9V0xj38W9idU06yCo8il2fAIzz6+VFSNMm3LJ26X3x5
iuyl4R1OJIuvm+tuyvDGyWNSh06TXMK3l5cj9hU6PFJvWkfyryKlUKWAt+ha
8etd1V8Cz1w5In+0wh+n9mjHPiCZ0WrZovUlEL+EXR0SI3k6SiP8al4w7uGV
025dJVCn6Su/eUYoKhnOL9uQPJbuNGiRGI6WuyP715CsuTxvdCsmAlcMtE/x
rxC4xlK0SMs/BlmSfGre/SFwkW2zzo7qWFQQkX62mWSDLBUpn/I4rDl5KpH6
i8DGta/yjYriUbT/2wZNkpvMK6dK8xMw/UNMUvwygU+iXTfszP2AQum+LxV/
Esi6Lf9kTVoS3uEUbvX4Qa5Pn1Xn5uRktCHMzhUsEcgW9vv2lYQUfGAQu8i7
SGBOKV9EZ2Qa6r1v/G7zlfx8DHd0fp2JGrlX1jgQBF4eyE+qVslCRrGatjWD
wDpTv9imiix0sFAO1qQRuOP0pHxLaTbeqxOYS58h0M/KOyIyPxd/s6/vcpgm
8MGj0SfPDuVhTc3jP1JTBJYP3np0OycPj00ZMwdMEMjVcV9x98dPWBIzufB7
iFzf9n13NT98RqsnFxoeDxKYymOdxi5UgK91f48zDRD4aJbOUhZbgCXq9m0z
PQRKPlQJ2xlZiKs6aXmX2wjkNVtg9Qn4gio+x37UlBP42oN/L78H4je2EKck
JPD7e+T9w1KGfy1khzxKCPSYZGWZPFOGocnJDpsLyb/nENCZ1FKGyWfuY1Mm
gSPcJw4sDZdj7J+3Hm8iCLQz4foU/KcS6y1L/g2HEcjxhrtfGqrwWp/yPeEQ
AmtcnsvWPKnCN1fdtEL8CLx969GR0fXVqL+PJ5HTi8BL2s1OdXw1WBJPbde0
JrDsIaXmlmwdNhl18nNYEihwR0c+0rkOz81VWJabE7h6rzixoaAOyzndtvLe
ILBtLl9xM9TjjOq5Wg1d8v3iUvdraDagvOmruxsPEejzTvS4lmkTbluT5zb2
jYGzr4PK1qu2oUT5zbQmBgPD53pyv5q1YcMVPaFsKgPXmn/x63zShgsLa76b
TjAwJS5y1resDU+Jj0tZtTPwkZXB0ebj7ajivoad/SMDTxJjie4yHZhk8krg
pQkDO1/0SFr814VXmveGeRox8Pfsb/cShS60KXJytzdgoHSxVSWnfheqD+iE
HD3HwKrtC1wxAV24e0u9sMMRBl51PDn0lKMbBXaZ97twMvCcsEaa9ko3xsmd
EZ/OpqPtpX95X/p7MWlE9g9HOh3p2ba6TT96seWyfdb+RDrqWNsc7OXtw5b3
TxouvKOjgphS0OC5Pjx5ZHry3BM6nmzJPxld3od23Wd/ftWh4ynlkXVrk/vx
mrAI99IsDfWjB6TF7AfRuGS92LEJGsbqy0Y7+Q6iR1+U3v1BGor/3edQkDyI
9wv0aKPNNPxnVCchNT6IzX2fdY1yaJjt8UGxXncI50MGbnA8oGF9kN3YZ5lh
PLjtycPza2h4dC5A/yxtBK/U7nLZsjKPuhukONZtGMVPv8V8O77Po5nZx79F
oqP4ZXmMV4Eyj9whw54bzEbxtUh4Z1z5PDYd/sUG/aMY6PNQnMl9Hg9mlFn/
MRlDEf1RrQU6FYuGZufk1MfxI0XdDCepKBGkneFhMI5mDjSK1yAV21NCfavM
x9GiT1lqpY6KW0Vz35x+Mk7WW4T0m3gqLqd/lmb6Mo6elHFFDQMqSm8NtPE9
MIFCiSyuhwvnkOB8ureanYKc/ScPVWbOYc3syocnWym448eeWI3EOVw/cMH1
+F4KXpwWCDwTOIf6S7ysMccpaPs9XvS79RymheVoStpScC6Kzi+4Zw5Zzjn+
Meug4IuoVxzjHrPYFVVqJhw6ideqNz5MuTuLLJXW86rxk6gS/W72jtUs9ref
MjHNnESHfnrtyKVZtLrhzOFbO4kTXDDiJjGL66V42N7/nMQPJqUJkX0zeKNa
ka1HfwozbleWuknMYJxZa6s6zzSy8ygwxwjM4NlghlDhrmmUFPAKLdoyg1dH
w7ft3T+NVp/uNA+vTOPhsyr1Y0rkdWZ6aVfTNK7W7GTiuTuN9CsXKr3vTKPM
/oiIo93T+OHeN3b+hCns5W7cHxgwg7UmIv62oVN4f3X42cHoGdxLSRj54jOF
14z8N1WnzKDp6P4+ZYcpjNvqHj9YNoOHDW6krz85hR9ddVzyGTPYEGLKZ98z
iU09qcN71GfxaZSdcgXLJGo1Fm1IW55FEf5xy6AlCv4UrVs+xDqHw1qOrCaz
FLwWdvTbZ845/HkhIXqumYIeFuF/kvfO4acA+6GCMAr2X2dsU9Caw8J9P3Iv
SFLQe854nil6Dst88nnfXJjApb/W5xVOULHrnlDfJ5UJ1LTetW9YlYoHH3O9
6JOfwJ2372c81KbitnMdhZv4J5CT5lb33pSKFQe0209SxrEl0nA47AV5/43/
FLIdx3Fg6/fDezupGJ8hee336zGcGNFICzWdx/53HLOPPMfwZ83gnwKreTQt
rLjL7DSGlnLSqZ2O88joaopdNhhDG+Vz25eezKOLznL0Z8ExfL7azTr7fh41
L/OI/bAYxce8Rpa+4/OYeiVC/PrHYdxlePtcxRUaciswPF0ChrHxpVwKhwkN
BXd6ZXm7DKNylrjoeQsaOnm+zA06OYzsPW+elLrQkPo0ZJ1hyxA+tHF5rhVI
w2Kd952htEG071mjtLORhvucAn9yCQ+gxK/YAY/DdIy2NHOgrBnA23tFbZ1O
0NFeWvxZ5lQ/Zo9czLqhTEfNmB1hMkn9mBpcd2SPLh0dZpMdR8T7UczcU+iY
NR0VT7SVT0j2YRfbg9zhWDrmFnSmdUn3YFrj1e4WVgbKnC6IbuLuQYtC/ohP
6xmYW/JUo/RrN1bn7eoO5GKg6gmthTdZ3RiffyJGnp+BM522D6cPdqO5U/m1
rbIMTL+37rmLZBcaeBbvkL/OwJsnfWmGwh1oWDvV+CuTge8/MS3Xre3A/v5C
7Qd5DFz39N4r2Zl2VFd9Jf+9gIFjzpUWyynteP15gVhLOQMDzjm3ax9sx2+C
SZ5inQzModWyHjrahgH+17ltFxlkX/Tuub6jDWuu7FC+u8zA8wVeD9l/tmJ3
0nKt4woD9TNeHn/5sBVl3olVXV5D4BB740vJZy14YHHznTpeAt/aqTdtCmrC
HxOKMYdlCFS0mLajXmrCUDuXx2XkOZZ8b3oj8jXhry0jicpHCAz3LLLXi2hE
SkvZZ1kgrycUv93/vgHdX1L7c7UINPP7lhXzsQ4dQztunb5FoOurI2Kb7euw
uyqTT4c8Vz9JaPl5yNRhTUHuX33y3L0kzLBXzatFZn0Z63OOBE5kzIu8LqzB
Rk3XrCF3Au9lEEybK6vwYKjKqWeBBJbe00m47VWFgkNhAuvJc36P6YBZgVoV
OqZtf/CczAGT5vKOmk2V2H1IMcQqijy3X8zePtpdgV5PGaZ9iQSOO5q9sAyt
QKs9t1cEUgisPVN6LPhKBW7y8dhgmkbg7ixWv1EyZ+T6mT9pJnMHh0Jo+Onp
Mnz55GGHegGBNu87p7STyzBttyqLfhGBnrrUo4ZWZcg3FPjesJjAdmNry5oh
xP07emTPlRFomt4h7EcrwV9Ss896awm0Lz5X3LWhCHV1WV57dhOYH3T7gOeb
QrRbf/Utby+Zg++7Pd23uRBrPtz4E91Hrq+rgPn1/wpwl9PSphgyh23eckPC
VzQfZZnv7VAZJ9Aw7aLghrRP6NqlavyOzHEWjAe0J1KfsPEmM+cchcyZDRvd
zA/n4Q5f5nd2ZA70nLTFBaUcvLxp1FVwnnzf/zZ8UK/Jxir5MsYxMkdqGhie
j1LPxu1dSnVadAIlbL+aHtHJwscK4slXyBxqPa3Gy5SUiXQq18eLZE7dG9ba
7Z3xEdcxovjOLpC5uokj+XFROr7Jqt+y/TuZi9lSpRbL0vDp6HLSIsnbTp/Y
blybiqqK36LqydzLNSDIsq8rGfddeZBtRObk+2/uuHoMJGHkhpSWHWSONmgJ
Pt0xloiJ7ePn2kmOpHjnWNITcI1HtYMomcNjWI+wO43E4/adh893kdxcztbo
0voe/x3Ukb3/m0Dp6j9nnMvikKlsdhcvmev3HNxRZ5sdi0H6ndwfSD67qftQ
rUoMPmWZ2SBFekGy+jxvskgUTumvcnwkmU2pcVyXGoZigwl7A0mPcGWqYtrZ
FILStUsKyyQH/HxbNJoRhGu76vQukl5i7aqZFPU2AOf3r3FJIvnV/S039B38
MN3VL3qB5NDiLYtbEn0x+dvlZlnSe8ZKIgScLV9gk5Ymyx2SjSOZ77ZIPMOE
SgPFdyRvG+RTVBl7hIZ8Dh5lJEsWscZN3LqH+b6+1cMkZ1zNnF0csEFRetzm
byQLvgu/fqTtCtY8TzNfJdn153g804FToCORWPqPZLman9cjVm/CwcP+u36R
bHm+6vKRZUe45277ZI5kyp6KzCiHhzBurkRvI3lD4UKK+9Jj6OzkvZ5JsoOK
lqOo7HMwlKF1PSN5RTGVqdHWBwRtenV1Sb6wUCN8O+0NPPhN6dpC8r+Rgwar
Tv6g2b73eiv5/g/k38krBQQCv20S3ZPkbZVPwx5nBcPvdu+n4iTP6bVOFrWE
gu+ToT315PrKWZs8pdPC4dvLsoobJOvaCQxt54iEVhddazq5P54Ni/onxKPh
uFHmTkeSxf0mM9KEYqGgfaWTTu6v91HVlDzZOJD8fj3AmGR10aD2gtPvocd4
1aCBrI9/rg0Dn3XiAYBl3wGSLbf23/hg+wFSnRe720mvCxdKUw50T4TuNKUi
PpKdtS73PfBNAsamwsSLZD3qGmlMHk5NgR3Vf8JySa/7SxFR0JvKgI/pTnNr
vxG41erGhXWLH4Fh4bt1Ddkfx28Y3rjMnAXHXtSTGkmgSbWn5BJXNmi1jfTW
kf3mVWi2f1EiF2xNle+tzJLeMljcLZKXC5wPjq/mkF53Vpr3t97xPKCzL701
JvvZ8d2GbVHqn6CiZf9wLNnvjcw1ztPmn8H9Spxg/jDpIQYTR8con+Ep7+jh
U6TXnXFQFusyKYDN2zmeVJAetyWojj31WiEwtSZUZpLzx1F44uGGS19AeOXF
D4l2ApdMdx/u6PgCrZXdXfdbyecXzNobqFMMG7oPMoqbyfnY9nsPk1YJuJpj
p2QDgfx8kWpPlRDs7GJccirI/lw/q8ZThmBxJ/JoGTkPBY48qWzcXQb8gnC8
ppTAQFtvoTORZfDwu/lKETlPX2efKFofWg7DzYeeqeUQ+DOYOlz6qhJYhOb2
0GP+5306SacaKkFXVY/jETnfl5P0I0rYq4Bq/U9xPemFMv5Ha5K9qkBi+fnD
deT5IPf3vJvSo2qQL4u0SHhFzqPKF1tdHGrhbsH1CFtnsp/6LOKcdBthuLVE
/bQy+bxPq7baBDWCgIXGoSDyfNMU/BFzvbcRtgaKi44cJ71ab22K+LUmqKgU
3m9Ano+WXG53r1k0A7P7k8phYQKZ4sYkD7i3wnXuGThJnrd/fR1Yo7AVWgi2
wyxMBFa7aI6wMLfBmshClZI/DKw+m1tzTbkNLroXFGz/zsAX1jwag7Vt8GYf
7zbzcQa2nkpspLW2Q6nnxpqLxQyc3OF/ve9rO6Swdqz4fCbzyZa7jaU8HdC+
adG0IIeBQk03ON30OiD0Xn/FcjIDe3+2in/u6YDNwi+XuYIZeOSbqI/oUCd8
cS31CL/DwJ8siuaZE90wGWIdJLSZgREy8vrnWHpgZcuS1PWNpAcujkpPCfYA
VX7Z1W8dA6c09DxZTHrggv6Q6NBvOvrtexj4baQH9P+L5uam0HFK6g0jtr8X
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
rwhoOQSD4QuX/YdIzzijI/og2yEQkkbtJr1IlmX6sczj6A/etwTjWkne5M19
dGjyDcjn3jfm+b9eo1TvO+UDeYbmezVJtmbe+F5++jlUf+2bdiPZgvVHxcD0
E1hgq81IJFnH/z+DxRZ38JPZd6+OZJHAovwDbc5Qs0pVmiDZM79b7cv7O/D8
Dw/P/zyOOL/7nrSGAYQUBI//z+OcqS8n5U1P46typ7z/eVy1FUuYrP5N7IxL
e/k/jyvktpKZE3fENMpJk3mSt8p9fJ0n9gCFuGWOd5N8821fVjHvY9yT6c33
+X/Ps3KgdwevF15Q0/jhR/KuNapFTptfIlx/0mtK8kx4mGENz2uUu3/8iwTJ
brHnh1688EON7U/jGOR6lCeaW+1/EYBGZRY+yST7+rcY1HoHIc/CqrMhyVlF
tcI3vElPFte/uYbkw5V+ugvPw9Br9vmlRHL9r+4Oa2R5Holi1PZTHeT+0RQO
6j94GI3eTJwx10kWuT+l5nwkFhf/m9emkPvv46wX2i/5Hp/7sad2k96mlBSh
6yUWj/sSX+gpk3zXPN9RQigBvxyU1Ekh6+n3LVy+sz0RX+m5Kl8n62/kzfUp
Vt4k5DWzP5ZB1ucRcdmzIZzJyNW+32uRrN8ThdOPUlhS8eRS5DZrsr4dd00L
PaVl4EJepdQ/0ttO1HtKzU5/xK37t9Vzk3xzl0GL6ngm+hyuKNhB9lM+I52x
SM3CDqGt4Xxk/xnVa+rdHs1Bs29vb34i+1Mt3mHyvlEufmx6lfWS9LhGykKr
V38uwlG6nj7Zz9rz3xX9O/NwIn/9+z6y/9OWRiXv1OZjRrrUzcfkfGg6m6t+
UeUzro1vddo+QkDPj8lWhfLPqNhkMJxEzpOnH93j6UUF6Gb9GDPJ+XO3yUeA
52MRZkQZNph1kuvLdv5sw/4vyLNBPbeknQCxq/VUt6QvuKtu6y+uNgL+K5ER
a4ktRuvY2cioJvL9bonArsBSbJc+qHutmny/oJUf0VyI+ZWlEg8qCThbfvbY
f76I8XzhFm/Lyf5wGHd+qFSGHKxsrPEl5Pr+t3lQ/Hg5Xr68q832EzmvfvHc
Lj5QiRMxI8fD4wk4uHFNxG/bSvT7Kl7BHkeAcDLbBbmcSvy1deiKXTQBD/bo
rwYeqUK+9bfLBMPJ8yR9/jC3ajV+HVN+xP+GANWHahEUo1p8xYLOZi7kPPo6
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
/b/cif8DnI1uSA==
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-1., 0.999999883135173}, {-0.9999998782744886, 
   0.9999998592812046}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["Substitute Tan[t/2] by parameter u", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    FractionBox[
     RowBox[{"1", "-", 
      SuperscriptBox[
       RowBox[{"Tan", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"]}], 
     RowBox[{"1", "+", 
      SuperscriptBox[
       RowBox[{"Tan", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"]}]], ",", 
    FractionBox[
     RowBox[{"2", " ", 
      RowBox[{"Tan", "[", 
       RowBox[{"t", "/", "2"}], "]"}]}], 
     RowBox[{"1", "+", 
      SuperscriptBox[
       RowBox[{"Tan", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}], "}"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"Tan", "[", 
    RowBox[{"t", "/", "2"}], "]"}], " ", "\[Rule]", " ", "u"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"1", "-", 
     SuperscriptBox["u", "2"]}], 
    RowBox[{"1", "+", 
     SuperscriptBox["u", "2"]}]], ",", 
   FractionBox[
    RowBox[{"2", " ", "u"}], 
    RowBox[{"1", "+", 
     SuperscriptBox["u", "2"]}]]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Note that the denominator is the same in both coordinates. If we move to the \
projective plane, we can write the point in homogeneous coordinates and every \
coordinate is a quadratic polynomial. I.e., the circle can be parametrized as\
\
\>", "Text"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"1", "-", 
        SuperscriptBox["u", "2"]}]},
      {
       RowBox[{"2", " ", "u"}]},
      {
       RowBox[{"1", "+", 
        SuperscriptBox["u", "2"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"],

Cell["\<\
Here is a function that projects a projective point to the Euclidean plane\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2e", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", " ", "y_", ",", " ", "w_"}], "}"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "/", "w"}], ",", " ", 
    RowBox[{"y", "/", "w"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell["This moves an Euclidean point to projective plane at w", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e2p", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x_", ",", " ", "y_"}], "}"}], ",", " ", 
    RowBox[{"w_:", "1"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"w", " ", "x"}], ",", " ", 
    RowBox[{"w", " ", "y"}], ",", " ", "w"}], "}"}]}]], "Input",
 InitializationCell->True],

Cell["So we can plot the projected curve as", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"p2e", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "-", 
       SuperscriptBox["u", "2"]}], ",", 
      RowBox[{"2", " ", "u"}], ",", " ", 
      RowBox[{"1", "+", 
       SuperscriptBox["u", "2"]}]}], "}"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"u", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "1"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1:eJxV13c41X3cB3BJZSUl3UnZo9Iwwq3hnYzQUITulNAiovs2igolMrOiZERG
NtkrZCVJjlVmRjjmj4ys8nxdz/X88fyu61znvP75/c73nM/3+/58BE2stK8x
MjAwTJHXyvv/XhP4v0+0DQyhy8sUOHMME57wqKBYjcHiD7ENXVbzCc857Ctk
sF4iNhm4uUpTzBDOAavS54llmwM+u/JcxR+G1cKzxAktfB39/Gaga6ypnSQ2
O1G5pCJmCcsS5qRRYp1N805ng/9FUtn60gFiw0LmdiceG+SUb2brJg4o+XAn
JcwOPkp83t+IeXUtFNv47bGzZrdyPbF/7Z6/1kbfg+nCQckPxB2BGJYUc4SQ
o5bOO+LAsDGtlHPO4OM0S84gpsvx+ikFP0TYs1SyQAr8bqs3mvI8hsHxjkUf
Yp+zMwoLF1zR5L5przNx2ubsF15hbsjrCJMyWfk9ctdXJ/F7oENsikmbWNmm
y/mgsSckrfQ4lIgZ6KOofu2F7Rwa5dtX1vtLJqpb9CnoXO2WLMTnb8RKmN/w
haqd05mZPxQit19RczjnBwOdNTk1xLIvK2irgv1xuFKa1YJ4e6XgCDPPM1iE
P76uTTzImvajOv8Z3Axm5+SJn55g2eZ+IQgRZkqlDMRlG4wFmMKCIS2d/s39
NwU9Z42ZSb4QDMgeGjAl1m4eEksqCUHWlV+71Ik9HBquXjF6ifkF9nNMxDP3
i8bqo0KR4T4tbb1E4d+8PJ9XIhE40K/18yQxbavRvTOVEeC4OTkoSlwU2aDK
cP0VfrptsmtepHDEN3VPqk4kDrsJ8kkQZ3+3HWYMioKt7PHI9Hlyv+BqO++/
YtC+WtHWnrjJlDsq1DIG+HDxkhKxQLUcPaEyBibvRG/UzVGQYvv+rtw6Fuot
/xl3/qJwUFBkx+iXOLjYxM/UzVA4+2rIkN09AaHjgcvuxErq0/5s3xNwnv5n
+zHi1xousSxyifjIYhHwdpqCdyj/ZcYfiVhUPWfqOkUhM28qox/JsEneVcUw
SeGBfkrA7V+pUBjmZUueoKCQF8F68XQaPKPnr+gRK30aE1OLTYPI2aCz8RQF
1Yl6Pq9d6bB3FdqhNE5hg63EO+2v6Ug3dbyvNkJBIzfWplg6A+Ka2c8jf1Do
16VlL9CzYGiowShHnL833uXOxmz031p4VdNHgetRn+uUQjZSfzbaTPZS+Hrq
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
TnLYoW/YvWKG/3dN4H8APc3kdA==
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
Note that u=Tan[t/2] goes from 0 to 1 when t goes from 0 to Pi/2. This is why \
we only see one quadrant of the circle.\
\>", "Text"],

Cell["\<\
The curve looks prettier if we make it symmetric about the x-axis.  So we can \
accomplish this by reparameterizing so that at v = 0 we have u = \
-Tan[\[Alpha]/2] and when v = 1 we have u = Tan[\[Alpha]/2]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "-", 
      SuperscriptBox["u", "2"]}], ",", 
     RowBox[{"2", " ", "u"}], ",", " ", 
     RowBox[{"1", "+", 
      SuperscriptBox["u", "2"]}]}], "}"}], " ", "/.", " ", 
   RowBox[{"u", "\[Rule]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Tan", "[", 
         RowBox[{"\[Alpha]", "/", "2"}], "]"}]}], 
       RowBox[{"(", 
        RowBox[{"1", "-", "v"}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"Tan", "[", 
        RowBox[{"\[Alpha]", "/", "2"}], "]"}], " ", "v"}]}], ")"}]}]}], " ", "//",
   " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "-", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
     SuperscriptBox[
      RowBox[{"Tan", "[", 
       FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}], ",", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "v"}]}], ")"}], " ", 
    RowBox[{"Tan", "[", 
     FractionBox["\[Alpha]", "2"], "]"}]}], ",", 
   RowBox[{"1", "+", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
     SuperscriptBox[
      RowBox[{"Tan", "[", 
       FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Since this is a projective point, we can multiply by Cos[\[Alpha]/2]^2 and \
simplify things further.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "-", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"Tan", "[", 
          FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}], ",", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", "v"}]}], ")"}], " ", 
       RowBox[{"Tan", "[", 
        FractionBox["\[Alpha]", "2"], "]"}]}], ",", 
      RowBox[{"1", "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"Tan", "[", 
          FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}]}], "}"}], 
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{"\[Alpha]", "/", "2"}], "]"}], "^", "2"}]}], " ", "//", 
   "Simplify"}], " ", "//", " ", "Expand"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "v"}], "-", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{"Cos", "[", "\[Alpha]", "]"}], "-", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"], " ", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], ",", 
   RowBox[{"1", "-", 
    RowBox[{"2", " ", "v"}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "-", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"], " ", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This gives us the piece of the circle spanning the range [-\[Alpha]/2, \
\[Alpha]/2]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Alpha]", "=", 
     RowBox[{"Pi", "/", "4"}]}], "}"}], ",", 
   RowBox[{"ParametricPlot", "[", 
    RowBox[{
     RowBox[{"p2e", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"2", " ", "v"}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "+", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}], "-", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"], " ", 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], ",", 
        RowBox[{"1", "-", 
         RowBox[{"2", " ", "v"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "+", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"], " ", 
          RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}]}], "}"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
5Xlh2BLzv/8g/1v/D4DhWHs=
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
Now we  can convert the polynomial pieces to Bernstein basis and get the \
control points for the rational quadratic B\[EAcute]zier that represents our \
arc\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"b2p", "[", "2", "]"}], ".", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Coefficient", "[", 
          RowBox[{"#", ",", " ", "v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "2"}], "}"}]}], "]"}]}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", " ", "v"}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "+", 
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], "-", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"], " ", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], ",", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "+", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"], " ", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}]}], "}"}]}], "]"}], "]"}], 
  " ", "//", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", 
     RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Check to see that this works", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bb2", "[", "v", "]"}], ".", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
        RowBox[{"-", 
         RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", 
        RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
        RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], "}"}]}], 
   " ", "-", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"2", " ", "v"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"]}], "+", 
      RowBox[{"Cos", "[", "\[Alpha]", "]"}], "-", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"], " ", 
       RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], "+", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Sin", "[", "\[Alpha]", "]"}]}]}], ",", 
     RowBox[{"1", "-", 
      RowBox[{"2", " ", "v"}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"]}], "+", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"], " ", 
       RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Here is a function that returns the control-point matrix. Let c = \
Cos[\[Alpha]]. (Remember that Abs[c] <= 1!)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonicalarc", "[", "c_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", " ", "=", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"1", "-", 
        RowBox[{"c", "^", "2"}]}], "]"}]}], "}"}], ",", " ", 
    TagBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", 
         RowBox[{"-", "s"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "c"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c", ",", "s", ",", "1"}], "}"}]}], "}"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["And here is a nice animation.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", " ", "=", " ", 
       RowBox[{"canonicalarc", "[", 
        RowBox[{"Cos", "[", "\[Alpha]", "]"}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ParametricPlot", "[", 
        RowBox[{
         RowBox[{"p2e", "[", 
          RowBox[{
           RowBox[{"bb2", "[", "v", "]"}], ".", "c1"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", "Large", "]"}], ",", " ", "Red", ",", " ", 
          RowBox[{"Point", "[", 
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], "]"}]}], 
         "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", 
       RowBox[{"Pi", "/", "4"}]}], "}"}], ",", "0", ",", 
     RowBox[{"Pi", "-", 
      RowBox[{"Pi", "/", "100"}]}]}], "}"}], ",", " ", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0"}], "}"}], ",", " ", "0", ",", " ", "1"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0, $CellContext`\[Alpha]$$ = 
    Rational[1, 4] Pi, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], Rational[1, 4] Pi}, 0, 
      Rational[99, 100] Pi}, {{
       Hold[$CellContext`t$$], 0}, 0, 1}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`\[Alpha]$2611$$ = 
    0, $CellContext`t$2612$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`t$$ = 0, $CellContext`\[Alpha]$$ = 
        Rational[1, 4] Pi}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$2611$$, 0], 
        Hold[$CellContext`t$$, $CellContext`t$2612$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`c1$ = $CellContext`canonicalarc[
           Cos[$CellContext`\[Alpha]$$]]}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb2[$CellContext`v], $CellContext`c1$]], \
{$CellContext`v, 0, 1}, PlotRange -> {{-2, 2}, {-2, 2}}, PlotStyle -> Thick, 
          ImageSize -> Large], 
         Graphics[{
           PointSize[Large], Red, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]]]}]]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, Rational[1, 4] Pi}, 0, 
         Rational[99, 100] Pi}, {{$CellContext`t$$, 0}, 0, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{623., {341., 348.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalarc[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[1 - $CellContext`c^2]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
Now let us do the same for the equilateral hyperbola parametrization. It is \
defined by the implicit equation is x^2 - y^2 = 1. Since Cosh[t]^2 - \
Sinh[t]^2 = 1, we will use x = Cosh[t] and y = Sinh[t] as our parametrization.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cosh", "[", "t", "]"}], ",", " ", 
     RowBox[{"Sinh", "[", "t", "]"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
bkRH/94CGhRrTFw9844C//f/A/wPu89TKA==
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
Half-argument formulas for Sinh and Cosh in terms of Tanh work pretty much \
the same way as those for the trigonometric counterparts\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Sinh", "[", "t", "]"}], " ", "==", 
  FractionBox[
   RowBox[{" ", 
    RowBox[{"2", " ", 
     RowBox[{"Sinh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], 
     RowBox[{"Cosh", "[", 
      RowBox[{"t", "/", "2"}], "]"}]}]}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cosh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], "-", 
    SuperscriptBox[
     RowBox[{"Sinh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "==", 
  FractionBox[
   RowBox[{" ", 
    RowBox[{"2", " ", 
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}]}]}], 
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{" ", 
    RowBox[{"2", " ", 
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}]}]}], 
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"Sinh", "[", "t", "]"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cosh", "[", "t", "]"}], " ", "==", 
  FractionBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cosh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], "+", 
    SuperscriptBox[
     RowBox[{"Sinh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], " "}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"Cosh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], "-", 
    SuperscriptBox[
     RowBox[{"Sinh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "==", 
  FractionBox[
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], " "}], 
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " "}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"1", "+", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"], " "}], 
   RowBox[{"1", "-", 
    SuperscriptBox[
     RowBox[{"Tanh", "[", 
      RowBox[{"t", "/", "2"}], "]"}], "2"]}]], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"Cosh", "[", "t", "]"}]], "Output"]
}, Open  ]],

Cell["Equilateral hyperbola in terms of Tanh half-argument.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"1", "+", 
       SuperscriptBox[
        RowBox[{"Tanh", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"], " "}], 
      RowBox[{"1", "-", 
       SuperscriptBox[
        RowBox[{"Tanh", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"]}]], ",", " ", 
     FractionBox[
      RowBox[{" ", 
       RowBox[{"2", " ", 
        RowBox[{"Tanh", "[", 
         RowBox[{"t", "/", "2"}], "]"}]}]}], 
      RowBox[{"1", "-", 
       SuperscriptBox[
        RowBox[{"Tanh", "[", 
         RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
Ld1782hQqDly9cwnCvzf/wf4H+JpVBs=
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["Substitute Tanh[t/2] by parameter u", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    FractionBox[
     RowBox[{"1", "+", 
      SuperscriptBox[
       RowBox[{"Tanh", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"], " "}], 
     RowBox[{"1", "-", 
      SuperscriptBox[
       RowBox[{"Tanh", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"]}]], ",", " ", 
    FractionBox[
     RowBox[{" ", 
      RowBox[{"2", " ", 
       RowBox[{"Tanh", "[", 
        RowBox[{"t", "/", "2"}], "]"}]}]}], 
     RowBox[{"1", "-", 
      SuperscriptBox[
       RowBox[{"Tanh", "[", 
        RowBox[{"t", "/", "2"}], "]"}], "2"]}]]}], "}"}], " ", "/.", " ", 
  RowBox[{
   RowBox[{"Tanh", "[", "a_", "]"}], " ", "\[Rule]", " ", "u"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"1", "+", 
     SuperscriptBox["u", "2"]}], 
    RowBox[{"1", "-", 
     SuperscriptBox["u", "2"]}]], ",", 
   FractionBox[
    RowBox[{"2", " ", "u"}], 
    RowBox[{"1", "-", 
     SuperscriptBox["u", "2"]}]]}], "}"}]], "Output"]
}, Open  ]],

Cell["Again, the denominators are the same. So we can homogenize", "Text"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"1", "+", 
     SuperscriptBox["u", "2"]}], ",", 
    RowBox[{"2", " ", "u"}], ",", 
    RowBox[{"1", "-", 
     SuperscriptBox["u", "2"]}]}], "}"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Input"],

Cell["We can plot the projected curve as", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParametricPlot", "[", 
  RowBox[{
   RowBox[{"p2e", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "+", 
       SuperscriptBox["u", "2"]}], ",", 
      RowBox[{"2", " ", "u"}], ",", " ", 
      RowBox[{"1", "-", 
       SuperscriptBox["u", "2"]}]}], "}"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"u", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
oDbd1ujVrkg4B/OEjKMTkpT/9j9omSRU
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
Once again, we make the representation more symmetric by reparameterizing so \
that when v = 0 we have u = -Tanh[\[Alpha]/2] and when v = 1 we have u = \
Tanh[\[Alpha]/2]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "+", 
      SuperscriptBox["u", "2"]}], ",", 
     RowBox[{"2", " ", "u"}], ",", " ", 
     RowBox[{"1", "-", 
      SuperscriptBox["u", "2"]}]}], "}"}], " ", "/.", " ", 
   RowBox[{"u", "\[Rule]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"Tanh", "[", 
         RowBox[{"\[Alpha]", "/", "2"}], "]"}]}], 
       RowBox[{"(", 
        RowBox[{"1", "-", "v"}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"Tanh", "[", 
        RowBox[{"\[Alpha]", "/", "2"}], "]"}], " ", "v"}]}], ")"}]}]}], " ", "//",
   " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "+", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
     SuperscriptBox[
      RowBox[{"Tanh", "[", 
       FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}], ",", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "v"}]}], ")"}], " ", 
    RowBox[{"Tanh", "[", 
     FractionBox["\[Alpha]", "2"], "]"}]}], ",", 
   RowBox[{"1", "-", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
     SuperscriptBox[
      RowBox[{"Tanh", "[", 
       FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Simplify further by multiplying by ",
 Cell[BoxData[
  RowBox[{" ", 
   SuperscriptBox[
    RowBox[{"Cosh", "[", 
     FractionBox["\[Alpha]", "2"], "]"}], "2"]}]],
  CellChangeTimes->{{3.625175672913312*^9, 3.625175713075883*^9}}]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"Tanh", "[", 
          FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}], ",", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", "v"}]}], ")"}], " ", 
       RowBox[{"Tanh", "[", 
        FractionBox["\[Alpha]", "2"], "]"}]}], ",", 
      RowBox[{"1", "-", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"2", " ", "v"}]}], ")"}], "2"], " ", 
        SuperscriptBox[
         RowBox[{"Tanh", "[", 
          FractionBox["\[Alpha]", "2"], "]"}], "2"]}]}]}], "}"}], " ", 
    SuperscriptBox[
     RowBox[{"Cosh", "[", 
      FractionBox["\[Alpha]", "2"], "]"}], "2"]}], "//", "Simplify"}], " ", "//",
   " ", "Expand"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"2", " ", "v"}], "-", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{"Cosh", "[", "\[Alpha]", "]"}], "-", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"], " ", 
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}]}], ",", 
   RowBox[{"1", "-", 
    RowBox[{"2", " ", "v"}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{"2", " ", "v", " ", 
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "-", 
    RowBox[{"2", " ", 
     SuperscriptBox["v", "2"], " ", 
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This gives us the piece of the curve spanning the range [-\[Alpha]/2, \
\[Alpha]/2]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Alpha]", "=", "1"}], "}"}], ",", 
   RowBox[{"ParametricPlot", "[", 
    RowBox[{
     RowBox[{"p2e", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"2", " ", "v"}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "+", 
         RowBox[{"Cosh", "[", "\[Alpha]", "]"}], "-", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"], " ", 
          RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}]}], ",", 
        RowBox[{"1", "-", 
         RowBox[{"2", " ", "v"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"]}], "+", 
         RowBox[{"2", " ", "v", " ", 
          RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["v", "2"], " ", 
          RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}]}], "}"}], "]"}], ",", 
     " ", 
     RowBox[{"{", 
      RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], Thickness[Large], Opacity[1.], 
    FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
     "]]}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-2, 2}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["Now convert the control points to Bernstein basis", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"b2p", "[", "2", "]"}], ".", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Coefficient", "[", 
          RowBox[{"#", ",", " ", "v", ",", " ", "i"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "2"}], "}"}]}], "]"}]}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"2", " ", "v"}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "+", 
        RowBox[{"Cosh", "[", "\[Alpha]", "]"}], "-", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"], " ", 
         RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}]}], ",", 
       RowBox[{"1", "-", 
        RowBox[{"2", " ", "v"}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"]}], "+", 
        RowBox[{"2", " ", "v", " ", 
         RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["v", "2"], " ", 
         RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}]}], "}"}]}], "]"}], "]"}], 
  "//", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", 
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cosh", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"Sinh", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["Check to see that this works", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bb2", "[", "v", "]"}], ".", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cosh", "[", "\[Alpha]", "]"}], ",", 
        RowBox[{"-", 
         RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", 
        RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cosh", "[", "\[Alpha]", "]"}], ",", 
        RowBox[{"Sinh", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], "}"}]}], 
   " ", "-", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"2", " ", "v"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"]}], "+", 
      RowBox[{"Cosh", "[", "\[Alpha]", "]"}], "-", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"], " ", 
       RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}], "+", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Sinh", "[", "\[Alpha]", "]"}]}]}], ",", 
     RowBox[{"1", "-", 
      RowBox[{"2", " ", "v"}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"]}], "+", 
      RowBox[{"2", " ", "v", " ", 
       RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["v", "2"], " ", 
       RowBox[{"Cosh", "[", "\[Alpha]", "]"}]}]}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Here is a function that returns the control-point matrix for the canonical \
hyperbola. Let c = Cosh[\[Alpha]] (Note that Abs[c] >= 1!)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonicalhyperbola", "[", "c_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", " ", "=", 
      RowBox[{"Sqrt", "[", 
       RowBox[{
        RowBox[{"c", "^", "2"}], "-", "1"}], "]"}]}], "}"}], ",", " ", 
    TagBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", 
         RowBox[{"-", "s"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "c"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c", ",", "s", ",", "1"}], "}"}]}], "}"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["And here is the cool animation.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", "=", " ", 
       RowBox[{"canonicalhyperbola", "[", "cosh\[Alpha]", "]"}]}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ParametricPlot", "[", 
        RowBox[{
         RowBox[{"p2e", "[", 
          RowBox[{
           RowBox[{"bb2", "[", "v", "]"}], ".", "c1"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], ",", " ", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", "Large", "]"}], ",", " ", "Red", ",", " ", 
          RowBox[{"Point", "[", 
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], "]"}]}], 
         "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cosh\[Alpha]", ",", "1.5", ",", "\"\<Cosh[\[Alpha]]\>\""}], 
      "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"1", "/", "10000"}]}], ",", "3"}], "}"}], ",", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0"}], "}"}], ",", " ", "0", ",", " ", "1"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cosh\[Alpha]$$ = 1.5, $CellContext`t$$ = 0, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`cosh\[Alpha]$$], 1.5, "Cosh[\[Alpha]]"}, 
      Rational[10001, 10000], 3}, {{
       Hold[$CellContext`t$$], 0}, 0, 1}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`cosh\[Alpha]$2677$$ = 
    0, $CellContext`t$2678$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cosh\[Alpha]$$ = 1.5, $CellContext`t$$ = 
        0}, "ControllerVariables" :> {
        Hold[$CellContext`cosh\[Alpha]$$, $CellContext`cosh\[Alpha]$2677$$, 
         0], 
        Hold[$CellContext`t$$, $CellContext`t$2678$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`c1$ = \
$CellContext`canonicalhyperbola[$CellContext`cosh\[Alpha]$$]}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb2[$CellContext`v], $CellContext`c1$]], \
{$CellContext`v, 0, 1}, PlotRange -> {{-2, 2}, {-2, 2}}, PlotStyle -> Thick, 
          ImageSize -> Large], 
         Graphics[{
           PointSize[Large], Red, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]]]}]]], 
      "Specifications" :> {{{$CellContext`cosh\[Alpha]$$, 1.5, 
          "Cosh[\[Alpha]]"}, 
         Rational[10001, 10000], 3}, {{$CellContext`t$$, 0}, 0, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{623., {341., 348.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalhyperbola[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[$CellContext`c^2 - 1]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
Here is another way of looking at the rational B\[EAcute]zier. Each internal \
control point has a weight. The higher the weight, the closer the curve is \
forced to come to that control point.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "6"}], ",", " ", 
          RowBox[{"-", "3"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"6", ",", " ", 
          RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws", " ", "=", " ", "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "w"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "10"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Thick", ",", "Red"}], "]"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Subscript", "[", 
                 RowBox[{"p", ",", 
                  RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
              ",", 
              RowBox[{
               RowBox[{"pt", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", 
            RowBox[{"Line", "[", "pt", "]"}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"w", ",", "Large"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], "]"}]}], 
           "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pt", ",", "pts"}], "}"}], ",", "Locator"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w", ",", " ", "ws"}], "}"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "0.0001"}], ",", " ", "10"}], "}"}]}], 
    "]"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {{-6, -3}, {0, 5}, {
    6, -3}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = 1, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-6, -3}, {0, 5}, {6, -3}}}, Automatic}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`w$$], 1}, -0.9999, 10}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`t$2733$$ = 
    0, $CellContext`w$2734$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`pt$$ = {{-6, -3}, {0, 5}, {
         6, -3}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$2733$$, 0], 
        Hold[$CellContext`w$$, $CellContext`w$2734$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3]]}}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb2[$CellContext`t$$], $CellContext`m$]], \
{$CellContext`t$$, 0, 1}, PlotRange -> 10, PlotStyle -> Directive[Thick, Red],
           ImageSize -> Large, Axes -> False], 
         Graphics[
          Table[
           Text[
            Style[
             Subscript[$CellContext`p, $CellContext`i - 1], Large], 
            Part[$CellContext`pt$$, $CellContext`i] + {0, 
             1}], {$CellContext`i, 1, 
            Length[$CellContext`pt$$]}]], 
         Graphics[{Dashed, 
           Line[$CellContext`pt$$]}], 
         Graphics[{
           Text[
            Style[$CellContext`w$$, Large], {0, -1}], 
           PointSize[Large], Blue, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb2[$CellContext`t$$], $CellContext`m$]]]}]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-6, -3}, {0, 5}, {6, -3}}}, 
         Automatic, ControlType -> Locator}, {{$CellContext`t$$, 0.5}, 0, 
         1}, {{$CellContext`w$$, 1}, -0.9999, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {344., 351.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}, 
       Attributes[Subscript] = {NHoldRest}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
What are the tangents at the endpoint and where do they meet?\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"d", " ", "=", " ", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"p2e", "[", 
         RowBox[{
          RowBox[{"bb2", "[", "t", "]"}], ".", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x1", ",", "y1", ",", "w"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}], "]"}], 
        ",", "t"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"d", " ", "/.", " ", 
       RowBox[{"t", "\[Rule]", "0"}]}], ",", " ", 
      RowBox[{"d", "/.", " ", 
       RowBox[{"t", "\[Rule]", "1"}]}]}], "}"}]}], "]"}], "//", " ", 
  "Simplify", " "}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "w", " ", "x0"}], "+", 
      RowBox[{"2", " ", "x1"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "w", " ", "y0"}], "+", 
      RowBox[{"2", " ", "y1"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "x1"}], "+", 
      RowBox[{"2", " ", "w", " ", "x2"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "y1"}], "+", 
      RowBox[{"2", " ", "w", " ", "y2"}]}]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", " ", "=", " ", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"p2e", "[", 
          RowBox[{
           RowBox[{"bb2", "[", "t", "]"}], ".", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x1", ",", "y1", ",", "w"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}], "]"}], 
         ",", "t"}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"d", " ", "/.", " ", 
        RowBox[{"t", "\[Rule]", "0"}]}], ",", " ", 
       RowBox[{"d", "/.", " ", 
        RowBox[{"t", "\[Rule]", "1"}]}]}], "}"}]}], "]"}], " ", "/", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "w"}], ")"}]}], " ", "//", " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x0"}], "+", 
      FractionBox["x1", "w"]}], ",", 
     RowBox[{
      RowBox[{"-", "y0"}], "+", 
      FractionBox["y1", "w"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["x1", "w"]}], "+", "x2"}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["y1", "w"]}], "+", "y2"}]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
This gives us the tangent directions. But we know that at t=0 the point is \
{x0, y0} and at t=1 the point is {x2, y2}. So the parametric equations for \
the tangents are \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x0"}], "+", 
      FractionBox["x1", "w"]}], ",", 
     RowBox[{
      RowBox[{"-", "y0"}], "+", 
      FractionBox["y1", "w"]}]}], "}"}], "u"}], " ", "+", " ", 
  RowBox[{"{", 
   RowBox[{"x0", ",", "y0"}], "}"}]}]], "Input"],

Cell["and ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["x1", "w"]}], "+", "x2"}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["y1", "w"]}], "+", "y2"}]}], "}"}], "v"}], " ", "+", " ", 
  RowBox[{"{", 
   RowBox[{"x2", ",", " ", "y2"}], "}"}]}]], "Input"],

Cell["So, clearly, these meet at {x1, y1}/w when {u,v} = {1,-1}", "Text"],

Cell["\<\
Using the interpretation in which the central control-point a weight w and is \
given by {x1 w, y1 w, w}, the curve is still tangent to the line connecting \
the (unweighted) control points.\
\>", "Text"],

Cell["What happens when w = 0 ? What about the tangent directions?", "Text"],

Cell["\<\
The affine invariance of the integral B\[EAcute]zier curves is also \
maintained by the rational B\[EAcute]zier curves, naturally. In fact, the \
rational B\[EAcute]zier curves are projective-invariant! This is obvious from \
the matrix representation for the curve.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rotation", "[", "\[Beta]_", "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "\[Beta]", "]"}], ",", 
      RowBox[{"Sin", "[", "\[Beta]", "]"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Beta]", "]"}]}], ",", 
      RowBox[{"Cos", "[", "\[Beta]", "]"}], ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"translation", "[", 
   RowBox[{"{", 
    RowBox[{"tx_", ",", " ", "ty_"}], "}"}], "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"tx", ",", "ty", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"scale", "[", 
   RowBox[{"{", 
    RowBox[{"sx_", ",", " ", "sy_"}], "}"}], "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sx", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "sy", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", " ", "=", " ", 
       RowBox[{
        RowBox[{"canonicalarc", "[", "cos\[Alpha]", "]"}], ".", 
        RowBox[{"scale", "[", 
         RowBox[{"{", 
          RowBox[{"sx", ",", " ", "sy"}], "}"}], "]"}], ".", 
        RowBox[{"rotation", "[", "\[Beta]", "]"}], ".", 
        RowBox[{"translation", "[", "z", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"p0", " ", "=", " ", 
          RowBox[{"p2e", "[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
         RowBox[{"p1", " ", "=", " ", 
          RowBox[{"p2e", "[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", " ", 
         RowBox[{"p2", " ", "=", " ", 
          RowBox[{"p2e", "[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "3", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "v", "]"}], ".", "c"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "2"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", " ", "Black", ",", 
            
            RowBox[{"Point", "[", 
             RowBox[{"{", 
              RowBox[{"p0", ",", "p1", ",", " ", "p2"}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", "Dashed", ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{"p0", ",", "p1", ",", " ", "p2"}], "}"}], "]"}], ",", 
            "Red", ",", " ", 
            RowBox[{"Point", "[", 
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "c"}], "]"}], "]"}]}], 
           "}"}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sx", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sy", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cos\[Alpha]", ",", " ", 
       RowBox[{
        RowBox[{"Sqrt", "[", "2", "]"}], "/", "2"}], ",", 
       "\"\<Cos[\[Alpha]]\>\""}], "}"}], ",", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{"-", "Pi"}], "/", "2"}], ",", 
     RowBox[{"Pi", "/", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "0"}], "}"}], ",", " ", "0", ",", " ", "1"}], "}"}], 
   ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", " ", "Locator"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cos\[Alpha]$$ = 2^
    Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
    1, $CellContext`t$$ = 0, $CellContext`z$$ = {0, 
    0}, $CellContext`\[Beta]$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`sx$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`sy$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`cos\[Alpha]$$], 2^Rational[-1, 2], 
       "Cos[\[Alpha]]"}, -1, 1}, {{
       Hold[$CellContext`\[Beta]$$], 0}, Rational[-1, 2] Pi, Rational[1, 2] 
      Pi}, {{
       Hold[$CellContext`t$$], 0}, 0, 1}, {{
       Hold[$CellContext`z$$], {0, 0}}, Automatic}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`sx$2793$$ = 
    0, $CellContext`sy$2794$$ = 0, $CellContext`cos\[Alpha]$2795$$ = 
    0, $CellContext`\[Beta]$2796$$ = 0, $CellContext`t$2797$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cos\[Alpha]$$ = 
        2^Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
        1, $CellContext`t$$ = 
        0, $CellContext`z$$ = {0, 0}, $CellContext`\[Beta]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`sx$$, $CellContext`sx$2793$$, 0], 
        Hold[$CellContext`sy$$, $CellContext`sy$2794$$, 0], 
        Hold[$CellContext`cos\[Alpha]$$, $CellContext`cos\[Alpha]$2795$$, 0], 
        
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$2796$$, 0], 
        Hold[$CellContext`t$$, $CellContext`t$2797$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`c$ = Dot[
           $CellContext`canonicalarc[$CellContext`cos\[Alpha]$$], 
           $CellContext`scale[{$CellContext`sx$$, $CellContext`sy$$}], 
           $CellContext`rotation[$CellContext`\[Beta]$$], 
           $CellContext`translation[$CellContext`z$$]]}, 
        Module[{$CellContext`p0$ = $CellContext`p2e[
            Part[$CellContext`c$, 1]], $CellContext`p1$ = $CellContext`p2e[
            Part[$CellContext`c$, 2]], $CellContext`p2$ = $CellContext`p2e[
            Part[$CellContext`c$, 3]]}, 
         Show[
          ParametricPlot[
           $CellContext`p2e[
            Dot[
             $CellContext`bb2[$CellContext`v], $CellContext`c$]], \
{$CellContext`v, 0, 1}, PlotRange -> 2, PlotStyle -> Thick, ImageSize -> 
           Large], 
          Graphics[{
            PointSize[Large], Black, 
            Point[{$CellContext`p0$, $CellContext`p1$, $CellContext`p2$}], 
            Dashed, 
            Line[{$CellContext`p0$, $CellContext`p1$, $CellContext`p2$}], Red, 
            Point[
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`t$$], $CellContext`c$]]]}]]]], 
      "Specifications" :> {{{$CellContext`sx$$, 1}, 
         Rational[1, 10], 5}, {{$CellContext`sy$$, 1}, 
         Rational[1, 10], 
         5}, {{$CellContext`cos\[Alpha]$$, 2^Rational[-1, 2], 
          "Cos[\[Alpha]]"}, -1, 1}, {{$CellContext`\[Beta]$$, 0}, 
         Rational[-1, 2] Pi, Rational[1, 2] Pi}, {{$CellContext`t$$, 0}, 0, 
         1}, {{$CellContext`z$$, {0, 0}}, Automatic, ControlType -> Locator}},
       "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {381., 388.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalarc[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[1 - $CellContext`c^2]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`scale[{
          Pattern[$CellContext`sx, 
           Blank[]], 
          Pattern[$CellContext`sy, 
           Blank[]]}] := {{$CellContext`sx, 0, 0}, {0, $CellContext`sy, 0}, {
         0, 0, 1}}, $CellContext`rotation[
         Pattern[$CellContext`\[Beta], 
          Blank[]]] := {{
          Cos[$CellContext`\[Beta]], 
          Sin[$CellContext`\[Beta]], 0}, {-Sin[$CellContext`\[Beta]], 
          Cos[$CellContext`\[Beta]], 0}, {0, 0, 1}}, $CellContext`translation[{
          Pattern[$CellContext`tx, 
           Blank[]], 
          Pattern[$CellContext`ty, 
           Blank[]]}] := {{1, 0, 0}, {0, 1, 
         0}, {$CellContext`tx, $CellContext`ty, 1}}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell[TextData[{
 "Now assume the endpoints of the rational quadratic are finite. I.e., assume \
w0 !=0 and w2 != 0 in {{x0,y0,w0},{x1,y1,w1},{x2,y2,w2}}. In that case, there \
are too many degrees of freedom in the representation. In fact, we can \
separate rational quadratic into two groups.  One group can be put in the \
form {{u0,v0,1},{u1,v1,r1},{u2,v2,1}}. The other group can be put in the form \
{{u0,v0,1},{u1,v1,r1},{u2,v2,-1}}.  In fact, odd degree rational Beziers can \
always be put in the form {{x0,y0,1},{x1,y1,w1},{x2,y2,w2},...,{xn,yn,1}}. It \
is the even-degree ones that are separated into two groups.\n\nTo see that, \
we will find a ",
 StyleBox["projective",
  FontSlant->"Italic"],
 " reparametrization t -> ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     RowBox[{"a", " ", "t"}], " ", "+", " ", "b"}], 
    RowBox[{
     RowBox[{"c", " ", "t"}], "+", "d"}]], TraditionalForm]]],
 " that traces the same curve but with control points in one of these \
\[OpenCurlyDoubleQuote]canonical\[CloseCurlyDoubleQuote] forms. This is \
simpler if we move to homogeneous coordinates for the ",
 StyleBox["parameter",
  FontSlant->"Italic"],
 ". So, we will write the parameter as {t, s} and find a reparametrization {a \
t + b s, c t + d s}."
}], "Text"],

Cell["\<\
The Bernstein and Power basis look like this in homogeneous parameters\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bb", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"t", ",", "s"}], "}"}], ",", " ", "2"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"s", "-", "t"}], ")"}], "2"], ",", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{"s", "-", "t"}], ")"}], " ", "t"}], ",", 
   SuperscriptBox["t", "2"]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pb", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"t", ",", "s"}], "}"}], ",", "2"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["s", "2"], ",", 
   RowBox[{"s", " ", "t"}], ",", 
   SuperscriptBox["t", "2"]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "s"}], "}"}], ",", "2"}], "]"}], " ", "\[Equal]", " ", 
   RowBox[{
    RowBox[{"pb", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", "s"}], "}"}], ",", "2"}], "]"}], ".", 
    RowBox[{"p2b", "[", "2", "]"}]}]}], " ", "//", " ", "Simplify"}]], "Input"],

Cell[BoxData["True"], "Output"]
}, Open  ]],

Cell["The curve, in homogeneous parameters and coordinates, is", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"pb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "t"}], "}"}], ",", "2"}], "]"}], " ", ".", 
   RowBox[{"p2b", "[", "2", "]"}], ".", 
   RowBox[{"ppoints", "[", "2", "]"}]}], "//", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["t", "2"], " ", "x0"}], "+", 
    RowBox[{"2", " ", "s", " ", "t", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x0"}], "+", "x1"}], ")"}]}], "+", 
    RowBox[{
     SuperscriptBox["s", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"x0", "-", 
       RowBox[{"2", " ", "x1"}], "+", "x2"}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["t", "2"], " ", "y0"}], "+", 
    RowBox[{"2", " ", "s", " ", "t", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "y0"}], "+", "y1"}], ")"}]}], "+", 
    RowBox[{
     SuperscriptBox["s", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"y0", "-", 
       RowBox[{"2", " ", "y1"}], "+", "y2"}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["t", "2"], " ", "w0"}], "+", 
    RowBox[{"2", " ", "s", " ", "t", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "w0"}], "+", "w1"}], ")"}]}], "+", 
    RowBox[{
     SuperscriptBox["s", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"w0", "-", 
       RowBox[{"2", " ", "w1"}], "+", "w2"}], ")"}]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
What is the effect of a projective transformation on t,s ? I.e., if we \
replace t -> a u + b v and s -> c u + d v, what happens?\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"pb", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"a", " ", "u"}], "+", 
        RowBox[{"b", " ", "v"}]}], ",", " ", 
       RowBox[{
        RowBox[{"c", " ", "u"}], "+", 
        RowBox[{"d", " ", "v"}]}]}], "}"}], ",", "2"}], "]"}], " ", "//", " ",
    "Expand"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["c", "2"], " ", 
     SuperscriptBox["u", "2"]}], "+", 
    RowBox[{"2", " ", "c", " ", "d", " ", "u", " ", "v"}], "+", 
    RowBox[{
     SuperscriptBox["d", "2"], " ", 
     SuperscriptBox["v", "2"]}]}], ",", 
   RowBox[{
    RowBox[{"a", " ", "c", " ", 
     SuperscriptBox["u", "2"]}], "+", 
    RowBox[{"b", " ", "c", " ", "u", " ", "v"}], "+", 
    RowBox[{"a", " ", "d", " ", "u", " ", "v"}], "+", 
    RowBox[{"b", " ", "d", " ", 
     SuperscriptBox["v", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["a", "2"], " ", 
     SuperscriptBox["u", "2"]}], "+", 
    RowBox[{"2", " ", "a", " ", "b", " ", "u", " ", "v"}], "+", 
    RowBox[{
     SuperscriptBox["b", "2"], " ", 
     SuperscriptBox["v", "2"]}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Still homogeneous polynomials in u,v. So we can write these new polynomials \
in terms of the homogeneous Power basis. Which means there is a matrix that \
maps the original polynomial to these new ones\
\>", "Text"],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"projectivereparametrization", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", ",", " ", "b_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c_", ",", "d_"}], "}"}]}], "}"}], ",", " ", "n_"}], "]"}], 
   " ", ":=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", "s"}], "}"}], ",", "  ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Coefficient", "[", " ", 
          RowBox[{"#", ",", " ", 
           RowBox[{"pb", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"t", ",", "s"}], "}"}], ",", "n"}], "]"}]}], "]"}], 
         "&"}], ",", " ", 
        RowBox[{"pb", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"a", " ", "t"}], " ", "+", " ", 
             RowBox[{"b", " ", "s"}]}], ",", 
            RowBox[{
             RowBox[{"c", " ", "t"}], " ", "+", " ", 
             RowBox[{"d", " ", "s"}]}]}], "}"}], ",", "n"}], "]"}]}], "]"}]}],
      "]"}], "]"}]}],
  InitializationCell->True]], "Input",
 InitializationCell->True],

Cell["See what this matrix looks like for the quadratics", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"projectivereparametrization", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", " ", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", " ", "2"}], "]"}], " ", "//",
   " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SuperscriptBox["d", "2"], 
      RowBox[{"b", " ", "d"}], 
      SuperscriptBox["b", "2"]},
     {
      RowBox[{"2", " ", "c", " ", "d"}], 
      RowBox[{
       RowBox[{"b", " ", "c"}], "+", 
       RowBox[{"a", " ", "d"}]}], 
      RowBox[{"2", " ", "a", " ", "b"}]},
     {
      SuperscriptBox["c", "2"], 
      RowBox[{"a", " ", "c"}], 
      SuperscriptBox["a", "2"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["Check that this is right", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"pb", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"a", " ", "t"}], " ", "+", " ", 
         RowBox[{"b", " ", "s"}]}], ",", " ", 
        RowBox[{
         RowBox[{"c", " ", "t"}], " ", "+", " ", 
         RowBox[{"d", " ", "s"}]}]}], "}"}], ",", "2"}], "]"}], " ", "-", " ", 
    RowBox[{
     RowBox[{"pb", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "s"}], "}"}], ",", "2"}], "]"}], ".", 
     RowBox[{"projectivereparametrization", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", " ", "2"}], "]"}]}]}],
    " ", "//", "Simplify"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"bb", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"a", " ", "s"}], " ", "+", " ", 
         RowBox[{"b", " ", "t"}]}], ",", " ", 
        RowBox[{
         RowBox[{"c", " ", "s"}], " ", "+", " ", 
         RowBox[{"d", " ", "t"}]}]}], "}"}], ",", "2"}], "]"}], " ", "-", " ", 
    RowBox[{
     RowBox[{"bb", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s", ",", "t"}], "}"}], ",", "2"}], "]"}], ".", 
     RowBox[{"b2p", "[", "2", "]"}], ".", 
     RowBox[{"projectivereparametrization", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ",", " ", "2"}], "]"}], 
     ".", 
     RowBox[{"p2b", "[", "2", "]"}]}]}], " ", "//", " ", 
   "Simplify"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
We now impose conditions on a, b, c, d so that u/v = 0 gives t/s = 0 and u/v \
= 1 gives t/s = 1. This will make sure that the segments have the same \
endpoints when t/s and u/v are in [0, 1]. First condition gives b = 0. Adding \
the second condition, we have a+b = c+d. Together, and simplifying, we get {t \
-> u, s -> (1-\[Lambda]) u + \[Lambda] v}\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"projectivereparametrization", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], "}"}], 
    ",", " ", "2"}], "]"}], " ", "//", " ", "MatrixForm"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SuperscriptBox["\[Lambda]", "2"], "0", "0"},
     {
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Lambda]"}], ")"}], " ", "\[Lambda]"}], 
      "\[Lambda]", "0"},
     {
      RowBox[{"1", "-", 
       RowBox[{"2", " ", "\[Lambda]"}], "+", 
       SuperscriptBox["\[Lambda]", "2"]}], 
      RowBox[{"1", "-", "\[Lambda]"}], "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["Check the endpoints", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"t", "\[Rule]", "u"}], ",", 
      RowBox[{"s", "\[Rule]", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Lambda]"}], ")"}], " ", "u"}], "+", 
        RowBox[{"\[Lambda]", " ", "v"}]}]}]}], "}"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{"u", "\[Rule]", "0"}], "}"}]}], " ", "//", " ", 
   "Simplify"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"t", "\[Rule]", "0"}], ",", 
   RowBox[{"s", "\[Rule]", 
    RowBox[{"v", " ", "\[Lambda]"}]}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"t", "\[Rule]", "u"}], ",", 
      RowBox[{"s", "\[Rule]", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "\[Lambda]"}], ")"}], " ", "u"}], "+", 
        RowBox[{"\[Lambda]", " ", "v"}]}]}]}], "}"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{"u", "\[Rule]", "v"}], "}"}]}], "//", " ", 
   "Simplify"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"t", "\[Rule]", "v"}], ",", 
   RowBox[{"s", "\[Rule]", "v"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Of course, we can see what happens to the control-point matrix\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"b2p", "[", "2", "]"}], ".", 
    RowBox[{"projectivereparametrization", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], "}"}],
       ",", " ", "2"}], "]"}], ".", 
    RowBox[{"p2b", "[", "2", "]"}], ".", 
    RowBox[{"ppoints", "[", "2", "]"}]}], " ", "//", " ", "FullSimplify"}], 
  " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"x0", " ", 
       SuperscriptBox["\[Lambda]", "2"]}], 
      RowBox[{"y0", " ", 
       SuperscriptBox["\[Lambda]", "2"]}], 
      RowBox[{"w0", " ", 
       SuperscriptBox["\[Lambda]", "2"]}]},
     {
      RowBox[{"x1", " ", "\[Lambda]"}], 
      RowBox[{"y1", " ", "\[Lambda]"}], 
      RowBox[{"w1", " ", "\[Lambda]"}]},
     {"x2", "y2", "w2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
And now we solve for \[Lambda] that makes the weights of the first and last \
control points equal.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"w0", " ", 
     SuperscriptBox["\[Lambda]", "2"]}], "\[Equal]", "w2"}], ",", " ", 
   "\[Lambda]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       SqrtBox["w2"], 
       SqrtBox["w0"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     FractionBox[
      SqrtBox["w2"], 
      SqrtBox["w0"]]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Already we see why we need the two groups... (What if w0 and w2 had different \
signs?)\
\>", "Text"],

Cell["Now substitute back and see what happens", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"b2p", "[", "2", "]"}], ".", 
      RowBox[{"projectivereparametrization", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], 
         "}"}], ",", " ", "2"}], "]"}], ".", 
      RowBox[{"p2b", "[", "2", "]"}], ".", 
      RowBox[{"ppoints", "[", "2", "]"}]}], "/.", 
     RowBox[{"{", 
      RowBox[{"\[Lambda]", "\[Rule]", 
       FractionBox[
        SqrtBox["w2"], 
        SqrtBox["w0"]]}], "}"}]}], " ", "//", " ", "Simplify"}], " ", "//", 
   "Together"}], " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{"w2", " ", "x0"}], "w0"], 
      FractionBox[
       RowBox[{"w2", " ", "y0"}], "w0"], "w2"},
     {
      FractionBox[
       RowBox[{
        SqrtBox["w2"], " ", "x1"}], 
       SqrtBox["w0"]], 
      FractionBox[
       RowBox[{
        SqrtBox["w2"], " ", "y1"}], 
       SqrtBox["w0"]], 
      FractionBox[
       RowBox[{"w1", " ", 
        SqrtBox["w2"]}], 
       SqrtBox["w0"]]},
     {"x2", "y2", "w2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"%", " ", "/", "w2"}], "//", " ", "Simplify"}], " ", "//", " ", 
  "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["x0", "w0"], 
      FractionBox["y0", "w0"], "1"},
     {
      FractionBox["x1", 
       RowBox[{
        SqrtBox["w0"], " ", 
        SqrtBox["w2"]}]], 
      FractionBox["y1", 
       RowBox[{
        SqrtBox["w0"], " ", 
        SqrtBox["w2"]}]], 
      FractionBox["w1", 
       RowBox[{
        SqrtBox["w0"], " ", 
        SqrtBox["w2"]}]]},
     {
      FractionBox["x2", "w2"], 
      FractionBox["y2", "w2"], "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["Putting this all together, we have", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonize", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0_", ",", "y0_", ",", "w0_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2_", ",", "y2_", ",", "w2_"}], "}"}]}], "}"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", " ", "=", 
      RowBox[{"1", "/", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"w0", " ", "w2"}], "]"}]}]}], "}"}], " ", ",", "  ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["x0", "w0"], ",", 
        FractionBox["y0", "w0"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", " ", "x1"}], ",", 
        RowBox[{"s", " ", "y1"}], ",", 
        RowBox[{"s", " ", "w1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["x2", "w2"], ",", 
        FractionBox["y2", "w2"], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["Repeating the procedure with cubics", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"b2p", "[", "3", "]"}], ".", 
    RowBox[{"projectivereparametrization", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], "}"}],
       ",", " ", "3"}], "]"}], ".", 
    RowBox[{"p2b", "[", "3", "]"}], ".", 
    RowBox[{"ppoints", "[", "3", "]"}]}], "//", " ", "FullSimplify"}], "//", 
  "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"x0", " ", 
       SuperscriptBox["\[Lambda]", "3"]}], 
      RowBox[{"y0", " ", 
       SuperscriptBox["\[Lambda]", "3"]}], 
      RowBox[{"w0", " ", 
       SuperscriptBox["\[Lambda]", "3"]}]},
     {
      RowBox[{"x1", " ", 
       SuperscriptBox["\[Lambda]", "2"]}], 
      RowBox[{"y1", " ", 
       SuperscriptBox["\[Lambda]", "2"]}], 
      RowBox[{"w1", " ", 
       SuperscriptBox["\[Lambda]", "2"]}]},
     {
      RowBox[{"x2", " ", "\[Lambda]"}], 
      RowBox[{"y2", " ", "\[Lambda]"}], 
      RowBox[{"w2", " ", "\[Lambda]"}]},
     {"x3", "y3", "w3"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"w0", " ", 
     SuperscriptBox["\[Lambda]", "3"]}], "\[Equal]", "w3"}], ",", " ", 
   "\[Lambda]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     FractionBox[
      SuperscriptBox["w3", 
       RowBox[{"1", "/", "3"}]], 
      SuperscriptBox["w0", 
       RowBox[{"1", "/", "3"}]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], 
         RowBox[{"1", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"1", "/", "3"}]]}], 
       SuperscriptBox["w0", 
        RowBox[{"1", "/", "3"}]]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], 
        RowBox[{"2", "/", "3"}]], " ", 
       SuperscriptBox["w3", 
        RowBox[{"1", "/", "3"}]]}], 
      SuperscriptBox["w0", 
       RowBox[{"1", "/", "3"}]]]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
And here we see why we don' t need two groups for the cubics. We can always \
canonize them.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"b2p", "[", "3", "]"}], ".", 
      RowBox[{"projectivereparametrization", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], 
         "}"}], ",", " ", "3"}], "]"}], ".", 
      RowBox[{"p2b", "[", "3", "]"}], ".", 
      RowBox[{"ppoints", "[", "3", "]"}]}], "/", "w3"}], " ", "/.", " ", 
    RowBox[{"\[Lambda]", "\[Rule]", 
     FractionBox[
      SuperscriptBox["w3", 
       RowBox[{"1", "/", "3"}]], 
      SuperscriptBox["w0", 
       RowBox[{"1", "/", "3"}]]]}]}], "//", " ", "FullSimplify"}], "//", 
  "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["x0", "w0"], 
      FractionBox["y0", "w0"], "1"},
     {
      FractionBox["x1", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"2", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"1", "/", "3"}]]}]], 
      FractionBox["y1", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"2", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"1", "/", "3"}]]}]], 
      FractionBox["w1", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"2", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"1", "/", "3"}]]}]]},
     {
      FractionBox["x2", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"1", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"2", "/", "3"}]]}]], 
      FractionBox["y2", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"1", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"2", "/", "3"}]]}]], 
      FractionBox["w2", 
       RowBox[{
        SuperscriptBox["w0", 
         RowBox[{"1", "/", "3"}]], " ", 
        SuperscriptBox["w3", 
         RowBox[{"2", "/", "3"}]]}]]},
     {
      FractionBox["x3", "w3"], 
      FractionBox["y3", "w3"], "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"canonize", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0_", ",", "y0_", ",", "w0_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2_", ",", "y2_", ",", "w2_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x3_", ",", "y3_", ",", "w3_"}], "}"}]}], "}"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"r", " ", "=", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Surd", "[", 
           RowBox[{"w3", ",", "3"}], "]"}], " ", 
          RowBox[{
           RowBox[{"Surd", "[", 
            RowBox[{"w0", ",", "3"}], "]"}], "^", "2"}]}], ")"}]}]}], ",", 
      " ", 
      RowBox[{"s", " ", "=", " ", 
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Surd", "[", 
           RowBox[{"w0", ",", "3"}], "]"}], " ", 
          RowBox[{
           RowBox[{"Surd", "[", 
            RowBox[{"w3", ",", "3"}], "]"}], "^", "2"}]}], ")"}]}]}]}], "}"}],
     " ", ",", "  ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["x0", "w0"], ",", 
        FractionBox["y0", "w0"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"r", " ", "x1"}], ",", 
        RowBox[{"r", " ", "y1"}], ",", 
        RowBox[{"s", " ", "w1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", " ", "x2"}], ",", 
        RowBox[{"s", " ", "y2"}], ",", 
        RowBox[{"s", " ", "w2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["x3", "w3"], ",", 
        FractionBox["y3", "w3"], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input"],

Cell["\<\
So what is the deal with quadratics when w0 w2 < 0? No projective \
reparametrization will allow us to change that. \
\>", "Text"],

Cell["\<\
We can, however, pick a value of \[Lambda] so that the new w0 has the same \
absolute value as the new w2. So the problem reduces to figuring out what a \
curve with control points as follows is\
\>", "Text"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x2", ",", "y2", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "}"}]], "Input"],

Cell["\<\
Since the w(t) is continuous and takes value 1 at t=0 and -1 at t=1, it \
certainly has a root for t in [0,1]. The parity of the number of roots is \
odd. Since this is a quadratic, it must have a single root for t in [0,1]. \
Let this root be at t0. If the curve is to remain bounded, then it must be \
the case that both x(t0) = 0 and y(t0) = 0. In that case, we could factor out \
the (t-t0) from x(t), y(t), and w(t) and we would be left out with a \
parametric line. 

This can only happen if our quadratic is degenerate. So it looks like the \
typical case will be for an unbounded piece of curve. To find out the type of \
curve, check the implicit form\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", " ", "=", 
       RowBox[{
        RowBox[{"bb2", "[", "t", "]"}], ".", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x2", ",", "y2", ",", 
            RowBox[{"-", "1"}]}], "}"}]}], "}"}]}]}], "}"}], ",", " ", 
     RowBox[{"Resultant", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", " ", 
        RowBox[{"x", " ", 
         RowBox[{"p", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", 
        RowBox[{"y", " ", 
         RowBox[{"p", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], ",", " ", "t"}], "]"}]}], 
    "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x0", "2"], " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"4", " ", "w1", " ", "x0", " ", "x1", " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"4", " ", "w1", " ", "x1", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x2", "2"], " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y", " ", "y0"}], "-", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x1", " ", "y", " ", "y0"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y", " ", "y0"}], "-", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y", " ", "y0"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x", " ", "x2", " ", "y", " ", "y0"}], "-", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y", " ", "y0"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x1", " ", "x2", " ", "y", " ", "y0"}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x2", "2"], " ", "y", " ", "y0"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y0", "2"]}], "+", 
  RowBox[{"2", " ", "x", " ", "x2", " ", 
   SuperscriptBox["y0", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x2", "2"], " ", 
   SuperscriptBox["y0", "2"]}], "-", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x0", " ", "y", " ", "y1"}], "+", 
  RowBox[{"8", " ", "x", " ", "x1", " ", "y", " ", "y1"}], "-", 
  RowBox[{"4", " ", "x0", " ", "x1", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x2", " ", "y", " ", "y1"}], "-", 
  RowBox[{"8", " ", "w1", " ", "x0", " ", "x2", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "x1", " ", "x2", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "w1", " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y1"}], "-", 
  RowBox[{"4", " ", "x", " ", "x1", " ", "y0", " ", "y1"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x2", " ", "y0", " ", "y1"}], "-", 
  RowBox[{"4", " ", "x1", " ", "x2", " ", "y0", " ", "y1"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y1", "2"]}], "+", 
  RowBox[{"4", " ", "x", " ", "x0", " ", 
   SuperscriptBox["y1", "2"]}], "-", 
  RowBox[{"4", " ", "x", " ", "x2", " ", 
   SuperscriptBox["y1", "2"]}], "+", 
  RowBox[{"4", " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y1", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y", " ", "y2"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x", " ", "x0", " ", "y", " ", "y2"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x0", "2"], " ", "y", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x1", " ", "y", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x0", " ", "x1", " ", "y", " ", "y2"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y", " ", "y2"}], "-", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y", " ", "y2"}], "+", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y", " ", "y2"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y2"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y2"}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"8", " ", "w1", " ", "x", " ", "x1", " ", "y0", " ", "y2"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y0", " ", "y2"}], "+", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"4", " ", "w1", " ", 
   SuperscriptBox["x", "2"], " ", "y1", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x0", " ", "y1", " ", "y2"}], "+", 
  RowBox[{"4", " ", "x", " ", "x1", " ", "y1", " ", "y2"}], "-", 
  RowBox[{"4", " ", "x0", " ", "x1", " ", "y1", " ", "y2"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y2", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", 
   SuperscriptBox["y2", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x0", "2"], " ", 
   SuperscriptBox["y2", "2"]}]}]], "Output"]
}, Open  ]],

Cell["And the discriminant of the conic is", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Det", "[", 
   RowBox[{"Last", "[", " ", 
    RowBox[{"CoefficientArrays", "[", 
     RowBox[{"%", ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", " ", 
      RowBox[{"\"\<Symmetric\>\"", "\[Rule]", "True"}]}], "]"}], "]"}], "]"}],
   " ", "//", " ", "Factor"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "4"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    SuperscriptBox["w1", "2"]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x1", " ", "y0"}], "+", 
     RowBox[{"w1", " ", "x2", " ", "y0"}], "-", 
     RowBox[{"x0", " ", "y1"}], "-", 
     RowBox[{"x2", " ", "y1"}], "-", 
     RowBox[{"w1", " ", "x0", " ", "y2"}], "+", 
     RowBox[{"x1", " ", "y2"}]}], ")"}], "2"]}]], "Output"]
}, Open  ]],

Cell["\<\
First of all, notice that the last factor is the squared determinant of the \
control-point matrix. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"%", "/", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Det", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x2", ",", "y2", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "}"}], "]"}], ")"}], "^", "2"}]}], "//",
   "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "4"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    SuperscriptBox["w1", "2"]}], ")"}]}]], "Output"]
}, Open  ]],

Cell["(Then, notice that (1 + w1^2) is the discriminant of w(t))", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Discriminant", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"bb2", "[", "t", "]"}], ".", 
    RowBox[{"{", 
     RowBox[{"1", ",", "w1", ",", 
      RowBox[{"-", "1"}]}], "}"}]}], ",", "t"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"4", " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    SuperscriptBox["w1", "2"]}], ")"}]}]], "Output"]
}, Open  ]],

Cell["\<\
So the discriminant of the conic is either zero or negative. If it is zero, \
then the curve degenerates into either a line, a half-line, or a point. This \
is because the determinant of the control-point matrix is only zero when the \
control-points are colinear.

If the discriminant of the conic is negative, then the curve is a hyperbola. \
Moreover, the segment defined by t in [0,1] includes one ideal point. I.e., \
it goes to infinity and back.\
\>", "Text"],

Cell["Here is an example.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5"}], ",", " ", 
          RowBox[{"-", "5"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5"}], ",", " ", "5"}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws", " ", "=", " ", 
      RowBox[{"-", "4"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "w"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ",", 
             RowBox[{"-", "1"}]}], "]"}]}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "10"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Thick", ",", "Red"}], "]"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Subscript", "[", 
                 RowBox[{"p", ",", 
                  RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
              ",", 
              RowBox[{
               RowBox[{"pt", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", 
            RowBox[{"Line", "[", "pt", "]"}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"w", ",", "Large"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"-", "5"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], "]"}]}], 
           "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pt", ",", "pts"}], "}"}], ",", "Locator"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w", ",", " ", "ws"}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {{-5, -5}, {0, 0}, {-5, 
    5}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = -4, Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-5, -5}, {0, 0}, {-5, 5}}}, Automatic}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`w$$], -4}, -10, 10}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`t$2875$$ = 
    0, $CellContext`w$2876$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`pt$$ = {{-5, -5}, {0, 0}, {-5, 
         5}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = -4}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$2875$$, 0], 
        Hold[$CellContext`w$$, $CellContext`w$2876$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3], -1]}}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb2[$CellContext`t$$], $CellContext`m$]], \
{$CellContext`t$$, 0, 1}, PlotRange -> 10, PlotStyle -> Directive[Thick, Red],
           ImageSize -> Large, Axes -> False], 
         Graphics[
          Table[
           Text[
            Style[
             Subscript[$CellContext`p, $CellContext`i - 1], Large], 
            Part[$CellContext`pt$$, $CellContext`i] + {0, 
             1}], {$CellContext`i, 1, 
            Length[$CellContext`pt$$]}]], 
         Graphics[{Dashed, 
           Line[$CellContext`pt$$]}], 
         Graphics[{
           Text[
            Style[$CellContext`w$$, Large], {0, -5}], 
           PointSize[Large], Blue, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb2[$CellContext`t$$], $CellContext`m$]]]}]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-5, -5}, {0, 0}, {-5, 5}}}, 
         Automatic, ControlType -> Locator}, {{$CellContext`t$$, 0.5}, 0, 
         1}, {{$CellContext`w$$, -4}, -10, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {344., 351.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}, 
       Attributes[Subscript] = {NHoldRest}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
So when w0 w2 < 0, either we have something degenerate or we have a hyperbola \
that goes all the way to infinity and back. It's basically garbage. The case \
when w0 w2 > 0 is more useful. Let\[CloseCurlyQuote]s look at the \
discriminant of the conic again:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "t", "}"}], ",", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", " ", "=", 
       RowBox[{
        RowBox[{"bb2", "[", "t", "]"}], ".", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}]}], "}"}], 
     ",", " ", 
     RowBox[{"Resultant", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", " ", 
        RowBox[{"x", " ", 
         RowBox[{"p", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"p", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", 
        RowBox[{"y", " ", 
         RowBox[{"p", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], ",", " ", "t"}], "]"}]}], 
    "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x0", "2"], " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"4", " ", "w1", " ", "x0", " ", "x1", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"4", " ", "w1", " ", "x1", " ", "x2", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x2", "2"], " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y", " ", "y0"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x1", " ", "y", " ", "y0"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y", " ", "y0"}], "+", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y", " ", "y0"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x", " ", "x2", " ", "y", " ", "y0"}], "+", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y", " ", "y0"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x1", " ", "x2", " ", "y", " ", "y0"}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x2", "2"], " ", "y", " ", "y0"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y0", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x2", " ", 
   SuperscriptBox["y0", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x2", "2"], " ", 
   SuperscriptBox["y0", "2"]}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x0", " ", "y", " ", "y1"}], "-", 
  RowBox[{"8", " ", "x", " ", "x1", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "x0", " ", "x1", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x2", " ", "y", " ", "y1"}], "-", 
  RowBox[{"8", " ", "w1", " ", "x0", " ", "x2", " ", "y", " ", "y1"}], "+", 
  RowBox[{"4", " ", "x1", " ", "x2", " ", "y", " ", "y1"}], "-", 
  RowBox[{"4", " ", "w1", " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y1"}], "+", 
  RowBox[{"4", " ", "x", " ", "x1", " ", "y0", " ", "y1"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x2", " ", "y0", " ", "y1"}], "-", 
  RowBox[{"4", " ", "x1", " ", "x2", " ", "y0", " ", "y1"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y1", "2"]}], "-", 
  RowBox[{"4", " ", "x", " ", "x0", " ", 
   SuperscriptBox["y1", "2"]}], "-", 
  RowBox[{"4", " ", "x", " ", "x2", " ", 
   SuperscriptBox["y1", "2"]}], "+", 
  RowBox[{"4", " ", "x0", " ", "x2", " ", 
   SuperscriptBox["y1", "2"]}], "+", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y", " ", "y2"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", "x", " ", "x0", " ", "y", " ", "y2"}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x0", "2"], " ", "y", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x1", " ", "y", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x0", " ", "x1", " ", "y", " ", "y2"}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y", " ", "y2"}], "-", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y", " ", "y2"}], "+", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y", " ", "y2"}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y2"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["w1", "2"], " ", 
   SuperscriptBox["x", "2"], " ", "y0", " ", "y2"}], "+", 
  RowBox[{"2", " ", "x", " ", "x0", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"8", " ", "w1", " ", "x", " ", "x1", " ", "y0", " ", "y2"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x1", "2"], " ", "y0", " ", "y2"}], "+", 
  RowBox[{"2", " ", "x", " ", "x2", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"2", " ", "x0", " ", "x2", " ", "y0", " ", "y2"}], "-", 
  RowBox[{"4", " ", "w1", " ", 
   SuperscriptBox["x", "2"], " ", "y1", " ", "y2"}], "+", 
  RowBox[{"4", " ", "w1", " ", "x", " ", "x0", " ", "y1", " ", "y2"}], "+", 
  RowBox[{"4", " ", "x", " ", "x1", " ", "y1", " ", "y2"}], "-", 
  RowBox[{"4", " ", "x0", " ", "x1", " ", "y1", " ", "y2"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y2", "2"]}], "-", 
  RowBox[{"2", " ", "x", " ", "x0", " ", 
   SuperscriptBox["y2", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x0", "2"], " ", 
   SuperscriptBox["y2", "2"]}]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Det", "[", 
   RowBox[{"Last", "[", " ", 
    RowBox[{"CoefficientArrays", "[", 
     RowBox[{"%", ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", " ", 
      RowBox[{"\"\<Symmetric\>\"", "\[Rule]", "True"}]}], "]"}], "]"}], "]"}],
   " ", "//", " ", "Factor"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "4"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "w1"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", "w1"}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x1", " ", "y0"}], "-", 
     RowBox[{"w1", " ", "x2", " ", "y0"}], "-", 
     RowBox[{"x0", " ", "y1"}], "+", 
     RowBox[{"x2", " ", "y1"}], "+", 
     RowBox[{"w1", " ", "x0", " ", "y2"}], "-", 
     RowBox[{"x1", " ", "y2"}]}], ")"}], "2"]}]], "Output"]
}, Open  ]],

Cell["\<\
Assume the control-points are not colinear. In that case, what matters is the \
value of (1-w1^2). This comes from the discriminant of w(t)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Discriminant", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"bb2", "[", "t", "]"}], ".", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "w1", ",", " ", "1"}], "}"}]}], ",", "t"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"4", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["w1", "2"]}], ")"}]}]], "Output"]
}, Open  ]],

Cell["\<\
If w1 > 1, then there are no ideal points for t in [0, 1], but two outside \
this interval. Otherwise, if w < -1, there are two in [0,1]. Here is an \
example of hyperbola with two ideal points in [0,1].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "5"}], ",", " ", 
          RowBox[{"-", "5"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", " ", 
          RowBox[{"-", "5"}]}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws", " ", "=", " ", 
      RowBox[{"-", "4"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "w"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "10"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Thick", ",", "Red"}], "]"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Subscript", "[", 
                 RowBox[{"p", ",", 
                  RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
              ",", 
              RowBox[{
               RowBox[{"pt", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", 
            RowBox[{"Line", "[", "pt", "]"}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"w", ",", "Large"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"-", "5"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], "]"}]}], 
           "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pt", ",", "pts"}], "}"}], ",", "Locator"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w", ",", " ", "ws"}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {{-5, -5}, {0, 0}, {
    5, -5}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = -4, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-5, -5}, {0, 0}, {5, -5}}}, Automatic}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`w$$], -4}, -10, 10}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`t$2935$$ = 
    0, $CellContext`w$2936$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`pt$$ = {{-5, -5}, {0, 0}, {
         5, -5}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = -4}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$2935$$, 0], 
        Hold[$CellContext`w$$, $CellContext`w$2936$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3]]}}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb2[$CellContext`t$$], $CellContext`m$]], \
{$CellContext`t$$, 0, 1}, PlotRange -> 10, PlotStyle -> Directive[Thick, Red],
           ImageSize -> Large, Axes -> False], 
         Graphics[
          Table[
           Text[
            Style[
             Subscript[$CellContext`p, $CellContext`i - 1], Large], 
            Part[$CellContext`pt$$, $CellContext`i] + {0, 
             1}], {$CellContext`i, 1, 
            Length[$CellContext`pt$$]}]], 
         Graphics[{Dashed, 
           Line[$CellContext`pt$$]}], 
         Graphics[{
           Text[
            Style[$CellContext`w$$, Large], {0, -5}], 
           PointSize[Large], Blue, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb2[$CellContext`t$$], $CellContext`m$]]]}]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-5, -5}, {0, 0}, {5, -5}}}, 
         Automatic, ControlType -> Locator}, {{$CellContext`t$$, 0.5}, 0, 
         1}, {{$CellContext`w$$, -4}, -10, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {344., 351.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}, 
       Attributes[Subscript] = {NHoldRest}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
Therefore, if we want to be certain our  rational quadratics to be \
\[OpenCurlyDoubleQuote]well behaved\[CloseCurlyDoubleQuote] in [0,1], we must \
work with canonical rational quadratics with w > -1. This will give us \
parabolas when |w| = 1, ellipses when |w| < 1, and hyperbola when |w|>1.\
\>", "Text"],

Cell["Rational cubics can do all sorts of interesting things.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "7"}], ",", " ", 
          RowBox[{"-", "3"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "3"}], ",", " ", "5"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "5"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"7", ",", " ", 
          RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws1", " ", "=", " ", "1"}], ",", " ", 
     RowBox[{"ws2", " ", "=", " ", "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "w1"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ",", "w2"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "4", "]"}], "]"}], "]"}]}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb3", "[", "t", "]"}], ".", "m"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "10"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Thick", ",", "Red"}], "]"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Subscript", "[", 
                 RowBox[{"p", ",", 
                  RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
              ",", 
              RowBox[{
               RowBox[{"pt", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "+", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", 
            RowBox[{"Line", "[", "pt", "]"}]}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"w1", ",", "Large"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", 
                RowBox[{"-", "5"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"w2", ",", "Large"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", 
                RowBox[{"-", "5"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb3", "[", "t", "]"}], ".", "m"}], "]"}], "]"}]}], 
           "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pt", ",", "pts"}], "}"}], ",", "Locator"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w1", ",", " ", "ws1"}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", " ", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w2", ",", " ", "ws2"}], "}"}], ",", 
       RowBox[{"-", "10"}], ",", " ", "10"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {{-7, -3}, {-3, 5}, {3, 5}, {
    7, -3}}, $CellContext`t$$ = 0.5, $CellContext`w1$$ = 
    1, $CellContext`w2$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-7, -3}, {-3, 5}, {3, 5}, {7, -3}}}, 
      Automatic}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`w1$$], 1}, -10, 10}, {{
       Hold[$CellContext`w2$$], 1}, -10, 10}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`t$2995$$ = 
    0, $CellContext`w1$2996$$ = 0, $CellContext`w2$2997$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`pt$$ = {{-7, -3}, {-3, 5}, {3, 5}, {
         7, -3}}, $CellContext`t$$ = 0.5, $CellContext`w1$$ = 
        1, $CellContext`w2$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$2995$$, 0], 
        Hold[$CellContext`w1$$, $CellContext`w1$2996$$, 0], 
        Hold[$CellContext`w2$$, $CellContext`w2$2997$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w1$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3], $CellContext`w2$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 4]]}}, 
        Show[
         ParametricPlot[
          $CellContext`p2e[
           Dot[
            $CellContext`bb3[$CellContext`t$$], $CellContext`m$]], \
{$CellContext`t$$, 0, 1}, PlotRange -> 10, PlotStyle -> Directive[Thick, Red],
           ImageSize -> Large, Axes -> False], 
         Graphics[
          Table[
           Text[
            Style[
             Subscript[$CellContext`p, $CellContext`i - 1], Large], 
            Part[$CellContext`pt$$, $CellContext`i] + {0, 
             1}], {$CellContext`i, 1, 
            Length[$CellContext`pt$$]}]], 
         Graphics[{Dashed, 
           Line[$CellContext`pt$$]}], 
         Graphics[{
           Text[
            Style[$CellContext`w1$$, Large], {-1, -5}], 
           Text[
            Style[$CellContext`w2$$, Large], {1, -5}], 
           PointSize[Large], Blue, 
           Point[
            $CellContext`p2e[
             Dot[
              $CellContext`bb3[$CellContext`t$$], $CellContext`m$]]]}]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-7, -3}, {-3, 5}, {3, 5}, {
          7, -3}}}, Automatic, ControlType -> 
         Locator}, {{$CellContext`t$$, 0.5}, 0, 
         1}, {{$CellContext`w1$$, 1}, -10, 10}, {{$CellContext`w2$$, 1}, -10, 
         10}}, "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {356., 363.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb3[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^3, 
         3 (1 - $CellContext`t)^2 $CellContext`t, 
         3 (1 - $CellContext`t) $CellContext`t^2, $CellContext`t^3}, 
       Attributes[Subscript] = {NHoldRest}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
But how can we tell which canonical rational cubics have no ideal points in \
[0, 1]? In other words, when can we be  sure that w[t] has no roots in [0,1]? \
w[t] is\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bb3", "[", "t", "]"}], ".", 
  RowBox[{"{", 
   RowBox[{"1", ",", " ", "w1", ",", " ", "w2", ",", " ", "1"}], 
   "}"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "-", "t"}], ")"}], "3"], "+", 
  SuperscriptBox["t", "3"], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", "t"}], ")"}], "2"], " ", "t", " ", "w1"}], "+", 
  RowBox[{"3", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", "t"}], ")"}], " ", 
   SuperscriptBox["t", "2"], " ", "w2"}]}]], "Output"]
}, Open  ]],

Cell["\<\
This is a cubic with real coefficients. It either has three real roots or one \
real root and two complex conjugate roots. We can distinguish between them by \
looking at the discriminant\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Discriminant", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", "t"}], ")"}], "3"], "+", 
     SuperscriptBox["t", "3"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "-", "t"}], ")"}], "2"], " ", "t", " ", "w1"}], "+", 
     RowBox[{"3", " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", "t"}], ")"}], " ", 
      SuperscriptBox["t", "2"], " ", "w2"}]}], ",", "t"}], "]"}], " ", "//", 
  " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "27"}], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["w1", "3"]}], "-", 
    RowBox[{"6", " ", "w1", " ", "w2"}], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["w1", "2"], " ", 
     SuperscriptBox["w2", "2"]}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["w2", "3"]}]}], ")"}]}]], "Output"]
}, Open  ]],

Cell["\<\
The discriminant of a monic cubic is (\[Alpha] - \[Beta])^2 (\[Alpha] - \
\[Gamma])^2 (\[Beta] - \[Gamma])^2, where \[Alpha], \[Beta], and \[Gamma] are \
the roots of the cubic. If the leading coefficient is q, then the \
discriminant is simply multiplied by q^4. For cubics, we wither have a real \
root a, and two complex roots (b+c i) and (b - c i), or we have three real \
roots a, b, c. Let\[CloseCurlyQuote] s look at the product in these two cases\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Alpha]", " ", "-", " ", "\[Beta]"}], ")"}], "^", "2"}], " ", 
    
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Alpha]", " ", "-", " ", "\[Gamma]"}], ")"}], "^", "2"}], " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Beta]", " ", "-", " ", "\[Gamma]"}], ")"}], "^", "2"}]}], 
   " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "\[Rule]", "a"}], ",", " ", 
     RowBox[{"\[Beta]", "\[Rule]", 
      RowBox[{"b", "+", 
       RowBox[{"c", " ", "I"}]}]}], ",", " ", 
     RowBox[{"\[Gamma]", "\[Rule]", 
      RowBox[{"b", "-", " ", 
       RowBox[{"c", " ", "I"}]}]}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "4"}], " ", 
  SuperscriptBox["c", "2"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["a", "2"], "-", 
     RowBox[{"2", " ", "a", " ", "b"}], "+", 
     SuperscriptBox["b", "2"], "+", 
     SuperscriptBox["c", "2"]}], ")"}], "2"]}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"-", "4"}], " ", 
    SuperscriptBox["c", "2"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"a", "-", "b"}], ")"}], "2"], "+", 
       SuperscriptBox["c", "2"]}], ")"}], "2"]}], " ", "-", "%"}], " ", "//", 
  " ", "Simplify"}]], "Input"],

Cell[BoxData["0"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Alpha]", " ", "-", " ", "\[Beta]"}], ")"}], "^", "2"}], " ", 
    
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Alpha]", " ", "-", " ", "\[Gamma]"}], ")"}], "^", "2"}], " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[Beta]", " ", "-", " ", "\[Gamma]"}], ")"}], "^", "2"}]}], 
   " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Alpha]", "\[Rule]", "a"}], ",", " ", 
     RowBox[{"\[Beta]", "\[Rule]", "b"}], ",", " ", 
     RowBox[{"\[Gamma]", "\[Rule]", "c"}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", "b"}], ")"}], "2"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", "c"}], ")"}], "2"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"b", "-", "c"}], ")"}], "2"]}]], "Output"]
}, Open  ]],

Cell["\<\
So, if the discriminant is negative, we have a single real root. If the \
discriminant is positive, we have three distinct real roots. If the \
discriminant is zero, we have at least one repeated root, and all of them are \
real.\
\>", "Text"],

Cell[TextData[{
 "We know that w[0] = w[1] = 1. So there is no way we can have w[t] = 0 for t \
in [0, 1] and if t is the ",
 StyleBox["only",
  FontSlant->"Italic"],
 " root in [0,1]. It could be a double root, but if it is not a double root, \
then there must be another root in [0,1]. If there are two roots in [0,1], \
and they are both real, then the third root must also be real. Therefore, the \
discriminant cannot be negative. This means that if the discriminant is \
negative, we are safe!"
}], "Text"],

Cell["Here is what this region looks like. ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", " ", "=", " ", "10"}], ",", " ", 
     RowBox[{"f", "=", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"w1", ",", " ", "w2"}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{"-", "1"}], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["w1", "3"]}], "+", 
         RowBox[{"6", " ", "w1", " ", "w2"}], "+", 
         RowBox[{"3", " ", 
          SuperscriptBox["w1", "2"], " ", 
          SuperscriptBox["w2", "2"]}], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["w2", "3"]}]}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["w1", "3"]}], "+", 
      RowBox[{"6", " ", "w1", " ", "w2"}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["w1", "2"], " ", 
       SuperscriptBox["w2", "2"]}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["w2", "3"]}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"w1", ",", " ", 
       RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"w2", ",", " ", 
       RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", " ", 
     RowBox[{"MaxRecursion", "\[Rule]", "3"}], ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"Axes", "\[Rule]", "True"}], ",", " ", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"w1", ",", " ", "w2"}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"w1", ",", "w2"}], "]"}], "<", "0"}]}], "]"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4000"}], ",", "22600"}], "}"}]}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
2TGBVa/zssRj1vDZ7gHN9Nu1knrk3Tzf7w6zy2F3Y/0DH7foetXHdV7UT/j5
1oN2mP4t82c8rdP0bZyfMq+3Pyf20vZJHWoXGhH9YD8U9bxvj/OyM67PrzvU
XvijVFLv/YB4jn4uroHr1iV7E3Yc7DqyTxoT/gq9/PO6yr3hYL37Cj2Pftil
fug7U5xMkV1G5uFu5YtG/367fRffyXNZ3GovP5/Mbwg/n5Upvgf9tzw3OJXU
i9/rPbv1u7+xXe+F7kz2SPyxkH+w73Kewtd4f6HM7/wjUX7/Xbf5ZeGnxXrg
p8V+wC6InxbrFfb7oj+0liWe/G/15hcMvbql9tzjp/YrH14D7xy0s0JJPe0C
Pl9yY305vD7YAbELBnz/3oPRj60a83C0Nom/0G0ddUaP/HmFPCrnwotx35+V
SurlO78S1/egVFIf+j3x5LGip+q3rMFK6nkv4wCPvD9FZve7NvmV4fcFveF8
g7/yfsHBXr/pUJWHD3toZPnGWu1nxzYKnd906AQZx5//MKY8udbu0msbzM6J
3ZP9I3zSgKll7NrIF+hfwbcgF407Rv3/rrp2aBm/Y/xLwXvskvhR4FeB3x7y
VJBTrps7QPioIRNHKL1p3aP4Vd1qdoUwH63XJLs756T3I6SkHvwEXz3eSvuL
I15/I5XUM2/MY8C7eVuHCz6OuKde+YP3RL74x92lXO860Ohs7reV/PCYd9ZB
8OmTLSKXDt4xxdZD7mEctqPEusG/BLn11iP7S/vVTcMsXtLPE7DyiU9HO0p7
hZJ6OSeW1Jn+g5J6zl3sit7PCj53H8XvCvW0oz6zr7V2qJ/p0q4K5zV+UpTe
H8r7o2Tx3Lvivr0wldTnfG/yTwr4/MiSQXbuIo+Bt4FOXXZSp9471RrtcEtG
lWV8L21UvXJ3Z0Xo3j/rhI/6+Zeby97Pw/udyLp8O8lNPEc/4Bl4F0bzxj9P
Efn+0BNbqqIH2RHPm2Vqh1pyusrDbXd2lwYH8nLNZhnfomU9Fe/XiX2c8xK8
As/Ab9GXndlZGhj2x5ciH/3OON9XxfmvTyX13s9P9t2J8ZzbW/m6lfvHOJSb
N1nZuz604znBlzdHerypw0rqscMK3JT4L+q9HxnryLqGfTzrCuWXLl7bX/nt
nmi3OybaI6/fEOOpHiyxDqwL68C6QBeYx0CnH9s2Rub/4LsazL5zVK1+9pxm
089Ab0P7g/9RX94vVH9wp/iff+2bjYq30yea3Yt15bsyOW1Wsq/gB4u/RsCr
t3xC85sM/XXKq0Q/k2Ve6pS/aE/2MuQa5EAfd9g7P1SQK5Az0FdleesunKz7
cVZzlfcyjmA3HLxlkPCpo68db3pz5GNZt1mjo75roNmVfP47/5y3P/WOx774
6jES/3nBTxuq8OPQi1yPk2DGLfzxja9UOkO//VabXIKc0in84J9Mji/yO7X7
M6TfVZW7BX688jspH6qcI8+tNv0bMO14zvL3Rph29IO+LcvDXY76t1k9xodk
fB9+acs6rR37i5J6ee7Q7jx+f1lnn37QEzDfYZ0+9fHBtm6cm4EOfeym0aKX
++xTA/O4mNZJhvesRzgfhp4y2PxFsQNhn2FfIBchZyF3gd+BHl5yS3+NJ1+8
zfSNQT/bs3qbnG+Nb9wV7QdtkX4mfTvjosz9D/qet9RjP2RdKamXcQyN5+gv
N1lJvfC1b+gq/SSM++OdVlKf3Sc0vdu+K9dndOf61dFxnYf0lJhX5hn9G/4c
wu8tH16Gj2O+ucc58IcX1++phHW975cDhU78z4Ym4UfX/XOS9UO/nFPKV+xW
OXf38+YvGtb3vz+ocdKfmlIn9vV/zdTxXLo75mP73lb1t27fUsGfBH2a+FEt
fSnGH99n+SWQ75TP2JX7690Qz6nRqaSefUYeSOQk5Crp/8a++Ryphw5Bl0TO
viz5Vwp+rhob9QYN5ucIP0nZO779puWJXlJSv0y++3rTK1JSjz8k/Jrs21XR
H2b65tLB0u6JSGcete9mHpBTkFsYF+cR9JD3yHzcHeXT+zqtpB68AL883bta
ykci/ftnJdNH1ugO5xrnXBjHXd2jhP6f8ID6G/xw3GiRL/f7d5ovzh3qabdI
3nOr8tfPvVg5L8BTbla8uizFl9o9N46OM07GneUzq9FB9g37CHoR5LCVezab
P+ItUj9UnvvNfYPVjtE2oRz2/VduTXFE2Bd6+2UFPRB6oUCHTzut0fTS2M+g
u4FfHbWv+nGfP6XJ7mMN87v05BR3LHh/rMtv9+4Uf845I9+3aJLJ9TJNsxPM
PmZfh/ZrT0/8Kn4t2CUkzv6Xib8I6/3Fnyd95Tjp94XKOpn36/rEYVBSL3jZ
vlbP6VKHyQMqVyc+Ev7i07L/yG/7T5NnoYvEyai+oMVg9gN6XehPkBtWfnJL
hXwFp2hZQb8RxtlzxjbB81lTIt3amfxBhH7tH8+LtbE8IPmDE5eJnIw9AfoS
xveZc9Rf6a+n4A8fz51zNpUCf1lunCzn8a6nmuL3NOl8HxLxdvqAMnkXKKnH
T7jIjxj7SZaHunUfi68EvqHWbOC/Gqu04znfjvosD3StHj434xfmp3racZ57
vhiYfer5TGDyl4R5uvKVgWZ3Rk6BzyziQ+GT/O+cy1me7Roc8O/YMzQ/wzeP
V7/n23+R4skvCefnWKXLe58/MtpXnT/7gpSPqqgeOIuDXLXL7IGe78zsvrMS
Hyr4+FzSx8N3wIeE9Wz+i37f4yfubXxe0TxIPOwDu0UOW7H/oDL0X/C0cW+D
9TxsMz4x0xe0p/6gq0fJPhls8gt+bPSn+vTEfwIzjt7jCvYv9DbwO+h1et+j
c8UPon6utq/YZ5lfz02JT4VvhS+FT4VvhY/V8/oxK+kPu7Ho+1Zszv2We/GF
tMvsvhvSc/Bl8GnEEaPHhi9GPwbdgd8D/lwNvvAneyp8j9Lf8cYvZn4r85Jf
cWjXNlf5wIXTd5TgU+Bbeud/DfRV/WyinnHeFstHSZ4b7uNQP9w1lncCf3zu
p1C9/HMV7NLQAfJhsH7A0A3sw9AtSuopoTeU1Mv5uSDFywKT145zhvowjn/d
3PIfnwMO4xmxs0Xy2xx76VR7rqhf7AHkK8j9LkaW4Uv0PEiw6EkWj9R1vTjG
yV+2uXSy8AuPl+ScfXFjJfM7XJjy1AETx6n+XDusvug52vEcdhXsLPBN+APo
fm+J+pt+5u8GTD4d/MeyPDtPRzvE+Z1mj8C+hF6dOCDigrDbCN6e2GV+WXpu
j7D5BQ56xd9+Ru2Gn39ihM0v8f/cj4B9Xfn/lyvcRwEs8YPjHikp//RyZa58
5sO5XWvldtPPyXpN3JTHR9XOTeRc/KrIU65+T9vNXznwPfvdvt3ywgV+/Y4D
B2p+ynmRbizZq4wdAbuC4O+cRtWzLZ4Y7UZ7G73WfZfOdWD4W5n/Rdhvthqf
Dd/t42bhv8lXAR/D/MPHAOv41P4xc1WC1e9shPHb8L/sf8aJXxdwoC/3jmgS
+nHdz/fReTi4SeZn2Yv7yP792zn9Nf9vea+yj6tTf5mYb3lpirMDZl+IfvPX
3aXDAvjdOzTu/Lw1mg+9mtYfOMu7v0x/X3TKDtUrPxHtzLN2GD+R5cOYHc+f
g/vG2THvqueN/qcfSHD43q/e3yT0dsINk8zfj/nkvM38wGrnC3J1mNd/PJNg
focvDufvG/snutg7/32g856uA4ffp+zXz+g8v4d9cOHDmr9q/6u2m/+l94NF
zqEdz8m81HXkcfD4T1yyyeYLvIVvgo8ibz7zAsy5HNav7vFxwtfs/uig6N+h
v+86f1Dhc8A8Rz88Rz/IT9ipgTmXtd3AMnqZsI63PTxA9OOfHrXL+ZF2i928
xofYva0iP21M+Uoz/3b8XZdH/rIn+t3fnOK9lc9I+jpg+C1ZzyH9ol/0NpOL
xE71eMoTj12C+YK/QW5DjkNORW6V95wQ6efU3dZ/dn7U5CmZn9O3lHycDnZX
H6eDXdbHWRfJpcDQjSxP+9JiOhLGseyZKfLcsK+1VJFrfdxYlge5Pcm50AXo
BHQBOsH5g507y0NcgwPe7Xxc83H8pf9w0ZNcfofKQ2//9zA7hzg38e/lXM3j
iertfM3jceoLn4N+wM8zn9J85lSbbwEPnloYZwqM3ITfOvPHOcp8AWd2+pV7
DO/ZB+A9+4Dxcl7TT9F7sn5r7yEPJHpA4mSA5fy4aWXUfz0t9tPLlg4xfim7
/6V1WJnvRl7FnxyY+JcsH15Pyo8nv7+Q7kvI4lNXdhj/lOXnXlqv+ou25H8H
PYYOoE/G3wd5AToEDP8m5TFbjD5xrrEPgIlLxG6FPzL7Gtjny8a+Jp+xKvHx
wJxX9Mt7fL+cZ/QLvtIP9AKY99K+6L3AtOM91Be9Bz6VfY3cUCRXoG8ljxb+
38DC785YH/3Z7rR8q56vBwYv4fOJC8G/oYivB4bvK+LTs7ya84eZXIwfZZYP
uAYjJ8O/YjcFRq+t+2qw8blFz9GO53zcLTBygpcLoCfsG+QpoWsLUl4y4Dx+
on9Z/YV2VDL/0bqUn575KuKr0b8Q94K+BdjuEYzfQ9wwfo25/vclywsHrP4a
m6J/yvoS+vgsT9YhKf4COPjf3vSO5irnLXElPs6E/Qc/Snv4T/w9mUfmjXlk
3phHzg/oaBHfAsz3kycLu9ps3Uc2H8DMS9G8MU/Mm48rA87u1Wl3eUnWdpre
mu9kHjhXgZUv3lXJ86T1jfuEP0aveL3yhxUfxwYMPUaugI9GDsffA5jnZb5P
j/qwJ7uNH4MfZv2BOXeyvCa1cwc+CvzO720aZPyxrv8g4y+K5Fpg9gfnO/uf
vITAyOG0y+O2d5sdjXriLHhfHnfRN64S2OtZea6oX/xlkKN8nDfjgr8Gzu8r
G53nW+0ZFenfQIMZN+14jnbYA71fis+rgP8LciAw5x92Uuz82AWBsQuir/R+
Idg9gbEnqr7y4Qr+p5xHwJxfgjc/c35dt7h80Lek9oIPf0zt0d9neURnpThg
2SeHJP09evLMrjFvb/OfAC+K4m7BE/YBJe1Yb/T04Adwfl9GioP0enhg+NMs
P8zMdJ7j/8R+Ic60KA4VPjq736895pluTfdeZn6xS1K8QcbXvg7fC1/L7/Av
fEfRvRrA6MH9PRtZXFB7yrcDnNmtq8m/sLedff6cRvt+5HP45CI+mngu+EzR
5xyT/OWA4Tul+6WJ/5XfL07+tvCZtEP+op3vh5Ln4Ofx7wdGX5vlxa7xMfBF
6PvgO+CjPF/FPDFvfH/mRzMv3S9bVA/M/cLwa1nee+IaJ6U4hhz/m8u53rbJ
8BzY20lVL7tPme+A/+A8Bc7ioKdvs/he9C6ZPWllshvK80uS3ZDzSud3guX3
gw9Bf8o40Q8zTvwl4d+IM+D89XoO+DP0gT6PDfrOTJ9EHty5SW+Ryc/7Jb0G
MHyI7KPFyX6O/It+hfcD8/3kh+E9yJnQG/yQ87zKO/roQeB3s/O4J8VPA/t8
1fwOzO/gU56/YbfhPXjlz3niEjhHydMHP8Hv2Gl9HDRw0T0ywPghkWcn83+q
8bfcr0acQx7vt8X0Icwz60V8Xxavsny46TeQ74DRf2BX4DzJ8m2V+94TSXwa
+bmL2gFL93WrDyXukvvfsV9i3wQmDszHqQIjZyOHIyd5Og7s6biP+waGLoEP
4BHyP/wzcOY/Mn2k2Vmgf+S9Zd2AGXd2/9K3XzR9AfKt7LtVSd6FzheNA5hx
MC78g9Cfcu7x/UV0E5g4CeQz5DJg8E33YcI/4p+xl6see3jZ80XIF8if+J2z
v1kXf68RcH4/yJhyrn+amMvDN03sI4cAQ38yfrvGRyJfeT8N6AH9IA/k+ZR2
VzzfDwy/n9+LuC3XQ69Kemn0n54vhw+Hf4c/Vfk/8avwr5yDPk8L9hv8KuDL
szz8NX4POQe+FP0WfCj6LWB/rxz4wfcCZ3HL56Z96/exv7eP/S/d99IXAmd8
WO08oJ59DpzxI9Ut5l9E3mv0O9jrgeF/4Ltyf+zE39A/cgn3Q8A35PcZTjR+
F7i3vSzgF36uwNz/w77x/BrnHecbcZ/Yo3M5LN3rB1+Q51vaaXx9ft/s0DL0
HXrv82TgFw0dRN/COPN4tyaTq/P7MppdHvomey67X6ZupPFVmf8H9/W0p/uE
4MPAR+hlRl9mJXqmerjhffIs5PruiXYvQ28/q+TPFvU6i1I8J/PIfvD3VEAn
M/+SsstPWU7yHP6y7N8sL2mvvASZfrDPPZpN5p8DzL6innWgPuff0zrC72X5
WWv8G3w0MPsc/Qj8MPMNnOfzTXkjgHkeORK9O/sSfEYeAAb/2cd53unm3J+s
boDt46J9C5zphWaMMf9r+vFxncD0g90iz0s2xM5T7IbgDfsEmHFDn5k//EbZ
P73vnw74m9nLa3B+P+tE2yf0z7jAd/hY5pVzN7tnrQZ7Phu/1vw+nwn2Pr6X
ecntpEPML9bnK6I/3gfMeoBHeT7FlCeM+YBPyPmUCS6PVXoemH1I/6wDMO9H
rsjvQU/tsbMFur73B9RfYsoHBln+0cCfbP9uvchtH7lol/hDDV/eLPTrlpFT
jJ6pn/wwK6kn7ow4tMw+Pnq38Aetb9pu9gD4FL4fv57cb26T+eEKfkzYbHpC
Suq9H63Ez94b42fndZp8xHux/6qe8l8V4n6IA+JeKqHzPdG++3LSa0mcwce3
lXrfo1Rt3WZyV5Y3u8bnS/zMbI2fmbFB9ZHtzTuMrwly813LRtu5EL7jgCNa
ZJ4PfGqKnEPfmqr3C/z8A6OiX+I4iRf58DmD9N7LDVOj/rJF4GevV31T14gh
Qqe/1DikHNxGZ6zN24Xnwnp/+ofqH/6lV/GX7+sHCSzxuOdssXwWlNRj30R+
IW85ecwDnTlunyFllfum9fFbxA8Rv0T8BvEjlH1YiXg9e5icJz+4p7/sg3/v
O0z0rMO7tf3RXxlQDuzGoF11Mg+PvavJ9FrwRZTebhn8+V/4puYPXDm5v/LF
2+N98d+I+rZSl5XU46eIvivs14Oe0nijg2rrGvBlzRj1I/r4+dHuv3ii6YUC
Hsz+8gChMwceNkLWY+LpqsfY9aOJZs/GD2xbbTpKV+/sY4eDbwn9/3hhs+kv
iFsMcXl7j2gyvRF+R94vMDz//ZNHaFz4ogHGx0h+ntMaq3eG5795X2l8eO7I
DRX2AfuCewZk/81X/dLSY1V+WdmS9E3oK3rbGx/ot6uEfpQ4Yr6T7+Y7+W55
T0/Ms3FZ8kPDLw0/Kfym8rxyT1vcDHE0cl58K+pdFr4o+PuvNs17fdP39yo/
LHT4gWgXeUrtjc91mn2ROJcs7uWKTRYnk+lLqh1yPh+yLvENnJdhXTa8kXs7
k/0QuR9+FbkJ/xDoEHE82b06r+PHiP0QOib5E2bFfMM1OZPzLNCRBx8aXF0n
8HUl4pqIUyJuKcvj3it+nnqRJ2d0q92itUvpyLBov3xXtF/OS/lmRJ468mHN
0/WGl1WOmP1Kn/wzPt6HevhdqZ+b9FNZHqDWFH9MfBL5O8gTgzwgdOls1V+8
+TMxf9mz8Xu/mUrq8SPO7pue16J8x7YpGn81Z1sF+wd5IMgLwe/wE9+Qdbq5
InT3u8/JfSrL/r3b4viCXvmVZ1I+EN7De3mP7xdY/AN/qvb6Hd9IecjIq0FJ
fXhu+oc1n/WqP3aWZN9c85rg9Zz1XZZPQ/jNT3RaST3neJZ3uUYXc3m4yfhe
8paQxyTQ7b/tW2d2a/y0fN4iYOyhPh9A4MfurPUT3v+uARpn8/xtKR+Aj2el
fq7g2Z9K14XXjHhR8y13vVDpDO2WrbA4VvAM/YzGV6+2knrsnbJf/hTzJ74z
+kMf1W0l9bTjOfhmvkvycvyhQ+OYlz4v9c/9OcWni1/r9xR+81djPuHRKR4b
fSFxsPRDv8QzI8fLuXPL2BjfFOWTVWr/r3buMX8W4YM64rqePUnlnXKTyCfP
3ZriK/HHlXLNKGk39s31ys9eMVzK9fXqnzd2Z3MZP070rIHenRzzhlx1ZTwn
Do526Kc7lU9dl85jSupDeclDE4XP+Op5jVZST54i8hZhV0YugG8O3/mW0jCJ
Y79pQzyXvr9J5vfqvdRvquWMFA9G/ICMp22w2o8OiXkgZjWoHNca9SDHJPvP
OSr+SNz50qfWaD6nnmgPXdJkfB364fDeeddrvuRZt7r4kVc2WZ6X3nlfnl4R
7fXv2FyCb8BPSub36t2qR75oaynki7rxDU0WPxC+6/en9xd96vTmvVQeO6ZV
9+Oq+ir+/PjrS39vi/LAti0l8Ao847v4zt7+7AGP8HtBr0xJPf7f0MWAZw+/
Uid5p5Zt3VYijwp5VcAz8I5x8x2h3FHj/wK/PuKryf8YvAzPH/hQ8hcO/pnz
PrPL/HjD95915ETJ3/fpCxqFDu06W/mhhZOnliUOZk28b2tXlL9WxTjIJXsM
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
BP4xH+xT1ov5zPTiNXrJ+mf0xu5dw195dx4vV4N5H/PHfHm7bdG85fOUzl/O
P/CC+cn0Kq3p+/hef0+Hv6ci12+22TjQVzFO1ovxADPf9E9/ve+Xar+yR+9F
GLdF6c9ozffefkHMX1gre9dfNU/zVEzcUG96Bfwagj/dvl/TfFLz727TfA4X
6D0g/V9uE7pw1vnRDn72sHKm92zeLefZjGtUHlo6RvObh37ol37oV/WFbWXy
J1FSH77/2QPVb+2pm9v0fft0lUKevplzO62kPuOn/hrjC/aL501/1b+GOEHO
A/Gf+eoGuzfJ55EhjyP8XfiOx0/U+wlvbhsj+oVvnZnyJITvunZif9Onck4M
Da+beZvIAe3f0HEufLY7x88l241+yvjHJTonv/8s6avkOy/qLmV6ocYxlndQ
4mNv1Hz3fzhe7zOof7Cf5NE7oVvXYc36vcvk5fhn7TW3Xz9A8/teG/fdxVvF
f/feEf3Nnk2eDfzbwzn3qxf0nJ3+wGizm2DvCuv235+K+bLeNqzc+7656/43
3pfwns2W95h9LnmL3qrxSB+/s0HOg8FbNa/KYz/T/NcH39Ug/F/7Wo3PXnxA
q8V1EucZ8PXhtZpf/isvtJrcjf9ztq9bm9SO+P5+Oq79tgu9GPz2IeIn89nP
9VP8e97599b4Y5Fj90v+vbSTvOX7bNA8LL++V8/Jazbl63xF8itGDpF5OCK1
4zna8Rz2PuS7LN5jdZfV04562uk8xPs2z433D107row9S/FJ9Y2nvWmQzMON
/6X5Ef78g3ECP37QIMGjX5w/TvNzXr7G/JHIqxTCCK48aFCVex+4ByLopaof
SnFrYT33/bDG+z7dNbKM/lXoyZndVlIv8X9H7RJ6eMQI9adtPFLjyA4ZNtDi
OYmjx+8E/1noKP6x6Gdkn75b77ENJfXopcnz1NsvvPVTqaR+hezrmM+/tg7E
aQq9fn9nJeDrD96r++eB742Sed1ygo77mN+M0vzyy9M9E5TU408mdtNvdVXY
X9xTIOs8K87XtK4S/fKesP7Xf77B/N6494B7EJ6qladdpvLtsLkTjW+WPGaj
9uj9kZfG+6NObRa/mS3f0/uUpn4p5X3DPhL2/Y/eq/e/NkY92do3NwndOPqt
k1Tf+t1t6jc7Uu1j93yyyegKfqPyPfOSHIEcSr33Q6VdoIfXHLRH4v8OXD9Q
83utQo91b0nkz4fVPnvd19Q+3nLjZMGT35zcXCbulThYOT8a11ea5fmq2Wsz
v6QvR//YU7tL2FW4d4d62oXhnPFNjRt+/ICWKnHCxA2H+b/+hGbBl9d+MVno
+dMLoj1v0t5lynAu3X615rU/cpL6gZ/x47ay5KkY02NxiyJ3/SHKn1u6TI8m
45kax/XCZtN30K73c+0nqR2kdeGWEvPAvAS8+NeqlmoY58yPq7/+259uqQY3
tGvnTS1jfyXeU95zb9S7fLErt/O951GVO1552e7XDvNy+7H7SD6s+7sb5Rz+
7X77yPdf/YL6u77tKj0ff/Du0eWQF6l5xY5KFr+4LunBZX4+tVn1/Psney5+
M5l99/au16+fulXn50TlP3f9qUHkgSv+qnzHkdc0lEO+98Ov22P55eHrhL59
UvN9zlm7VfSFj729v8qjazRv4Y1PF8cZE4dPXD5x98ThB7rQcl5/4ffHztvL
9BWyfgviOi5I97tcpHhSwX8y4MPsuzbL9z0wsFvo+Kyr0j0ntXO4fWOH6sHO
Oq+lGvxjxn9nsMl79CP06g/pOfoROamc7j/huawf+MRafaAXQ38U6XaN3yav
ub/nBjjsm//3VdWjX97cUKWknntVuGdFxntLzE+4rEvndXO6jyNUz7pO4zHa
79N4jFW3apzEwoeifuWBiRb3TEl90Gd9/qDBdp8F+YbJ30qeF/K+kI/U223w
Vwj0rXLybtNDMA7GFfbBm9r20fuqftVo7yFvLPliyGMf9s/dT43XvIDDBleD
HqPtt7vEnrDspwNFbz1q9ySJC//toOaq5N37Rcxf8MDuEn6dgU//zpwGy0uM
fi+898UjdRyb/1hX5d4D7kGQfTRxs+U3CXjw16YWyweO30dY3yc2Rv/5RfEe
pjVdwr/+9l7NT9tyiOYv/XtPyusseQ02pnzV8vz/bNfxX91j+eYlj8OIZrWn
XxH17y2b5T6Ev29Xe987z4v2vu/GuJZ5SW5mnYOc+rbTppTDuTprUov4WTx7
b8p7IPz2F1M+Xc0j0ar4s6G+erDIXX/U/LbfWFsBH2Tf/lv9m2d9do++d8Bg
9V9+w1jF/7sbhE/+zmTN27v97BbDA/CC/BY+bxB5qkM/J/8o5WslH6vMxzmb
S9yzwr0rql8aJfjxg1MHVimp/35Y3xH3VO4M/TX+u4I/FfyZ+L/PeaxyrvA1
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
zYl36nnqW7U9vnN/zefp6enprq566gm/5/d83FPy5/c+XxgjXgLvWgif+XG5
6+uGzHn8juOpfqd5g01BvtzYy5aHx8tS97JpU6Ab8vQIeiXEqxwN65noQQXh
eE5Cz5h5umJUWlT2/0t/cXw/Zp63W1zoeBF1/mi+YtRd9Zo36Gn7RXxVETHi
8zb+esKbhTGDTxhRY+MvJS3l/f1jbZ6rw/+TYal+Q+PX0x8Ox7NbPVTg+ImI
zyBz3+b8FkdqfrplP92fXvxa89vdKtrIfexM2NNGHvJwx2gqPYksca8f6O+u
9Vvj1th9uFOtw7+bcUl/Rd//zl8qNb66uCpI5smWfsozdd5+d7TPu5KHJb6q
9nhGNNnvkee+0fbfO9v7QaLPR9g8xYP+e2Ti60a/PDRJ/aazxtWl1JPI6En0
Jvyrcv93Z7h+EMwf8lbML8GTZdU7vnfykMRv0SvoGWP3TLl4t+ORpE8AfbXg
U9f8q/aHv3u85tuXj2jn6oJZ96n6CCE3r8s2ddqiDx6xef6Cyojkib7+QfNF
Xy8PiKsSZwVHAK4A/1XXR2uxb8ou9LK5/i8jdb87qaG1qyOgrkDwZn//PuAT
XsdknEJIPtLmS77wuAVwDOBkwHeF+hwlZINX+OIXlavbtFX+jfVqR07u2Nb2
j7XxpOGNzq4PyQ2W3/ayRuEvmHyWz8cjm/E++SUrT++tvCGri6QOLGOQ1n+9
V/9Hu0LzaTlR+NmxM8zzjdrV6PYh9iX2IfYl9iH2peR90szL8V9pPv/jW8P7
pNk3zf9uPbBJ6nSWRutcXBB+mFBeJ2H3Ue+BrPVx1S4uR1xIHrNM40d9H/E4
BnAL9OtCBtfAfRt75OuCghg4g1Q4BB3PJF7Z4vYujmDm5WuZ7WU8Vv4z253H
7ziP33Eev6PPZqg/242e74P6omSZPAH4fa4DnkDtJB9XQeZ7cHV8jwyveDLu
AVn0XYXNV2VVRJJxD+a9Temj8c36SI7DJRB/A5dAnJI6nVDf6FE2P17fSdbb
O6+r3Xj07k5/6KsAriEZx4BM3J8+U8k80cjU1Wg+dovW65V9bq/7m5P5Hl5/
idOU/hbcJuP4mcufahxwTQT/LFUfYfoEmHjqrwdkxNivUvUJIk5HXpp9Av+R
fSRc/1zt+DHlPR5e7epokvsi4aeQF6GuhToX6p6J3yEzj+R+zlV7pfG0whjx
F/D6/K/YkQMzXd6cOAd1zfj/xLvguZZxKbb94aK/RvADQvx1if1DeVx8nQCy
5hF9/3lk8BuKI7XyRt+fPvk8ZP4PXAX1Oponbx2Fjxt+XeUv2qR4min6XN2O
2iR68JSfdgeh/pcrqx2eAVn0cFdbf/2l7fc4xfdnJH4DPw4y+Aqt8/Hfo/eo
a+KT46G+A/QDm+v5lkN5oGLfdxLZzPOjdip+7/n+7V0+jn2EPENyngyZPBl5
M+pg6LM00Bz/6XvlG0jbEZAPI38mdTs3KN9H6wqfD9M467d6HzN9X1uZTy9k
qB89oF7yVa2eVRzok8NsPU+zPiHkDVPlFXk/xNe0Hsz2V7g9I0r9A/odGf0O
HtrosTv+VhgVdRbr5b6Xj5k+PoNMPIZ8WHKfJepiRO8V2z4Y6yy/76gim3ft
7fxK/Ez8SvxM7FJ4bGV/qNrr8ibI4JM4j9+lOg8Z/Q6OjTgz/hQycWjizsSh
sSNS2Rkh3mH6PG/tGMW+5TjncZzzeA/0ieI9psrzJOPE0C+Kr6txsrnfgy+s
CeA/p68pOCZkwYWfoM817FPPp0/dUKo+t8jsjyGe32G+j2nzugUjh+rW4EUe
VhtgB8AjBM8Z64W4gfBL/a2LXDd+fZ6Lx6P/iV+j/+E3Qg71g1+SOm6NjP5K
josjExcnTk49JX0i4T2irpbn5jo8d/I40K+B+i79vsLJ9NtKdRzZ+MH3VVVo
PUP1HlcHCe6fvnvIoXqROT2cfYhs5un8hTbvNsPjc0L5XpuXMHqA+kz6Aaof
bfnOl8fFn9u5/26ZlyXtKgJ4xcGh0AcY/hHZN1Z6fYWMvpL7+dLySecX2f6R
9L/d6/QHMn2PqVdEDvUBvtbKNRUpzwvJNf53qfpMI9Nnmr7TvIdU78nEb/Jb
Wj6q7XVqX99p7ep94k6mz5Dcxy32fo6MpzwPmfP4Hf4u/DXi13aqsnFsL4Nv
gkeC9YpMXLA5jtngf0L9KROyzL9ym8+YV+ziZNgFrA/8VOoUQnyDCZn6OZFv
svIjVRHqsOiToPjKDeG+CTs3BNQdUT8a4mWe1DFl3pi8OjzL2pfS9rcBvze6
0u1v8GVp/NHy1r1q7bN3ayJch+tyneTrSv41sLiMg1L3waWOhroa9kHyqzIe
Jbs0X79kXWS8+Xx6l+Z9p67T+H//Xg6/KfbGIM9ThazjURjjPH6X6jzkwbqe
AvpACI9GL60fqzqzPEKclTjsdGNo9HtB465rNwXU3+D3UEeT3AcWPLHYiR97
/C4y803srQ8Vn7Tu2QLXBy7E+zuzQ5S4CDLzkz5B7PvI8B+nOo4Mr4PElXb7
vvbIMn/uiGu+aVtFJNyv7Xf3HnmvvEfeK+uU/gvE7cAjwP9PXwDqbJL7KoK7
xF4gny7vsaPF6x5bEUnGBYj/N9DzoyXjkDWuVKd6+0arZy6y/WXutf3H03y/
YuJqqeJuMg/HenwQeCTiZcjghVhf4FhlnlzrcbjI2P/Mb7nOAb2cPUSdWaq8
DzL1xOx/6nd2cPsfMnwj1F/DJwJ/CLLWz64J3pJxXRykwtUgJ/eVRmbeyft8
yOaDr4tHPpAbnmDjFhsD4hnK5/3fCPr0A/njCQFxFWT8a+qIwVUhUx8Lrw3r
DrwE604+Vyatu5UdnP1FHT5+LjJ8legHZPSDzm9fhyd1yGcud3XJqfoAIuM3
J/cFTK6ToI4h+XfkK8lXI1NPEYpLlRQ4PY9MfpV8Dfs//FnyPg+0+bKrLQ7x
cC9jh1Cfkdz3Ghw+9RLwkOB3YNeCU8SuRVZ9X6tx9oOaXB0V9yf2xUdVzj5B
5n+I9zBPwDElx32QifsQB8JeT46DICfHQZCJg6Af1P9tFe5Hk5BDdRF9fJ/G
5L6N1HmEeHj7V7v4KPWP9LGDl4M8hNjN2y2/1chKl69EJr9JX63kuBIycSXi
TNhR6D/qxZWvz8vJ/buR0ePgxrkeMvUr1Isk15moP77d1aPDx4Is911l66Fv
L3f9NfCLqM9QHt0KF++kD7iM2ym2rn2wl6m/Su4DTjxS/Rcv488RVwLHJc83
a3vwpozH9/red20P3hIz5nuXV0PfyvxOt+/vAS/L/T1q+VOW2/5gK329JrKo
1fY2n7fB132Cg0/GxXO+6JXaEtW7r/j8JTL7sozf6+naV+dWzWcavhXOR+Z8
WZf/9ufTVz5V33l4hPBDqadJ7vtIvQ19QuDbSNUHHpn8GX4bcdFUcdPm8c2J
z9UF2Ov4keBxWI/UubBekvvQUreX3IeWuj7sAeIE2A8hPEVCJr8EjyL2GTL2
GHUc1Hmgd6gXEx7b/pYfI+1H55/SFwa/nX4c9NlBVj6YZa7uG5n9UT6XLLN8
7aucf0+8JrnPIjJ1JSGedOoXJ3qcgO4TtY4/FPuKOLHGZ2yf9iqNOyy5pkJ5
yzbsjlCfQpwBmfsI9W1KXJ84F/uprIeONu5Vn+/2A/YP9K3yc26yeXfbJ2/6
xnDfvITMefyO46l+h77md8TNU8XVqQsmvyN+V4aXicsjk2+jfoa6AGTGmXmZ
6j0hM468N+K4Ibu4pKXLdyFjZ5G/o64zxNtX5dcRMvVhuh93jsILTV4Lmf1W
9YrlITytOjJKeI3ecvwtpTKO79i+AxuCrRIneNfx4y2S8+doHGGWl/m9LKtn
fV4iOU9B/gG/RubTYNu/rsLWY0e2WT6bb90+LON/AHaH9zOQ0Suan7J190ut
noGPNzHPwfOB4wf3Cf4VWfPvlY4vie/pF02dRGh/GuvnjeYD2rj3iF+OPYYM
H508z34to+QViC/SL5F4IvfNc6S67+Tn4jlC/QQS9il95NU+aHJ4B2TiwMwX
xpE8K/F6ZPiQwTHg77OPEA8I4S9meT4A5kVz/jKTpwrlx5f7+hTqRzT/8Vu4
nmTuVlfHRV6Lvkmh9be8OGXcTvHWvi8JMvE+nc/dXH1VqvOQOY/fJdfNIVP/
RBwMfCf+PfFo/HnmC34/5yX7/cRV1O/1dgGyCRP+8EiRxhGaejlcGLzbyMSf
Qv2ix/o4h+i9ezpGyeMwT8jjME/ICxKf+UnmtfYHKxvUJar7ga+rSa6zod81
OBj4dZlX7BPy2tf5uBcy/hvzk/sgboR/DX8QcTvieMrr698rMnmjVMeRwR1h
XyFjxxE3VfuTfcjqz2g7Z2cg4w8T7yPvhkz8W657b4W7Hv14Q3UFL7WNgg8j
Hi7yJVZ/fu5l8Pz4C/i5yPSlU3+q3vL+Wf63WYVR8GnI4OGTeRsUZ2P1+MeV
EfAp8BUi48djl4fia6M9flvm/w22n8NX8QjrjTya7k8+nhyKM45eFwHfAB8T
egs5mddFxvfW7pZPJ9/hsfheefv99/L8l1t8w+k2r3O5x0ez7liHomeu8usQ
3Al4WnDGkt/a7HkKkLFHiBeBd8CvBHeDTHxWxrWywvEqMN7UGxKvDPFqJfS8
xFmn2v44hW11XQ73eou8NPNnpc4rh3cDP4YfgAy+DH8JfmL8JWRdn17/U3+r
45fu+qAT9yBulyquF+LTTNjR4OzIDyPDt4tfGOpTnJhP4HVCfVtGw+va2cUB
kUPx9tHZ7nepzkPG7iYecqjc968uTpIcN2GeMI/ox4ws8/57z0eH/iF/Sd6f
dY5MPpP+m8jkZfGXeZ/ESXgv8IGBd9K8XBK+KVbi/Ebiq6E4dKxDNFXfaWT6
XcBvQByI90acHJn+FcrXnelwMdgDxBmxB5g/yOwX+MfsZ6niovht7AMaT/X+
Mf6w4u9WOf+XPDY8Bvir6F/wIMQFLld/wsnw/LCP4m/AA8c+jUy8j/sC/4nM
+pX3PsfW/R/SPko9wn3y+/m2rvhXJ98v7+NX5Tub+5HzK3W9bwz34XipNoId
jp2O/6PjtMHhpXQfaBuO1w9u6/gF0HP4M/DxwUsBrhGeHGT1n+YH8M7eLp+B
5m1LfJ9DZPA22M/wFWIfU1+NvYtfBE96yP5phpNCJm5CHIW4SXIchXhu6LkT
/4+MPiQ/xTiRF1Z95/FNIbzTZI9HYt6g95NxEdg9yXkUZOZvKN61vMb5f8gh
3rPp/nv1s7C/vMz5xHtD/db/H7sHmfga/FPI3Ad1t1r/V+LqAMm70d+PfAUy
9orGd1tFqe8I1QPNLHd9LeR53vZyqJ6oqu4PuD9kcH/gANG7Ib94pY/LoneR
m/OCGL1G/BG7DRm7mfsh7o7MuJOnJE5Pn1zyieQbkcknwlesvLur/5A/DPUH
L7b20/493T5E3An8UHM85+gpnp8O3mXi3+QXsZvQB9hVoT73S+pcHxNk8v/Y
Z+Tv4GkE/5ast5GT5x1+Lvm5EL5rSGvLc+Pzc+TvkNmH0DPgMtiHyL+Bt0Em
/4U9RP6YuDX5NfJvyfk24gX0DyS/Jvb81Cr9n3EV4fV4Z0WYb35yg+tTA84a
+wk5mUdgkbxfn1+Dh47rks/BzpS4/ZDtLn+j/Og2j3WexUlHfX6GfAr5Ffxz
8iXYS+hB+LdY3+SHkMXP2bzH1a9i74DzaN5fxMQZsQuRmR/Yo+QPkUN53PyS
KHgqcHrI8I0TLyWfCg8ccRL9XZPDbVBPhXyr7ocO78q+n8ouoO8I8Xp43JHh
Ade+Jatc/QB1B8jEjbAPiH8SH0WGj1fe6xlt/4CLID6Jfxfi957Yws0j6oKx
15GJC1EXDL8K8S/2f8UPbQ2Scc/IEhefbPfPNB/fwu5s3lfHzAP+j/gzMvFn
6pax8+WyaX2ioXqkrR6XIrdpeQ7MfIQ/AtwHMjz+8Gs054s0dmYIf5+wh5Jx
p+Aj2b9D/sIsXzeNnkNGz1F3z/7LuIT6gdIv9HYvg+uFh438leJgPL6IfknI
+OPEP/hf4iPgyZCT7RJknpv8uOKs/mi3U5cBHoRxwZ5AZtxY96n0AvqUdU28
mH2OPIna+15m30uOS4heWZ/Ed17l86v0ow753XO8340/SF4HGbsFOwJ9xP0y
TuybyPgj8pydvD/SQW5srrW7vf+BvQ2OOFT/kbDHWT8avygN50XgY0rYz9SD
KS9jucO1goNGTv4f5FC9RFZvpwdCePeXPM4Wnn3F/fr6cewZZMaT9YMdw/yh
Lgs5xBc6KsPlbbAj0JPYEeTdkMFPEH+D9xYZ3ltwgcnrmvVMnR8ycTJ4vOnP
ILw6fVa6/gxSj7vay8S74EFExl4F30c/M7n9fn781e/p7vQvMvshvAPYw9h3
xP9CflJiPcNbzr7M+OOPgbPFPwrxYiVk/EvsH/YjZHCG2A/oNeInxFeQyYfz
O/LOod+N8zJ4B+IR2FHI4M3Jz4Njxl8XfvvVM5wsfEpzZ7p8Js+Hv4ZMHQV5
A437UO+Q6/onh+ovE+sV/DR2I/kH9CAy48i+wfnkG0K4PnCqLm8Wd7gFZHAK
xKfAA8HLFcZjexm8G/4heQby3MwrZPYRGa8pex0ujXwF9nkof9HP6w/sP+r+
ySeoH+Jl+tCgB6j3Ja7VnB/I9XeeUhDFriWezzqHhw6ZfQx9BR9AqD7xdi+z
jvC/iW+G/C/HZ9HSxXmQ2e/QH/BBs58n+/Xs9+h/8I/N+08b/xqZvHMoz0cc
Z7jXL8jYZcQtsBewD9Q/rZF+46ZuHDwP+xRxS2Ti1uzHyPJ/6/z+S90Z+KUQ
HqTPdlcvSX6QuABxh1CcILE+0SchHGJCf4TivAkZfcf+AH4khBsv2+jiQqyb
EC9+SZ3D5ZCvpO6JeRmqg+pDviDN9clInhfIIX4lh4OMh/pYmPVAnoP6kxAP
c0IPpLoPZPLc5C9DfOO3W/2w1OPC2P/h10LGPoBfmvXLc/Bc2LvMX2TmK/Yu
eHbmGfkS/Av8JuYdcjivAT9vZzcfkHn/YfznVlevTpwTnABymKdylZsv8IXQ
X5RxpX4fvFqonj9xf8Rnsa/hO1TeCDuuPcodrzcy71f07gH+/JC9Bn6lzMvs
K+wzqfYV5BCPdOJ9yM+m93bjjj5Axq5Hn+CfI6O/0T+sP9Y7+gCZ/YZ9PmTX
JPY34sHEE5hPrHf4YlgHvB/yTpxHfjvUD2Kij1MjE69lPbL+QvvX6EqXF2Lc
U70X/AzeP/gB1jf2NesJOcQnNjzu/Dr2ET41bvGdk+GJwT7luVmPPCf7Sahf
0PRMN595r8joFZ4H/4/19I3axUlxiFWOH4T3gL5lvNiHWT9cHz2Kf8M4sB5C
PPlV+Lte5v1hX+CvsM/gx4TioqyjtFr3fuQj1svFeYmbIMOzjD+BPgz1N0nI
PB/7APkO1qc8707Wa/s/8KugT9jfmE/g7tFP5GWQ8ZdC+a8ofej9/A3N58Tz
YycxXsi8N/ZF5FDdXz8/X5PtXvbvcB1Jezc/eV5k9mHsMuYz8xOZ+cl8Zn7y
Xrlf7o/4N/l7zmde8Nyp5gUy9xvifRrdzsnN+wca/cT1QnVgZX5ecj2eB33H
7/l/9Dz6KoQnBhcyV/27JYdXO/yE9EW7S/2c9gVZDp9i8tC3pRcILrG8XXux
T6r/le0+OW78ytNHaJ5/2bU9hW/vprtUvuWpnqrfTrD5hUzlM//r2lLxX8cc
l+c+OW7W/62lHs9nwrMt3tV44uaMzlH0W7F5rFdWBvR5xg4143XRwR3k98+0
U7zXu2vy5H1mP6p5iFYPaF75urY5Tl8JP832xcqz9oLHw/M//K+M90MV7j3h
/9AHmj7Pwr+asH/N/a0fnSt64eXRncT+fjW3l/i/13xfKPbhnOmaFz1viOZF
+72l8eKFw9tK/KT/6riNZ+yKEHc29vW0bhkx9IDhJS9doX78hZOUZ+XCSdYf
+nKP62sj/duG+/52C833+60KzjL3ff3yAHtL+ol90ilKX2b6NJv3s3aL8nmc
UWHja0OUj/DBMuWzOfHNNiLfMDMrxifHQ/tjvNrlUWT/P/ZXsf//PVbt9rY9
SjQ+M1pxMEsuLDD85v27Pa15torEPMPOlPXyo8YNB7TKVv7KExojxPclftP2
Zx3HGzZp/mHbblfvbMZ18Oc2DhCvdnpQrtun0vmz5j2+P0vtixNLMmP0oQ3F
3dinV5RL/crSOzV+/eYlHeR9jn20wtUbwEMILyF9QegTIv0aX1T/c/5lJa5P
inl/ae0Ko8SVZH2dW+H6kNKX1OAKxu+rcft4hvJrvHlsrujbWwvUPppc1kpw
lpN/ypD+Qa8/rfjLZ1t2UXz7yVWqL3d43J3Mq/q46I0Z/dR/+fL2fIczNfxH
r/5WFOOT4/gX9E2W+92/2uXDJY4d7SF64eEjC+S9D3w5Q/RD+5Har9z0maDv
hBmXSyf5OjTyCdLXob3yPj67ReOR9/ZsHQ3Fu9dUSf3An9/upf0Le2leYuHL
veQ6Z3YqkjjAzG+073Hfs7Vep+m7rrJ+M89VvrQXtmXKdQd8r3krwxMqr7Vf
7yg8yPAim+f77mHlp3lvcKH2t7xkm/KvTCrXPPSDX7q6VvJVEoe8ZE1gPjrs
6CH/f29tQcyEt8rOU3v85+WK9318R5G8zz7zeut6y7Lz975qtQeu3BKQNxN/
pv+W4AVxA2IR0d8D0yWu8XZhodpbs+tc3tRcJ1roceHwpMKbap5rXP1e5TPc
r9Z9clzmZY9a5VnZtjci+bapX7u+ytRzw4MOzkTqBm9cGSEfaPbRiYdmR7lP
7lv6kb+j+2b508pbNXiKxuvnjaoJhHcjWuXyyPL712ydyJIeqkeG2DxxWZXr
O8hxM0/Oz1TesCFNvi8tfWrN8f1v6iJ9UUfcm6e84xsbxK694uEs5R1fqX13
r78zKxrqG/SXugi84fCIwztOfDKET96tuLKPsjQ+PH9KvvvkuFk3K2c2Ci9K
VnGd8KTc8IzmyfbPqQvk+lsrXB2hxom1z8rCO3tHbzJm0mZfD2vm/zNRxXdM
2JGp/ayOtf7NrmrJJ7/1UYGrczN6Y2CZxm1v7VPh+n2Z9T72xEaX5zHzZEh6
ndRT9F+m/EnL23UUPXLJ3kzZZ04YVRLF/pZ+FocUiZ/21Oe93LoH50ufaXjW
4V0X/FTbr9QfOvNnfe5Yjat7M/Ph4R1qV15TrXjBir3KT3Z5wi4BfyTvq7zC
fXJc+mzdFbfxpd/duDGO4BzE/joq7j45zjgyrjL/ulSp3u1fIfvPy0EX5bOc
pvmAY2JdRH91np7n8lpmftUl7tvs27WZGTFwrWZ+DZifJ/rz4vFpsVBc9m9q
zzz0iuJpnplRpfG5DtofweBAzXW2FSqua+SI1vLeykfq/W/9d4WzY6UP7INV
ihNr8nF46uGlzmjIywG8uPDk0neCPhRSn/C23W+CGlk3E25S/o+vv2xwfIX0
ydX+PLu0b+mqda6vLn12xc7NSpN9fumePJnPpVHl9x6dViT+7OLjNa96aGZR
jOOcx3HOA69t7uuun1QPTJzTXfnTNuWLXj5yvvJqm/yvWV+/T9L8wdvvaZ/z
bQ/b+q25nXSfTtg15nRj50j/tWMU5/nsiJyoyUvOP7QykPd/fXmkebyl+Lgc
7Xd15wqXpxL/u99vQZEk/hZHhPBxmeVtzv3VncfvzP29eEmu9Zs6Sf61pkrz
rbM/LxR/4NxB2q/+q5wM3d8GtBS9vywrQ/pu9ulg48gvaT3P6U9ovdtDr2j9
QdHoQse/qfEtu56+qJD6j/sf0fE55sNOss6vGG77emUVqD3S3dfVmf+9b5fy
xb8wpqvDBxv5pCcLtF/F92o3GJ5Bs983vNZB3lvt35Sn7CfLX/LLGTnyfnvu
mxsjTyP7+ViND63rbuM2L3leQ/pAkl8AN2qe++y5yudzT0vlObmuTuNso0s7
qf2WluuOcx7HOY98nbl+yTFpUYlHnvBrcLMYVDNcfnmKeb87X1E77e64q/cN
8Rlvsf0A+uvzHttJedl+eU/t2UHtM2Nch+uyjlhX8tydlH9s2F8ztL/wCMt/
cdtnjsceXnvZV/N7ybyfvLLQ9Smmb7EZJ9OnmL7F5FOlD/Fn3yku57wfLD7n
O9XX7eMOb815/I7z+F0oPlawyvVppn5XnucSW9d/f1UEXmJ4iuElhqdY9o2N
32lc7ZOVgRHvG9Nb9vtX/12k+JvBK9V+2XeHrMudY5QPseyoeokXn3+txk0+
Olr7Gt4xX/vFvXVre7Hbrp9m8f8Tu0XhXTDjtM+kDOUXr1Ae+EcO6eV48+HR
N+vlulKdT1cP6ODiQuJPxOxzzm3S9fN0jfJzn6/2xr59W0WFP2KmxbcN8n1x
6JMT4j+4W/nyLv/M4krH1YdxvH9Tf+yyEVpf3LCwXRRcuPSLers6wjgyrsS5
5H+21og99MMh2q/9z9+0jPY25nKt51cy6+3cB7NdXYbM34Gvq34751fhK1l8
f4bL05n7unN6g+zTr02vDehrQJ8DzuN3Zl95pFWOi0tJ/OCDbho/sH2uTZzO
rJ8vqlTPj5mZFW0ed8qfYfsPTG+j4zKlRudvrCli9uF3PvC4BvIxMp7TdD7u
7KY4qDErciQ/8uRKmy/M17jj+T/ofNivQOMfd3TUfMsZI7KFr/KNFb6+Ruyw
i/cKLu3dA3Jc3bbZb/fPy4zJaeuUpzT7PwWKX0zbqv2O+pbLfrv8q3Yyvy64
NFue87EOhWJ3TRzaU/vd3Fbv8q4SXzooHqk3sJaJlUEIb5/wU8Gvmf2/NjdN
/M8zDipycVQZt1Ed5L0fl/CjJV6RvzZ4wHzf5jNnx2HXmd9f+5DnKWbeMI/M
dYs/Ub6Gsa9rHPHJW339sdxPQt/LcxQ2aNzkQ2v/D6qMUNdr9MFjD2v90s+H
5DseYPpgi556usJ9ctzEQ6YMz3B13eK3vFbgeCCoHzF8Hws3WN7IaVWOl8as
z/7XbhN7Ov+xco13nm3X2821yh92kMXDjlOc9rU9MxzPj9zPtRYXNqJJ8y+l
OwJ4YuV4jo17PBGPSNy4ZJf4HQctiou/MPZqy0/2e3lE+r3fqf3YDv5F+7i/
foryTj1bWSL5v02ztA64JHH/5NHFH38+U+yBU8/Jdzyr9O2gjwe8RebziXM0
DmD61ob62B5Vrp8L9jgeT8OfvrNdldib07f9rvmHnLURPjlOHlT6+R2cIbiW
6a9VBcSHyRuYuEzZgkrlH+gRd/lr8xyN32g89vp52TH6qtJnVfan+atc/sXM
y6Ou0z4M288pFvtqY4btzzhA6+0GvpYpemD8oQ1itzw53tdN4C+Z+8ieUy/9
xz44pcDlS7HbsePNfHv8Qe0X2qdW8QQPzC+Q+MS+G3uI3OM09ZM3jal1vMDw
BMu8/Y/V949XuHow/AL5PsOu58lxmw9VHoJzvsoV/ZMzJU3q6C5Ns/WNAxQ3
OnqA6stuCTuSuhujh/51UpbLK2ldqK2TOKU6InGQSmvfvmX7FSz1fQgU59wg
8bgbplWLPzv5Kc/bJnUsmVuC4bLeP5H1seJbrUv/eLLyjG99Kz9GX0Hlt1N/
9+3eWTE+OW726yFZGiefc2N3Gc+6aHd5v1vey3efHBd/9D3Pm695q5qI8Q9X
32hxGE2W7+076mEVV3TbAXnOrzP/f23Cz6NvLn10Zf5n27zGA9Vqx0238/9P
v0T45LjqhTTp59V1dH1g9M71fbUee07nWlnfLTYqvrfwhs7qB6zz/dZlXX9i
+5OsqZF83fL3WosfsONo3x/d6P/cFzMlPrPoL3tlPc18TesbHmloJdedP1D9
/POOsvHER/JdfpC+aM37h9/3clOAnkRvir85eGewzNxe8KPO5+hOl88X/biu
UvoeR3+z8ftbLE7vpDrtJ3jXas1bLt8Z0L/b3O/SN2z/7ovsfvCW+uvTz/b9
stFD6CXpe9KjXnAq3//N62H0stG/Y5/73dZR/aJ8LXdVaN/19D1unBg39C56
2Lzv79fUyXo8fXtNgB5CL5HfN+ed9kSTzrM/WxxiVONfdx2ofceOXJCmcfxd
nkfHvPfxC7Se9pt7lcdmauD7G6Pn0ftmXpxYmCZ+V0au8iRvzUtzdYtm3Wd/
5nm/4Tkw83VipfI9rBuaLeti+S2NEaMff7+5t6yzK7cWyTrrcprylc97s42u
53d8f17Z3ypsHdB7Fe6T4/RBpC+iue+OJ2ofrW/OLBU85aBeja5PqNz28N5i
f3z7Q5HkTb7a4fus8slx7APp03ZIlvoDK5YrjiRzu+MHMHGtm6Z5PDL/K3Gq
czTeNvjCdPV3B9l468gascPnLrN9KV/bEqEfqNkHpkULNX6fm+t4WmU/e8r3
5zR9Tvuc4vtfch2ui52J3Sl6tZuNn+xSvbKk1veDRI+j183vIjfmyPt5Ot5B
453r65VPaqj2TzzydOUrvvzHQvfJcfmfg6t1nq6okHrGgsu0XrKyY0GUPkny
XldXih49p1Lx9gff0VXn+epG7ZezWv2OIa0yXR80+gyJnvwxHuG9Mw84j9/R
/8T8T+63nrfSfFZuVP0+r0p5OmYN2xvpbL5v8v2xuG+eI/Gc0y+YrfmseY/7
/lJm3h92cEGU5+I56eck8ZXjLH/Kg8q7Me6uOuGduL5Y+Xd/7JoW7WsCHDmv
qv9z8K+Bef+L3vf9h9g32UeNnXX3Jl9fyz7Kvmrss+g6zytqztvRkC16/5e4
8nYP6F8tfnnxz1Vyvzc+oH2GPzlM8x9mn2Pfo67X6JufJ2S7/ixGX+QMKpS+
AGcO8/1XxA+7y/dbYd9jHzTz7/1Zvv+J+JPHrtD98B8rA/hDzTzr0SLH8UHg
J0j+4+jfgqnmc8biCL/jOmLXPGb1yKlxiU+ffFuu9c87aX6yUeNjq5YWin74
vKSFxDtK+ihPyGH7povftd/KesErNTzm+41IHLyv4uxK51pe95VdxD5rt1Pw
lcO6nqX9QmpOLoyZcRryg/brOvuwTNUPJ9r4e5ONP3fZozyQvX4VPTJ7rO/n
oXV4WZqX6NMY6WzkR5dq/G/aarEH4oMzpU7gjc9aR7ku/yP3u4+un1kLlU9q
0M8WZ1fc2vHIm33r+7aZMfQ2etz8/+nvWd7gK9q7Ohn2BfO/j01QnsmTH85w
dUrCf9+tyPVnwG+Q/NEjX6id3fSz9sk9a0twi8zzWMS8l0fLfT8G+iRIPGSf
WvfJ8RdEP66PxAXWtiuQeMXfy4NC8/t7topeMX3e4W8grivx9zvytJ/XWs+/
j95DD+r4Kw/QqQ/nu0+OU6ckeeCCugDeELNOb47rePb7PCdGP12Oc54Zv4sW
qH4dfmiR6q27LP/PPr1lHrwet/HKrDaiDzdVKq6z9Mpqx29OvgE+c3OdzOnK
Z94rW/mqnni9OEpfYvoUs++wD2H34wfofu35tuHBNnZHm4yiGJ8cN37Ozv0r
HT82fgJ+gzl+7FZbFzG8q+OjNs//wBlhnun1jTnuk+PoSfSm6N1xlm96s60P
TfgN+BESN+z8g+JB7v/OfXKcvm30caPeQ+zkCRrPga/Z6FV4mMz9nvtuURR+
ZTPew46uj8j12y1XfX3vKvfJccnHXlKh8ZXOVQF8saKvEnoLPYBegO9T/IPR
tVrX3+T5OqWu4DbPH2j0c9cjPF8d+WT4ocz95v3H8yfJvHpLeZXeerTA8dNi
d5jjGedlR6l7k/VdpvbVns+KYuCEwA2BEzPzqMWjeTLf9+2m+Pigc0+1B54r
1+e91ebTnvX8zfQhMfd/SDzHfXKcvnDyN9N7O/4keAP45Lj5fatyreM8tdrj
dMDtSPx/puU77tpK43k7rX+3yOrpeI3jCQR3Aw7H2HH336J8padf3lrswoyE
34QfhZ+E32TG4x9bFNdUUGFx8v0trmKMxtembdL4QbC0ravzNPrqX8VFUeWt
/krj1TdtFbu3aoGuq5I76sW+GHJ8k+svZebZ02VN4re1nJwl6/aHtpmOL9jc
x4b3fL8R/DD8Mvww/DKZh/dbvqtCxYmVrKkV/bnpK4/rAecDbgccjxmXu0Zl
O5y52KfP7VE/aklFYHBRwyZWqz81pToyUNyhbzQ/sOenAFwNOBuzLtPOzZf4
497vukaJy5nnvOa1AsUDDrO8dyUNEXA94HyIyzWP0xkccz/zOXabxPVKlpVr
XuXi7ZHm9RLxdMUzvRUrlud5/rF0fZ/LyxUv8bXHFYEz4j3x3uhzRd8rcHTS
H2eTrd/apPnSBzckLEujgA5aonHANb8Fonf2Uz6WJWurI/j55v7+nfD7wX2I
H72iOsDPw+/Db/whIT+c8CNlHxtUodedsDsS4m+f+rV7D7wXc39f36v24QML
FMdleDNFLxTauv0bLH9Hkcc9gYNCT6G34JeRcftR8VvffdJRvn95RY7DQYGL
MnbKgZ9rf6mnryuUvNRfu+bI+hr3XHudjz3tezilQvE0fbdonfmcQPTN5es9
v6q5n1XT8sRumRZon5+ulv/t6MS+Ku/pROvPVFSKnbWzrNbhluHXEzvlxqoI
dhF2kplPQ57WeoZhf98Y4ZPj4Hy7mo8ndgfgosBLmPXUfojWtb5UWu3yVuSx
4K2g3socnrWjh+xP+y4qkPE9b6vlSe/T2tUrmn368pfz3SfH8fPx+yV+8muT
zNPo6bmS7xxyaHlwtjm9cKt778wD6rxlP9tcG4BDA5dGXN3MvxeHZ0j99Elt
8hwfqrGjP2mr/uo5GztHicsQp5H7Gup5TqiTE710aL3jS5X7uFn5U/uf0aDv
55ZqrZd6VvFYy9KLVV90qgnzmqfbeNH59e6T4xoPKJL1ecDXimeanlHv+E6Z
J6F587LN9/ZQ+/z0NzzvJ3Uc8I+a529/n9Zr3j+yjc7nz+26mlLhPjlOfaj4
p33T1W650fOTGr3w3U2aN/ukb0tXJyd2997MmOAvBy0MJP5x3rrA6I2GGU0S
Bzmyc7bEdRZOVV7sy3p1kfsp7aJ9ToPnNP8Rm2P5Q6ekRUVvVu3SeGBjPOC5
k8eBuL3ow4MsfuTNuMsLkCdQvvxtavc8Wi76rPxcy+dzkI279GrQ64zUuo93
/9Tg8D7N+V6vusQ/N+Nwlvn80y7lyf48LvizyVdVBiF8/YA6x49qrnPAvTny
ntsPbRJ99dGbGk/qdlpWlDgXcS/jL3dv9Hyb5rwxO33/DXO/tw71fcjxo835
e08ujGLHY9eDEwI3ZPRVbbci54eBkwQ3CU7SfG9wk8k8ZWb99Dou3x0311tw
gsZRJh3ZTe26ozWOktu1W5Q6EdGrX+8I4IWU8Z6j9aCjT8hzfBPEAcA9GT1w
zXcWX3VAdQT7zeifEbt9HkXw4ePVzjuxY1sZt9MnZLl1xzqk/4HRE4d3bqVx
l7Wef9Ospyunqv918uzWUVN+/PzRlveoqpXqt5srXL2W2W+eHJcl8+PDYW00
79SQIfjt2w9slDjv9J6VOl+urQp+k7jGEldHw7phHbFOWDfgOMB1iL31xY+u
7kPiU3futHwyP8n5y5d7fg3qm+BPBScLblb9tl3av6w8LvtJ7HH1v+Y8p7i0
WaX5rp7FPOeJj7d39c/0w0AfgkMElyj/n23j8fvb+Hqu77fVvP+eiSub9XfZ
6xkxk2+Yv87WM+Zb3OYY7Zd+4kXd5P/nD/Xzjnlo9q0vruoW6ltjzuN3HOc8
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
Reyxn3YEcfOza3weK8R/1qzvqpmX3/9H6wpf/Dk7utCcd+cCzdfcYeMf51a5
uiY+OU4dnYzzmkrXT5V4IX1EdJyrnSxxjZY1iqv72OLKc6ycZfMwM1UvPVSn
+c/sLyxOtUD79wz5VtdD2ZCqAP0ueL27qiQvW3JcpeMjlvlwfKXwnxwV9JR8
xnNXFkYZ9+T3Am8g74H3ktwXiP4+8G2LPi7dHLwh7/89xUH32RyUm4+J77m6
G51fXTWfucDLwsuySO3xCwq7Ot5fxkP0weoGHfd5Nh8x2vdJh7ef/IdZz32X
an/fV361OKX8LsJr9csTmsd8+SPlB23RTv3jGZ+kOTuTPqkiPtvb9ROS/12j
/szEy7xMH0b6FRg8S5tXfb8C4sTEjbHr6OMiccgHLP7w9PoI/UsEX/pxD7EP
3j3B91eX+dTN88yT5zX38efj1C5/eWGhPK/JA1GHYMZlUUG66+cieZplVe59
wZcu7/OqzUF7835v/0Dlcza7983+ruups+tfTF9J6gioK5gjz2nr++otb9qs
9q4fDHniMP7P5o3Pbif+0eL9s51svp46SvEeR64uEruoj60HeXSH+tkvJWQz
/jsSMrjJ5L6byTw9yJIvHWvrDUt2aX311jauf5Kst141jpfe7Kenzm4tz3PZ
1EzB0+5dm2b7BClfcmN2upONPXdPhvLUzjhF+ZYMzkTrdOscjhmeSKP/p7+f
Jfn/Tdd7XKTgv26y+MINvaL0a5N5uH+D4KLGvZgp+rppbJbjlSTupvH2Gjkv
+nyWW3dm/ly3JlfeQ1NT5yg4JXBLgotr5fcbuU4bKx+u9oapS6BOQeou5yle
oPKFkig4a/K45vyuTfUyr+69JNPxhMAbYuI5o9tstvWD77l9SnC1D7YWffJG
by+b+1+/j/5fz8daRzlf7ItXWov9Of4QL4uddrDWzbV4ubXk3V59O0Ptr6qW
rv+oue4V5S0cjzP9r4RH7NAi8TMMDhyeHLndmOfJgTeHvnNSF3pWvvvkOPs8
+74Zv78sznX9AnVfr1V7t3+NxOF35qu9fnP7dn/oS2r+95bEcTMO2/K934Uf
Zs77Zp92rt+c7DM5mr9b2ZCm9vnxdvzXva98nD2Uh2Xx+4VOD6AXUu17yKF9
7+Ma118VPkixg8stX/JWi4vpkOFks+7faKvv45s1xS6PTV7b6O/x8zMEz57T
tlUUXm3qkJAlnjmpUnFsd9ZETDw47cFK1xeVvLjM027V4b6p3atdnBc7lbx5
8u/Yx9jn2dfZ59nX2edNnP+DRq3r6/N3yxubb/uLp2mc+sl+ym940vaObp2y
btmH2JfM/zyT00LiCN1e8/sS+5T4r0+pvzAs3/ZnmeP7mtN3VffBfInfjJ/t
ZfP9nHdU39Ufp/12vzi/1PEVN7dvpn9d7erYZP0NKtH9aqKXzXPf8y+VNx6v
shkHxsX4Pxdcp+uzTfeWzh5VnFG3KH1q6L860tzHk//V+qILfnF9KugjK/Pz
FeUnG/Zope53wZZA816LBDdd0v63YKg5/6tFEepcqHsx+uS0V9Jk3keurw94
3+hT+qfIfveU76di/MaaD0Qu+WKj1hs1fGR56Hf485HN+R/GCs28nj5iu9Zp
fRMUun6u9OU2530+J0v2xZs/buP6Ppj5cvPiNo5HCF4hiat92sPW3Wlfy/FR
3S8GrSuJEuck7sn4CK4hbZGrS6JOSfLvC70/aOyQi+7PlzzOTSd0C/dDWOTz
Esm8BeQt4GmBt8WMd+vrPV6APILy0xaL/MoZKl+4S+tx9k3I4HnA/RGvkjze
JV4297/uH9oPKuug4ih5EHPeG1u0H0KvRuUh7P2P7jI+E1fvEvtnaVU8gGcQ
3kHmUfK8Ejxh698C6vCIb5pvTV6OPN2Jag/FyOuTxyevL/pog+ezFv2zzfaH
qY47WfRRRdydx+9SnYdsxm/q4dZeX1Sq9sNLPi7KJ8fxs5Q3rylANuvjnaYm
sQe+fCVb7KhJmXsl7vniQ9mCQ36joilgvMlDaZzTxjMnVUt+86rdGm9cM6LY
8VzBeyV1hnfkyPz9YmQHya/UZeRYvE0H1wfL6JPjjymO8clx1jHrOtW+gSz7
wMM2Xn+v30fYV+hzrPax5ZXduUP5PY6MB/gt9CM1/vP5fTOER+/I/i00/npA
Rgy9Lnnzz3yfHnCK4BbFXvrLVss3+WUEO1v7T2ufl0NPynGyuf6c47Ver2mb
fn9amX7/36r2Wu+9en24r8sdG4J+Mi6ztS/q5A3KL1fyjspXbnB92eibJ+OY
bvO0j3oZHgt4LcReXZ/h+mxSl0+dPnV1apdZntOELHGqWUUxIwb79xa9M2Z2
USzVecicx+/oZ5lcF4YMjxS8UsJTdZ7ikdLy2oX6B5+f2TUKzyB8nvA4wesE
DlTj8zliNxbkKA9aqztzotQdmvG4+I4cx7dIPyLzv33vUPn8So+zk/0xnufs
ReLx8ETBGyX9FLtvjdDX2dz3wp1pahfOLYzCG0VcjOOcp30dfnd+k/ax/l35
rJ6MB/BQwUslOI/pv0XoMyR47fNU3plm+4KP/c3iYcsD6kzAPSELHrbW7tsX
VmmdT1OV6o/Hesp7GHqbr2smr2TmdduLe8pn1+6F6sdfqHJ2N9ufZaS1/0ZU
uE+OS13P37Uf4untc6J8chycH7g/sdPvqnK4Ko1PWX7GKW+4+Ivxi548LE3s
pfLDtV76vvPTFG+wUvVf/kc2vzC7VvXMAVXaf6Q4R/OMH9k4TWmexSspzuPb
S3U/WfdiaZTjyecZ8cx/+PP4nfj3260+61oRUT/sE+VXmLXZ8brA8zJT3u/H
Wt/UaOMK7T/R587ZEtBHDTycsUM/7ZMVkqfto/jNif9o4/Y//GHJf7bMlvjI
ihvaur5VZr/Nu02/v6KF1XcJf5lxYty0n0qN4jcu8P06qKMy72N+xPYTXF3q
4g70B0Q2eMx247LlvpaPaCf7yd3jPS8aPGnw9sHjJ/tXjeqHcXu66Hu4PcP2
JWypuIEDfF8iZKkH2+156OClAy8GT5voie5t3biBI+M8eHHhyRU85c1qz0zt
3k3mwey+GvfafG9RVOoGR9n46s4fHM5acSG2bu1g5XNdssLil/rZ739qdP1h
qQsjnoLd2lwuWqJytwp97y9+7XnU4FVTnjL6pmpde8b4DqKnu0dyovRFM8/z
zxNyHD9lqF/ElB5ReHND/XjeVjxL2fK4Xa+eRxdeXfpLgt8z+3TNhV4293Hz
SJX77d8lSrwYHjbOa34dcx6/M374Px9u5+Ktot8OVv5ik2chfhPCkfVvUPzH
1kz5/XGd6C/TwcU9iYPKe3nB5sN7Wn6WxnhkoxnO9yo13zJJ63VmDa+U+XH8
nTkxeOHA3YDDkesNsn7zR/EIPA1mHTX0y3X91+D5NOMVO0njnnPGZTgeUXhF
yf+QX4UHLNQPZqivQ+ST48oL2lPG879jNN/9a0a260sh49WlRuP6QyvVruip
9apmfzb3+060g67fq3NizF/8OWO3zXq3VsbnoMXKazjsHcv/FmuIwBsOj7j2
B7Z9yA+vjpDng3ddeC+HF8j6u/hAxdXue1GB5WFTHFv7Leq3b1vVQp7n7hFq
H726pUW0OU+4iR/Ke/upRuoP89vUyD71+5VF8j/nv5Ye45Pj8BiY+bHjkUz1
F9tn6Xh9qfVVs0/T+tzR8yzfa7mP3ybbldiR2JXYkdiV8F7Ag6H7gfK2Fj2d
7vrJKf48/od9n32efV//v3Woj9xJDa1lfv4yMtPV0WM3E3+A/7553NHEIW8x
z/W3HWqPtLB6gH7zLzVFyFdS/yT4taFaXzQ/1+OiwEnxnnnvvFfeM7xY8GRR
D0ZfYjOvV9ymfmrOHZZf//5iF9/R/Iqe//1t6fJ+Lryyg80fah2tyX8ZvXDJ
+uwoOGdwz2YeFT6QKfvuDRHb7+BfPaLEq7HDsctN/KfsmJwYfWTor2P0xO1n
Wj+lr+X3Xm71/US/H7Fvs4+zb7OPs2+zjzMOjAvjwLjw3IyDGf8W59v7WNoi
Sp9K8s/aR3G32nGnVQTgbVXv1zhZ4teltSJfcXG9/P6pHrUBz804KI+g78eO
bNyfLsO1n85Fg1trnnRUpuA/2x6s/lvbd3x9oFlPC+4qjIX6gU2x/TnXtZP5
M/BTa1+c1kXy9avHWp7rPjniP885f2+g45wfA58FD1HzPpgG1w7OnTpj6pTA
65jrdCtNj1FHT109df3U+cPjCK+jrK/v69VeHFgdAd8IL6vwC3XS93PRrmJd
B1ttvLesOIqdi91r4mMjdip+9pwFWq8/7nnfHxIepRCv0qJ0Ny8lr/69jXu+
1ELG45BfCkU/HXNnuvh9cwdqvujAR4oUB5FeEKMvD/YZPHKC33hE9e8792t+
4OSHbV+Y+1rqOI9sFaUOoLm8z60Zog9eH95K605v0fz6/v9opXmMW62deLrF
D1zucbrgdsHpgtsVnu6E3WPOm9KnyeHCknkZkWXffrHafipurP+rGs8umdXg
+AvoC0Tcnn6kgv9t0vsb9/xeh6MSfTrV8gg3+n6l8DQ1520yfB0yLw5THsKv
vvayeS8zvswQu7Wmbyt5H48tyxB9+sERrUTP39BW+zEPvS8rCi4ZnLI81yb6
oDa6++Y5uG+eg/vkvm+X9x44fDB9k9U/9rhmcM5Sx7bb4pNWr7Z4ij3W7kW/
7NE86IwKwe9++XR6jLwQdk4y7yay2A1l1cpH8bvizoafqvmGl+KWvyrh1+Ln
4sfi12o/5k3BEUJc95Rep1z5DOeOVn5Vs8+x74X6YU/RPMCw7bZPwPjOFp+W
GzO45tYPKj/lqm22P+99nZVX7WP1n3LruggfU1lJXQBu+gpz2fPrZFwmjmmS
uEPpmXUB9ZrJehi9ix4mz8T54LLBaYPL5v/AZYPThncRHkbsQuxE8/vFV2i+
tWZ9G8c3RV8BrstzcR88x0KZB9sdPknwIeNsXcuqcol3Dro1R/s4nNYUAfcM
DgjcMzhojss+McHWg2cVOVnqxbKLRK8svl9/91Wm8uuMH98rit0GDxv7A/Vl
xo9tXVQg+8zb93eX9/1lQUEMHr77RO/Pd/6+2LsjFX/SP8PyMz/V3tVJiR13
sOYVh16s/DCGFxWeVOryqdPH708VFxAc4nlt1C/q6eMCxAnoU0HfCrO/fpWr
9Q+LLyiIUodHXZ7kZ9/X6xo7w3ws3aL5zH+ernxnBz/WTcbpsxmWJ3l/7X81
t7gwxr7MPm3Ou3SR2i0Xb/D7NPu2ea6JuZZ3499NDpdHvyj8A7FvzlL/btxu
L4tfvUvlIWdmSn3SMXu0vrDj0Myo6J+Ovwfl5v5G/Cx5lB2HKP6u+hXlLxo+
WHEvW/5WKv5qbEt9hH6QWpf+veYn7t6u9u7qOt0X6tPt/mf5wQp6y7ivntEq
Sv9aZDPvWr2svCT7v6y8RAtfUPxy00zd/355RXn5Zz6j+nZAQt+y/uBxB0ei
fd58HyH6ClEvSl81+i7Ql50+Q/Qdwg4gnwTvMDzE4Iek7vTr9Cg8BvAamJ89
e6jlH9zaMQpvsPijK+OC14nPVrtpywmK729xnPItbxyYJ/iWspHdrf1h6/QT
son3L1mYL+O37FKtD3h9Ub7o17cfsvvfXS2j4P9lnzq+RvlH9+ko9lDXVTku
Tm7u78brM6KsU9at4Nombgqmi8H0vOJ91lq53wvCVz3vXevPzFMc8N6plg96
TRupfz9/sdrtmxL6EH4m/IPE7/qfeLfyaxZeXaB66S71W+deVeD8FMUr2bqd
m5RndedVdcpDc3N6OC94o8r9r7J4x6/if6izQOY98F4kHj12p+4j/eIBsujj
86080spD48oTdaeev+SCeEDcjzigeU+XXJouz5F3uPXL+qm/tHqz4k+2ne1l
c/+/nav26WXbWst7afFhN1fnqXk322/oLGufVHhZnrfS2mvnNipf1em9XT2F
USNT/65ymxdt37PzQ9+LLP3cpuv50WGKjzrxVanHKFl3rsb3xk0rsjyShXr/
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
PJA2fz9B83ynv+NlcEnwZ7Dfij04sI3WtZVkOVleZ6veLv6EDN7PxKNezdL4
3QmjilzdH3XryNQFUgdoLmPqAvH7UvmF+IH4hfBmy/hf4nm04dXG/5Q6o9Le
Du8j49qut7zv717yMnEi+CiIH8s4ftxZ66Oz8pys/rXin/pMtPxXp3l8ntRf
H6PygB+bnD+keeI81UejvSy8/U9pf5UXT8kL46BHdZG88txJtt7lPMVJ/+0D
L8u4/tvrg+bysicKY+D05XlHK07f5NdkXY/UuqGih7ws8+Jln79CJt5j8DFf
TNF4T497CxyOIhXOIpWeQSZuRRxL1sXZdn8/ReNYt9zmZeofwDOnwiEh/899
a6Hft9jHGB+Js97q66yQBQ/3lNa7ZF5j4159PF+mvJdOOVHqyZCFhzWvKcL9
JvOoIjNfwF/IPM+2/cl+qnTrRPnCVqj9ULVN+QOnfxcBd0C8S57nG4vP3ac4
KvbF8o3BB2Jgj3X+BjwqzftNjK73/DzI6H2ZTy/0cnFqZFnv5YWqJ57pZfG1
GaH+IiZvSxyW/BFyct2B/N9SHz9G5r6kD9U8va+jV2c5e4Y+XrJvLbPz8scW
ilN51M9v9iX4Nprz6yK/d5DK6Yl9DZ4u+pWovsiIgRvkeZHJn+k8KXVxbF0v
pe5//td9mP/lPtSf2RmMl+v6PCsy65x1z7oO5dWn+O8ZD75HZt5LXc0oj/ul
bqI5DrjPzHK1X4dsd32GyHuovbtV9/HRy6y962X8JnB1Gu+qD7DL6cOCv0Se
S+5/jpfxn+ivQtwLmXVKH1/2JfIIyXkF4lciP2fl52pcHZf4OfdVBuQ9ee/I
zGvynsQxwIPIftHL4nQKbJ7r2Aonk+eEf0fGp1VmFJl8A7x35L0EV1Rl/cKZ
uW5ehfBfy/0+pPt/XpS6gbVqX7vzkTlf7Kj2+e58+jDr+Nt6ngvbq15fq3xo
ZUP+KIdwxye2t+/Ty1yvXMbxQ6vnfg2I7zave9q718tiv7ev0DjFfbvd/RH/
RSb+K3bxje1t/sLOl6f8+cicr/khf77GbVu5+CKyxnUzXL2lxju176DpX4Us
cZWltt5yuOVbHpYfpc5DcSv5ru80Mv2x4JmjTx8yPDnoS+rVqC9i/HV/8uOf
jINGRt+Rb1WcSyudf7fa+GY/n09RnOpGlz9B5nzRH8M3qr4q7ul4leV/2vS0
fNxepq5Ln9/Hw5DBu+n4+7gWMnGPVMeR8RPwG/AL8BvIr5Afp55Kzlun/E19
X/ey9Dd8Tfsbvv1Ly2ioL+dLtY6PXvTLE14GL06dNTL8BYor8n0+kTVuZvsb
bapw/Z+IoyPzfPj5PB8y8fNzZH+f63B4LUT8yMa91wWLJJ8338l8D07vBSPn
WH6p/lsC7EPZ3h7wfJTUzYueO8Py629sE+V55Tkv9c8PT6OMyx6LIxtqx+NF
q0/7VjqZPiP0JZL5sg/1Hlr/PXlwiygy/DRvynPHND8ZWRd0kuda4GTpt3X3
Au0bf/a6gLoC/A7y+cgJ93TnxXt7yXo74tEiWY/lT6fJet/0jn2e/Syf8Faf
x0IWP7Bul8bbmuJB8nMiU18u8+dA68e+Frf9DDtFiSsik19VfdEpSp0R+Ajw
FKl+h8zvuA785PQbFrzBjErXNwm8D7LgIDr7enbim9jXyPRNU3x9jo3jN9n3
6c9H5ny53wf9+eov+3odZOoGZV4+28baZb7vA+cjc77sG7P9+Rrf+E7919Hb
bDxjudpFU7ZZvNwfZfAiatctV7sq4mWuJx/zfL4WWfcfn59NPo4MP6zc/uze
jjdW7Rarh4dYPP3mnvJ+75joZbWv2ri8DDL9m7ADsQux+1LZhfjRIV7ziU1h
no6Jtq9qWY3y8vTZo/vP5C1qnw7Zo/tNfy9LPn/1ZsfDRv0rfV+Q1X9Jj1L/
qv3MbB+5E+EFa3I82cQFm8cJTVyQOKH4l2ut/zao2tWP48/Qp5D9DJ59ZK5L
32Dwu2Gcnd8fkXmPvCfeI3lXcDxyf3fYeOVdlRH62nA+PNDJeQDk5DwAfU3h
wSSuQpyFOApxFnh0Q326ciodHk7xSl6WeXWN3cdGtnTxX7HLCi3faJm1oxJ6
CV5W8CToAWTi5fBsKL6y0MnEXcUvWtYzyn1yXforqF/Q6OYtMv4XeD1k/Br5
nwt6qN7cz8ZTyoqj9KvHjw/Vk1heQMMTiD7WurP/jZsxMvEY3Yc1zrv6RNsf
epqPzyArb5X28zB+tepH7z8hcx+qLztG0btip97jZeL65OHJk+CnI/N/5GPp
Y0JeUb+3/z86zdWh6LpNc3UoIV76hIzdm+y3IOOn4Bcg49fAcwN+izgNMnE9
Of+FLs5OhW+Zvmuav0uNQ0rGKWFHiz673uIQbvfX5X9C66y41NU3I8v8zrLx
w05elveUURrluvwP+VvZj0/xuLRQ36UjPU4NPUTegvci8/4Vr5eQuT/q1FLh
opB5X/ABkQ9UPECHaAgfnZDhpVMcueepC/HhP2j50S6tSHkeMufxO/jhyPMg
Kx4/rn0iD/pd3/fF8SCE01+S7fr+ISfzTBKnEbW1zsdlkOFXB5fHvqp9XL+J
0OeleR9Hw6sj63dQhuNPR8Y+0/hl3PGxyXhvbq/1eP08zku23QO9fctxzpN9
eflvOp/KPW4JOXmdIUsdd2FOTO2gXx1ftto9XhZ+yCm/2vrQOY63FB5T/D3V
vzZ+NzVf5/+P3dx8U/2luLuyfnk6Hx8sdXYedg35EtG3V7UJxw1O9HGBMM7M
4zM1Lu3j3NyP2svdovBKsP8iCw/WFMUDP5mu+bhjXvQ8aPCryfQ/tJetPyuM
kUdTu/IH5bW73fabiP3g+OO0Dq7RycSvxb/Z+6nDb94vemBxIH1aLlgbvCXP
tziYKsfXBvCbgR/VPKyvwxW84uSFDs8o/uHmBXpfj2wJNoseWKD5v4dsf8V4
ud5Pa2snNHhZvm+0PK8lFbpvzbP5sA0lTl+rvugSpW5R3t8BXaLYVfLeKjKd
zHtmfdGHEXsBGfwJ+DnwDHL90q4uHs0+StwZXn1wTKlwTthD8DCLfiqy/ty0
aldHpH5xnZNZ5/Bfab2I1oeW9bJxocUlqu+nlevvH7d90qZ5virqrkLx4aiX
yT9KfuQ8m1+8x/pFZ+r4t3ncy+gTeJxkfjxh41f1YV5EI+tz7NZ4xuCKAP4j
ZPKdOv4lam9kJMUTq9o5mbwreVjsDunbvdDnC4gDYadgt2Bvksd+SdbHx1qH
OGVdcLush8DJWje2w8bDV+s8L7V1VEt+snVnXqZOh7yy+v01AXYbOAO1HzwP
CbLYF/k71H5YWe74O5B1nHz+vjlPh8nz63spVLv0oV4WD+7z94LPXz1P/bWn
NgfEjeAdkPezIO7qp+GfJR8u8/ctG6/4PR4ZKPr9e8W9DNkesI+IGmnV2/kJ
8LhrXHev9FkcfVVelPvgvuALQGae0pdK7JcLLf7vPxYH+YKvo06uq8ZuFD08
3tc3U++MfQPvFd/D24p/KM9/rceRUA+K/0ddnoxLC3v83QrtTxDr5fwS+ZjZ
y/UnRJZxW13ocMTgjKk/Q8Z/we/Cr0LPyH18+UcZP0z745a4+jr0SqieOEbd
eWY4zj49dV4GmbgB+chUce1Qf5U+2j/R5PvBqSTX0SDTt1vzTntcH29w1erX
bnN8vcRXqU+jfi3Ut+ggX58m4/oXWw/bVO7sk2PkBt93dWbI1GMpv5Gvz6Je
C55v+lkgM67wFWIvMr709UMmPs554KLAtyTH6ZCJy2EXUv9Nfo56ImS+h+dO
51mt4lROTBc+1tWf+bgT8TZ4COEfIt5DXIe4AzJxn+Q4TyheWmZxV0t2OT5n
ZK2PjQfsA/jjyOAdZJ0f4vMTxJ3hj4aPmj4hyFrHXR0wj8mz6/r0eXbk5v1N
DO6UfB52hK4vL4fwAadZHuWE30YfF/QDMvpBpt2XvWz8vygG3kTuc7LHm+C/
ghvk+ZHx8/D74MVAxk+kTwHxC5135TYPZnFvMZ+vQFY+Klv/eqmNn71Spfzz
E70/pfE67zci4zfKczSW6ny7OC/G+oX3Qebnp3be11lc18deTrXukFlPrEPq
STWeucn5Kan8mBBedLDVxzdWuX62yPihnMfvUp2HHPLTZ9s8yN/t+3nfy+gB
8Iyah/D1L+SDiSOkijMkxxWoA8BOTMaRUe8A76v4v6u9rH6i5UFK+N/wu8Jf
gMx+Q98VeFHpe8/9ITM/iNuwDm6T46sc3636PT86WfhwR/9k80Bfuv4r2HHI
1MeH+o0M+93x7rL/wwsJb0eo3npWqdMDyLzHUJ3g//MekbHP4A8lr4csdvGg
jBj2b6hefLLtC7mkzukzZPg/eC6N46+1/Ey/W3t2bbjvcCc7z+fbPF03W29a
nO7wwegJZPquMH80jtnW9S9DRr/K/DuqrcsTE7/Fj0YvItOXRvR8TU+XV9e4
TE2ATN6evDx8eaH+molxSzVOyOg11il1/cjCqzil0tkV8AZQf48dp36krx9D
xo7ErsSOlHmR6fkekLGPwQ1pXML6Rzf0cP1RyEMjYxfp//m8NftQ8r7EfNd+
dQ3OHk7eB5FD9l9pZgzeD43PWD/5kNZR6o1Dv1vY1tYZZ7k6A/pgITM+km9c
Vu/4L8A/YQ/A50F8Hpm6DfBf+juPBwMvkVxHQJ4C3A32PfNS40S+H4rG+7xM
/ypwhKF4YDM/Ifm6+AmhPpQ5Nr+aeC7wVDw3stoj3m4HP0VdhfoDHZxdjqz3
le14KojboqfhR0OPsz6QWU/E98EbE89nHwFXzPWRiQPTb4S6IfA45Imo/wN/
Qx8w8DbgcZDhh8Xeg2+IfhjwWiDTLxJ93bz/helnDs9gCC84IcPibm2/7zyP
hwEvgwz+BL5i6j8F/7iipY1nlet91FcE4EOQWcfgK8BTyOeIWocjAFcAfgJc
Qch/HVbh1hm8QMiat62IgKcATyL9zJbE/oCfEL76Z4r0feba/PaEohj4COFx
amt5YrruVnu+Ih7gr2DHwdOAvQs/Arx88EChr9CPyNRLk79Njssik3dV3lyP
e0zGQTJ/mUfkq/AbkPEz8Ks1H+l5BmR+fORlWXezPL8K6yuEN4rWOfwzMuuK
fQ6Zdcc6476xH+hbC+4NPBS4N2TqWvC3kMHtwScMnznxbPwvGaYevZy/gYzf
zzhyf6nGERn9FIpDrEyqi17t/ZsQzqGqwMbZcxx/pvpVXiZeLvHxPqsD5CIZ
l59dvFztzDUB8XDqV5Blvqze7OLhYlflbwnIN6ud5/PP5KOpM6L/ETK4Xfp1
wedL/lfiDm/7fDD5YfxO9CUyeXTwQfjtM+W533X+TqiecmI3108KmXou5a/t
FsUv07hTUv+2leXOL5PjP5e7/yc/yP0hk2/Db4MXKzm/JvG6JT6uTT4t1Mf2
PJ8/I58Wyp9NznD9ttDjyOAom/e/MvMNmTiY2BGtOtr8UU4UvkP6YOMX4Tfh
ByKn8vuReR/03SJfAa8y7wdZ4yXef0HPp7JjsVuxY8kHyP9f5PMD5AvoM4L/
Q18v7GvsXT3e2Y1nqP9Yp3qX90CmHot6CtkHJ3k+S/p4g1chnoz/QdwC/0Tj
cl7WeVfk8qHEGWX7GOjrpZDRq+RV0cuh+b7dy9jbvD9Zbml9oiG+ja0ez4XM
fYOHR4YvkvtWeyg9FuKHWO7tPOK18GHyvokPwk+GfYAMboXnJ45H3gLcFjJ1
Ythn1PUSdyGuAh6bcZTHnu55peTxnvWy7M+Ters4Nes0eV0iY2+CR8SPJu4p
evEzLzMO8OWQr6M/BDLxTXhb6cNEPJJ4JbLogz4+Hkn8EX8Dexr9of2Fcyy/
cUdnl6Tye8Hh0u80Fa8Msr6/uIvPEb9DZr3QrwRcEjL/yzphPiNjl7FO6Bsa
ytM96HFZ5FXkOgMKY8S/wGMgoxfZN9BL9AkFV8TzIJNvFv3RxcvwRMjvq2x/
0rYVjr+R/jnEKeiXg0zehDx0KB7Vo4uLXyITnwLfQn4ZvwZZx8HzHSTvC9Tj
Ez8L8Weutn3cqzxfCjJ2HHgp8rX4WcjgNqi3Jx4VigO/7+NVxKPIr8r1D/Dx
J71vH0f5/+Mqe50eCfW7GOtl6nfQW+gx9BTzgfwmdgNyCNe1tWuU/QL9K18v
7+36C+FHEz9ABq+HvsVfJ98KnkAec2YvZ2ejx5BD/TWGe54c7Ar0GfsE64x9
Ifm+kUNxnCneX8B/IL7CPCc/D88L9rb6o97+5r5lnmb2cnE29CJ6k3wfcqgf
1bw2UXiqwO/D+4SsfWutv9fV83Hrfl8c5T1jRxE/xz5Axp7Q+O0ux8Or8dtd
Dt9Ff1Bk+tCxfsk3gCPi/sif0tcE/Y6Mv0OfE/ItIX6osq5Ob5AHQk8gw++j
9lid6/cCHwM8C9Td4edov6q0GDJxJ+6D+ju1n2tcHJs4KTI8Mdh12Je6D3p7
E/uTeDfjiAwekHpJ7Hn4IqgXBJ8BrhsZXDf2LnE4/p91HfJHEjLrslm9s+Al
GBdk/M8BklALXF4XGT7D4fK/nzi+At0P053+g1cc/AR6GRkcDnzJ2FvI5ANC
fZ0z6sN8w8VeJp4MLhv7GnwF8w2Zuj/sZ+xl0df35LnxI34MvxB4C+qrkKmj
Bg+NzHqg3wL6k77G2JPYDcih+ObW3n/Qe6H4VZW367CvkYmboOd0fNq5ug7k
ZL2FnsK+a97/w/W3TOzDrA/0EDLxM9YL8QX6mSFjnyuuz9t74MV5T9j7xHNC
fsxoq58/9nl9ZPwS8qHgc5gPIb6osjwns77AVypv+SaX/wLvDM8Nssb/dgXw
NqOPiLOgbzTfv8HapTscDwb5NsGT9vEy8xH+G+YfMv4+ef4Qv1Ni3w+tvyVJ
dXJTPM8jMvYueR78H/Qi444M3xn+LPEjZOW/+NHVw8CPQr3PN3L+Sicz/0N1
Zqu9jH0tr6WVta9v8OuLuDtxRvwkcCjYX8iqRzu5+Y+fSPyffAEy35MPAOeD
HUneDpweeDbilMisG+JM1MmA+8GuQg7VcSTGgXEC54sdjcx7IM4Vyn+WNbo8
HuuWfZBP8DXg91jPOv6e31Hz1X4/0b72C1z8j/cN/wnvD95f9GyI//kGz/+s
vAEt3P4NrxXxAPQFMngw4vOhOpy5FQ53St069S3oG/x74irI4AV434x3KF67
Ot3FZ9m/yRcjh3gr52Y5/5f4ADLxPd4j+hN9Kf7RZx3d/sF8YL0ybviz9HFF
Zhypa8Bup44Bf7V5/0sjk7dn3+U58F+QeW7WA/Y38y3VPsI8Yx9B/xFHYD9G
32mfST//tE4g5uwTcKroF/RRsr6RcdjpcefMT/Yp1jfrH1mGuYf3e5BD67Vt
Lxe/YD8m/46ewr4l7qb1MXsD8H/YszwvfBrI1+m+4Ow57A/2I3BtyKF85e2+
PwbxJeJW3K/ynXiZunvsCd4/75t1wfNhr/M8rOcQz3VaN+cPsH+xPyOz7nSe
dQr30d3kZXCixIXALyGDVyI/gb2Lf4g+QGZfxB5ivcvPp/cO24Vjvf6Wn5V5
GVxaaP/o38U9F34CMnYX84PxD/tDRW5+MH+QGU/VW12j9P/Anud7/JciWT+L
3XhwH3yPPkIO6YHE9XU8v7L2zYYAmb450o9k7hL3Prg+/mCIPzVxPY2jl6ue
OCku/d7urewt8/H1DsXKG/ru7gh8GfJ5f5JsP815Eve8a7fV97sdH5x5Hw8f
W6T9hv6xx/Kg7VF91HF3hLimrJsTdkeIe8rn4D3WL7Hn5+2x/Zz2yHobkql1
GP1n1+v/D99t40f2uqd7WfPSu13dvFynt5fFjji+0uVP5PxOeyLkHeVz/z3W
P9gt9vcbl+t+e9kXipeYPtI/v+BHivzzyefR/vnET/reXve2PSovsM959R7H
zyDXWV8u8YDNe1RPvFStfOwzn8mWPFzpG436+5vs+TvsfXbbY/P09jk327zH
WxXaD/J3zzdk+LOmN1ZK/cDOfex+fkK5i2PKdY8pd3FQY//PmqF+ZQx85F47
rj/sdr/jOmZcL36oUdZZxT2ZTt+Z/t+j/tEYYO8YvfVxQZHM0+69tf9JwamK
a5rRaP265b3F3zs0rnH8be2Kozw34yDvo7DB8d6JvFb7GexcVKV5z3dsnVm/
Lfp8Z5Tr/edq3Gh6Ra2MU/5vaVGOc565jy3Teok++PaUopjw/2z2eAD5fQeN
j/WfGo+sMMevLQ+KzXl1Wx1Ph4z/VWnqD528y/GSz5T38q6u569/FXuy6s91
sn6GXFElvGid78hzfVqNevn6Fc0/X3yW9ncdfnBPiRudW1sg+/gxXX0fAuHz
rk1z+Sjhnx1X5OIM8rxHWP9uTtzhWYRHvJfareN+rHD2tcEDT/5J+bsml7US
HtvyMVpPP+vEzW7dG/069tEKyQfOarfX9eEw4/TUv2z9tcXNfn2v4p3vP87i
1BPzinlmrra4dZHYaw1na9zw6RLlM3v37gKxk958VefxWefHJW/35H5at7Pq
3XSNpy1RHq4xPTP1eT8od3ETec8z7XPPK49Qr2Di2K8dnCXx0Ae/2xuBv1L0
x22Vrt7f+Lsnr8oTvFefGVrv+8yVWl9wZNDT1SGZ+f1iYZbYlzuadD2+XVaq
/U5vsrii0jyNK/8fV9cdV9P//+veuvd2723vvexddtJ5K2WPQihFtogyEkIk
RJkRykpkj1CyzqFEksqIBqWhqb3n75z3+7xPn+/vr/fj9b7nnHvOe7zer/l8
ubPrM7cO6VlfWP7hzPotPFm8klP1BJZXmfUUfLwDnmdbHGT+V57JRXLfmccS
hDc1lo3Xq2Lj9+ew/vOwRja+vgrZM01YfxTJ+jdMes8RfK7AutoSpCcEtLH8
YyX7/n3Z9/Rk+Ysla6c1ZJ9zr45rcT+sa+soQXWznZDePdlNFuJyUQvbOfmI
WXdvzbthfaYHOaje8vn4HgLmD/Zj63fdKyPxOMHzHiB8riNWyH846qI8HO/K
KzKc/AvPBZV6ZNcNK4Pr3ckErb9RnmZwXlXOmEN9wzFDCmm5QHM4j1VvkT1+
WX0z5E/OEzq4Fvf/1/7/NBf5XztHyHH5pNjfzfCtiP4dUN8DJQifOW2AMdzH
u3Plobw5KxfFp23eLQf1cic2jux8bhusE/xtbyvJ5M0OHdxMYn0O1tvN7bUD
4nWJ1ymcv2Xseourg8+JfteMzovfTZzewcjfEYotUP42KufDfXtxJeLDX/ey
+SteKnB8fm9F9d/bA1m52byRs79Bvlffm58M9Y4T5aQf8x5D0ghm36r1QfFs
H9RY/GE1xK9cL7Ygu9GvMhLKXUNTCIzXAdfjV1Ze7yOAdq9hs7XhuOp7Irz6
AzWycF8erOJDveAcUAM4vwB+50jWTqjEnm+36gl8DuBzgeFj/o+RXinQRXb4
d3koHt3wNx+uE4WHsqCVETcmdJJMPOhIsQJnn2fuH5eD/HY+TwRQ/lXupwbl
uDW/+dDu+mqjFPL9I2po3QUbyqD6spPb0Dwmsue4egv079XfQP4s5/UNUJ54
xlNFdYy+ozhC7z8IP/nPWx74Hz+nkP1ep976fTDubgOyNz4A2lDfXSbVQXii
qQIK570xfFnZS4Lqvyqx52NmE8w3DWwTQ3wZ7SoTuL5HlKI898sWPVB+FRzu
9V8y35vboAHP275zkD3ojaII8uM7s2QojAPPjNuY+yiOJL+vCtQjjiTzoJy2
2w/Jo3qDpfB+xUkCTh+E77epE/GpQy0ElluxHIvjo/+nHgrGc9nRwMUpMPer
3UX1nfvORfGaew1U0Po+02s/xXIjliOZ99YSIzx//T2dcB/FRCOc/N3RndAf
K+9jAvXm3cvEMP/m9miUxzJnGMKH3NSC8uuOVfHROghG8QcpRahelHQCwl++
/VGC3kenN1+Y+X/vMH1Ub9ZEBPH9bwtRPJBmN7IDzvyGzg37uTKIHxT0+hfg
eJSy/sChKI+rYUxvvCHUg9XYeFbXFvg9wQtMoZxyUluC8r+q2tD5Pr35f+ob
bHnZSTD8Sj6vtx4BfJ59M5dnxuzn2AC2vteUDuK/8fgRch0IJzuDtRM2t0O/
hMIMlM9t+YEPnJHehuTClXWQL0bb9cZjMeMe3oDsS8RWAefPgfpu31JyHbOK
5BE+yCkPFGeeV4TicFdqmEJ8g5QRhdDPrGBXi/juZTZeIADV05Y/geKqH/0S
oX2vgfRUlcNaAPMZzHfgODqw5+jBRihvDBqhCPfLoZ/mKD7vIHsdLf8w71Fw
UB3tz7PI/vpwHML5vh0oRHj3a4UI17lLl4s/wusW1kXsx4PfVXUH1SnKe4H0
4qdrWRxC/xZk//RvIXGcF4ybr69Hdfq80XkTbYr8Kf/y6jn/AhzfVQgX7LCZ
EMYVZWoie/CoDMT/+hUhfOEjL8UoTzGc5b9y9RxeGaM3b7kmpOA5ncPiR/Sp
h/b1nbmanP2PGYe5Hig+wV9HE9XdNuitF8hc5/uNrcf9oh3yT9vmDhLnKzL7
yXZLbx0TqNeYIz/Oso8o7mxMODpPxxxg8x4VUHyV2RFZCre4n5E3dhUpc35Z
zKcx38byCpbzoFySgOygrtHtsJ5h/6lIHhh93xD8Nw6E4aP/c27R5xjz3jIi
TcRPF7O4NV5ovTrtM4HfZzWkt/7Zf/11w/MM4ToYoiqB/7NpFvKPfB+GcD42
7TZD50maDBf3zMhBBgSKW5QL0kb6WDrGyWokmPpPqpeRXVRxpwma3+1tBK6r
C/liXAdcL77DWoiVDJ6g01WEJzitiMTnID4XUVxtJsrLWp1NQr1wYAPx3/yZ
NIDkw/Ih3UQLTMi4QUJ8+e5CuF7aN7F24wJNeC7ucxVwdmRGPpv8QcDFvzH/
O7xdF+4f5TVCLj6F0W+LsZ87vJXzU8B1e7/Xn8eM41d/OTj/AwQaqA5rBLJD
6Ac0Qf7t+06d85cw6wZ0ItzbocbKcFwT1iK8YnIxikcWuKP9InaE+FEpQTvR
OWu5VsydS/icgvu0mq2TPa0F8qOTe6XwHFcoR3HxKtulkG/c+oXst5JzKD51
6VsBwP43KJ8urSVxXAysP1uL9JmqeSLOfw/H4SOLqz0O5duoXepk2xaiBPLv
25w9EcpzXSyOf/QrAuZjv+utu8bwieeDUB6hmyay8yXfQP684SeN4Ho0o/Uw
Zp3O+onqp2VM6o3PZNb9TzGqJ/HSHtWHq1yI6t6P92Hj/2ew8qlpA9Q/F0Yh
eUzfBPHTm/bGnH6FW9zP8Luht3pgHlHBahHAOCvQfneqCuLQqtkg3OAxjV1o
XSj21jGH8pgcK3811hP/9TMmhiEc0RNLkP6QXS0L46QmSeVYfH11AP+nfzFX
P/v/14nG+Ytw33zLQHFPCk1c/gmz3UAKiiOV7atI4Rb3M3o1CEH1r6M9Okhm
XU0LUYX8u/soH16/YJMMheOjmPWR5CPi7NXYboLtKMz6K9kv/p/4gHkOvfgR
zLi3JEjg/KYWmTLfGS2JQnLKsMNirq4AM/4DTglgv06WHIwX9vDr5uLe4D50
bofyiG66KZQn9W9LKJR/ko7qD77KIZnH2eci/9n4OBSPkyTuzWufjPRlLo4e
+0Ph+bCArS/oqgDjIB7Eo+8ds6kDyiHBj9h48TFs/GhBC6rn9bK33gccl1tN
XPw2w5ebh7Dn0/B2GK+h3dMbj3EJrptMcgHTvPyJ5I1fTVw8Iv4f/L/MfV5Z
IjhurqMM2bpf6Ht3GIjR+vnyD/l99uRCHDYwG8X7R5d0EzjulsEDuLW2i4D4
rtNecfiuzL507DaG+8mNj+JTpeGynP8M1k+wQ/VoooUm0C5YnNUbR4zjruB7
P0T1cpb5sf7Dzd0EjiNl1tmZZlkK8iFpF8nIN5vTeZAPXpiqCb9rj7k8XE8N
6orQj/D7kTk6R3+hvHS1100EzFOd+JXzryL/hBFgysn7n1CA45zwDOHeTe7s
JDEuBIwLSy/l9Gysd0M/jS2LI3Gr5H/xJwtLUDzZPxafoKiOxHoF1jMamPHv
qiEvMvSMP8gOZ1KL1tvrP1D/9PrFxn9YIr3TNwjZpytrzZB+aCHP+se64frx
dRZy/gyob5uy8zs7+3/qv6a5sXaBac2cHgjrT33sxb1mnu+hw8aRDFUA+D78
HFzPl5kfxTopBfnfg68Q5+bfzErkL5/AxheWI/zLJE15Lp8EtrUdXD0xht8t
MkPxKkoqrD+4vJXzN8O2i33vhEYoH62ZI6JwvV4Yn72VjZOa30rgdY/3AbNP
lwYhfjXhpQjgupe4DiaOU4F+z9W/4fg7Gsoi/OYoZG+9u0kJ2Rfey3L4tlAO
SWHrmj1k5dfzqJ7mfuXePAzIpk1QXYTuUgnnf2LeM3cu8lMWbJHh4r3hd4rb
EB7H9ybId5bwe+PWGNpdgr7vURKL836ItbtF18Pv/1GlAq/XH83nxgmPGyMv
3HRF9bkeiHrtyJAfsnZlRg6E9aRpuZCht9mi+MVtIgmXD8rIESfqBRTzOa9H
mcPv2HpYyuFvYbsnlOv+/GXx2l5CffqkhSbn32PeK0YL+ZMtVE1RfFiCKdRb
x5xn/c73UL0czxOo3tHDDxL4Ha3Npv8T/8WMO8bZx/ELzPNmDEfxZiWDxADH
Z0C99oQOPCfUByG/xN2fOshffADFWzh7o/PBc4I2/O6t+gIYL2iQgX53uCeG
69bZSxbZ51Yhe5TaQXYd72hH+yC7N14PygcZ9cju5taE+M1Ktn5kdCG6PpiN
H21shNfpBLB+UGdNsB0epDeQPGWP8SQ6oDyyNpkHmPoNtnd7oJ/c/rIAyj/9
c4XQvnpuag+B8Ay+I/lg1HcSy3VYzmPGpz0P2bkWrULxgjZiFK+UtRnh2zn3
6cVfxzh2zHpLJRGunWCpMuQP5wN5FLIbs+fTsi6CuW3hTXPo74v6jepHXVHs
xWmF9XHWILuJJATn7aJ4EyDphudb0PveejDM9wkzFVgcPmM0f1sR7qTSCAlX
F4ShL1XIgo1w4R1DeN6JRSQcx8NlyO86/T2nh2O9HMrTn1m70Jd6VK/7AMKB
39HBoxg5JPhCO4njX04xDLQ8EM7PmDXFJM4TZNbb3jIB1+J+eE5VsnYMZR6A
w6CC4pnORkq5uHtmPFdZsPFKyb11VlHdJh04/k8LBVAfjatlcV8GI3n/gIsM
xay7+tEigPEuoFwx7wvy3+xs5PKY4fdFov02JFBC4brluI45Xvd4H0D+mVBJ
6jLv3f6NW7d4HcPzLJvVSxW1AJabsRzN8L28g/IA/868t/tBxG8Ubdh8z2b2
3CCQnJBix8YfyaD1sG63LOTrxZvbCRyHwehXx1VQXdGQOCNUdzsO2WXvGaH4
vej0DhLK2Stk4DjzaL0G+SnYeKiPjQT2s0M7yQgFmK8/4QrSE2zPq0P9S24m
0s9cbMXofIhjz6uTrN01F/kJPMej+uDbzVD8hvYHHbj+H7ih+k1rnSTwPZ69
QHVMvbd3EFC+tynh8I+Y86j4kwxaN7/auPhVhi0M/qwKEB5pMZrPoloUL+Mg
g+TbtW2cXQfbeRj+mOltCtfPDA8JheMLmPdz89QG2sx42v5C+o17NcnIc31S
2PyKpw3QbzboMOKT4ih2Pdwv5eJG/otH6lyC8IR9KQGKSwjo/p98Z8ZOUcTI
w0/Qee7Uheyrs7ah+JG9pVIkb2cg/c11K8LrsRjWW3+Tfg+1kElI3k0fj/Tj
xDwZ4Mvwk0rWT7sS2WmEfdH7HJyE5I+/usifOM4OxY37HEQ4on8DpRDH6uEw
c2gvVXuH1mP0gFbO7oHtIGqMAUQhEsnLm4tI7KfCfivs52S6Gb8ns/4PB6N6
aRYmLM7yKeQfz5/E1s/2Z/Ozdr+B4+iwrbceEnNfnbUheEq3q3SQntx1wgh+
j9F6BYDtPNjuA/lZBZs/Y9JGnIKCqh+J409wHAaOy2Duky0TcHGe2D8Dvzuy
gYtDwHEJOA85CbLncs4PzNT5vZXfTUK5bx2bR1qO/C2M3IrlWOyHhf63Nwhv
OeOXIlyfdzQQDvj3R6i+07mBSpzciOVInBcE7c+HmrgW98P6zBpNSE8fXf8/
cQ/3MA6uOnteBXRwLe6H9oQcZP+L+iBLYb8k9lMy42+/Ug3NRw8f5v9YvURx
TTcvmaD3G9nOxZPiOBJmfFKMG0kc1/DfOAev1ew6m9EN+WWfMoR/t9LDDNnT
PBHOYHFTI4HfC78nPvexHADlZY1mlNc4CtkPN+6S5+Jx8bjjecB2WGyXhfrd
QFkubwTHdeA4D/iezg3cvvif1rmBs6Niuyr2q2E/G87zgfakD6wcdwvH7bdC
fhMrq8DFi0M+XIBwToOAHIXjKnCcBV63eB0zfNbfCdXNS3Qz5eRQLJcy//vF
opvAeOcfGQaUdBbFg8UXkwpQQL1K6DG/dxeTGAeCea7OOwnF2N+HTlfm6pti
uwS2U2C7PbbjM/aOE48Rv5pzVgzjADef7YZygwZPnrNzYLvH/8SNXkHxLBeT
e/OxcFwDjnPAcQg4LgH7LbEfE37XwhIygllQE28SOP8b4pY+qCGx3Q7b8XAc
yy14Hj2C/PnfapTv3HNPCmD9xj5ZyG+rz+Kgbs3i6n0yfFUzHMmJc9cbwe8X
laN40BN7pQivjUJy4LSIVsg/bsxA62w/D+UvMnZKbLeE/OguW0/nSCO0/zhN
lIHyacoyFFfsPBSdfwrz2tB7/GXrTB74jvZBJ1vv+zjiZ8y5i89hRs6ZfRLh
F6p3SuE6WZWD4goWxrH+nHh2vQM2Tkilg8uTgvt4f28dC/ieXq3/E9fuqoD4
TvTZBgLnCzHz5FHK4tnfl+XiT+F50UeK7Gin0Hj0H6YC5zfEhcftY7yvoZ2d
fi70V71oIrGfFftdmfV6fYMsl1fC9M87IAf10S0aGvC7r4bA+pmux9qRvpoh
h+yqdyYoA8a+9aavHOTLxvfUAKpT+BvOv++Faoi3OOGWKlyXERF8ivH/lezG
ceoizo+P/frQXuTfTsL5Su4m8D7A+4KxE8+ubIXnx/df7VweCNTfP2Yjf9TW
XrwTLLdgOQbHqUL+P4DVz4ay9oMvLQTznvPSkF86sVGTy+Nl/HJHpsjB83rq
NDmA877hfbG9uDcwbiOsm6tHgeNzYb1cF304j0N/onocxfY9/4N3Gf2RtRcp
sv7QEY3IDmDYyOEFMPunaKII6q9Kk/QBzquBcuKSAihf+HmpQrkyWY0PVtP0
0XAcJy1g+WCvXQLbQZm/YeyiDD/M6Svh4sl/MHLEbQnkJ3rpyD90cgObv+mk
CuXso4UyFM5PgH6LNA3ID64Vy7H4qyXI3mNRB+Nd/Gm9CetR0B8Zz4Pj6Zum
AiC/CMtG8zb2H1c3DdoF+SyOwOomTi+D+39Db34+lnuxHIxxXyHO64G/BG5x
P/YTYr8hjlPBcSvw/D3L+sNPsXapKb11P5jxU9iiB6Dfq0hIwf3m0grnc2Ue
m8/s28bVs2DW0+w0Ha5OB/MZt3NMORxbHO8L5dZbWgCfg/hcxPn58HmTWByO
Z2zdiHdFHG4qXA/dRVxcIo5ThPY7HtKvfL6LIY7C33oTLj4KxaH14nMw973s
YvGdnFi8hHa0X1NMeZxfgnnvQevl4PfH3Wng9hUznAzfYOb9Cs1HGH5y+qaI
i+vGdkW4/s+2kh3076QeymcHq1i5wZWtw2jZzdjX1DzOoXhIy5kSyIcmXVSE
6/qrLFt39IouXH+nJwqRnG9oBO0NSlYKANqDN/1E+CY5VSTWQ7BeAs/LJ7rQ
XlcdKoT1lMZmykL+9q9F+j84D38TUL1SpsX9CAeVjTvdjnEJ6jg/ALT3h7D6
2w0WZ28jW+dMoRnaR+YYoO8bUSGGfMqyBcVpHWhm8dDt2bpBm1s4vFJmPNP7
aXJ1YZj3v7QKyW3D3shxedzMfPUp1ob8PmeDgLMTYrshw199yU4uTw/HVeI4
S4R/xtqrLxYTqE6vChy3t+vZ+jGNbB51WSWB5Xws98Pf17O4ZD9r4frkHUXx
ZNUBKsx6VNNsQfHDkiNSCscbQjv5oCYunxnLWcw49D/cztV1w3YqbLfCdgFs
J/if+pEy6P+ffEbxIOHLES4143fEfkgc94jjIHH+B8O/VoeqQHvlKg0Ur5vP
xokYHNSAcdiLdOQprGdgvQPO23NWf5JB9oXAk7pcHjTe13ifM98bHdpbp4dZ
z6m7kP3rhqUMhy8B+fJNZB/2VWHjQl+gfBCzEbJoXxSIOTsltlsy9+2+x+Z3
2hrA73opVIf7SXeBHAX3yUm2/nBAJsHYdQPkUd7Zl6uGnN0O2/GY+xwHIX/e
tEEoz912CFtvaxeLZxDZmx/PfHeEhQDtBz1Uz63DXwa957k2aG8j9VD8WX8j
CcXES20uRPtxmiWSV9xCxWwrg/aNHLInWUtQ3PFiJ4QfGhsth/TqSmRfs7JR
5PCB4b5qYP1QpazeMa4Lxof+nqmIzkuZPpxfFPtJ/8c+uBr53xb/QngEyc+U
oD3E1bqahDhxGXlcPCzk219Y/DNnhMNZuV9M4bqyzHcXrlcBeJ/gfYP5LOa7
0P8WKUHfXYL8tn1EDciePKYKyZfXEC54cT3yXyqe7q2fy4zLc2+Ee3FjugHA
5wg+V7Bdjvlfz2x5CuejwXMpsQXGO/i4qiD5qLjXr4v9vMx4nHdH+YkCKx7U
vzJkkb+Owe/B+djMenhkj+IjjGJk4Xl1ToDy47O/sXilr0wAtKuc+ksGMd9v
lgDt6fsfsvgBEXrwXMuMYPFzvRB+VJYVsnvJWbeSMB5jaTOJ8fCZ/RJwQQvu
16mGAorhU0OTGjgcCFynEp4nXmxd7MFIr4vmdXB4g8x6WDRdCvmqxgMhfJ7G
cNYfntDI+bHwe+L3xnot1nPhcz+z9eDkutB6fN3A1WPCfmFmPvR6hHC8ta7o
wfNV1CKE+C1NW1D8EFNXmpmfkQMQ3tKrnwIK8u1hBUi+caxBdStUWft3XBIb
J8/aP3PZ+nOJJtD/pXYN+Y/JPBZPKDSRq7fDvMfraUZcHgrOS4HPF/5j65dn
w3jReX1Z/JgrGuAvs0zl/sH5KZ7YQOJ1gtcNsx9cbqH4TUtTZH87FdCI5JDL
zQTmQ5gvYT0P633zmWnchPDDyQsNUP/8N1iA7BcJWtCuN28FK4+cRXGTamEo
T4EYoAXlOvsItv5crDKA8csPq9i6jj8Ixk/l9I2tz6XfReB4LZiXYYXqlTF2
H0avG/tSTGE7D7b7YPwfho+0uokAjktj1sm9Rin8ruKFnfA7r/zkw3Ng06tm
+P1TMlC8wLXRcijeOFUNYD8g9gvCc6etGepT05yaCVyfGsaBuvE53GyoL7eh
OMmlQ0yg/+3jMuTHZ/BuYBzVVjGHwwHn5xDK11G7Xgv93SmOjdAe4qbaW+ed
oZcWasL1ujqJ9QPMMoD8YUWsCPKDDYZidnyN4Xq9+g3ZQ7++RnLylgxU7672
qQ7Aflnsp/0vngaT9wL14R9Iv3OIVoJybYC1BnzvqeflUH3XVxRa9w8KUB6T
Cg/mV9za34niS93q0PfcQd9jaIz8tRpLTZG95HgxWc0wJOcTML7Y1kUM19OU
PiZQPpqg30bi85ppgzd2E0xcaYRLO4oTiEB11VPy60kYX+1tBuWZBQ0S7tyG
eR70Of4ZrssXSM9N+4vi34J78XzxOYvPXeY8qTXrxc/Cfhnsp8E4qxh3ldkX
w91YvOpglDfimtiI3s++mcTnGD7X8Hvg94J6Wm4xGY0cR1B/npDI4gL/Ukfx
YrMRXlbwT1WE7zEb4efJRkqRvDOzFem5Pk1wnYcMZutYbjSFcRoGy1jcjQmq
KL5Di5Wn5JvIy6uM3x/rMQfofP5pjc/pje9NVU8o7ic+Td5vfIL+/fmTTxuN
W2eQn3DL9uPrHfrWmqYeTuHiqvBzleoHz79At63P/flNntMI3OL+Z33+e18f
AOtl5SaTwVYLA9Xp33GL+/F74evFlmt450a1kDg+bFZoTEBQkzk4YimadFKb
zUeP06X3qbLo1BQh1+L+Hxlpi4hjamDBpc8FRzTlqCD9kb7H6Za/apz/VLp/
TbyLWGaSDnA/5Z4yobjXjr/7gbJTaamAMlxfQDAt7p+w/aO2C2EObFLMFZ6Q
Uiok4PnhTntz4Har7OPSMyzu3jRzMEJz3MC74VIwjr1uFHsf9suu1c29kSwj
pizHrncsXm0MZgCvlkdJClw7gu2/t25ZlJ+TCNh4fhOYR/QQb/yU/Laf6SES
JqurDJouAnGTvI9qjZMAhdxrfz7sofUi5yHiQ320gI3/2Ls6p+SB06RI9ws0
fcLZUbEPTYuOLbq3zUQLzLvsdH3UCXkuT3urlpq9f5U8+OXXMfjHSXnQEHw8
ayt9X9/mSQnBx+TB/EbFYgNDWg5ory9roH8PfruIjKF/D7/xzzfnoIhatLF0
+p9yfSBm3yOefa+gqVY2H/wl1Ekv+92KZ00Bvg7f9+foomPXUkVgjY+z/SZ9
Q5CseMLt9XJt0NCcNWCRv4Ba4PfC5npfAdiw+88BL9VuouNg3PuTut3Eud89
g0haLp400tQuTNJN3NmnoXbRUMCtI9XKx0Nf3vxNqrEt7se4s4L74usTD6SS
OJ96oWrqyBPHRUBUv6UgfIkicEjMnOxXLUv9Np9pH5jZQ2J7xJVFKxLtTvPA
94srT5X/7iSxviNYX6csoOnw1rvDB/2n/3C/1J5aK3Wwbo3S4FIVXM9EHRyb
GpY2XUcO5E2pj//WRwIsBts9+jFZlsI4ShX68XUkTTfGpb+43tcUZM5xiHvY
T0L5hBqlOsULKSuPh88N1fTAwyUWh3bQ9Jij32rW0XQ/S+GzdbFCavvIKZ+r
5fVAddqJmo80f9pJ/H0yn+ZPGO9u77grRgvKeUDTz6ouYGYluWbUtwdmD78S
HWdrx7z9z3u0XwzjK5bJUqb77SlPe0Xg9KFWqNylA3xsXAvS6wRAXBVw1iOq
hVAkpi6pvdFJeLL9tux1hfs0xWq+YuBf0+dSfJAMSOGfDlu0WUAF2gy5emeW
NjDfHX1LTUsObD/5LOHYZHWwotRZZoZO7zhRhp6mHkZs/XgZJfB+ltq+oPg2
4nl25vA/m1rJ/qWFwsRTbUTWoM/XJ3q0kptddxH+4wTU3CmyHl5ftYDonu93
yXgBtdo/9PL5b1rgfvQdJ8f+xSTInnd5ROMAYsnP8K7c1D8kruuefeaR5tyE
f8T1xd6H/Dc0kBjfJfPg6Y+jJghRfcdoc7Cn2N4lSkGROh7WYuae24u/ifsx
jdsT7HWTas4azhnfTIYUhp4si2kkDhwLGzw0WwuY/SjWsZogoFLlGo5mjpAC
Dw+5+65vzICNzE5nby1NkPiipdBBQR48TOj8brRLABoHzTxOyOmA6jzfnQ2e
MoBIS6sZM7WDnNLpNHLSCx6FccGg/9hLGaz029jzSJ0H5jfVXzGm5/mS9h2/
/fS8D70Y8MeR/s5+ldWuE+nvxnlA/Sb5Pw+wkVL92Rb3ZyllTTVVlHK4YK7V
1ITNckwcus7bhoMYV0KJmzdsT07SCT+o9a2DxPXE1uU9lN39lA82s+viDbtO
nNrtDrfQ8+jf32SAf1gboaIcPmAPPc+bL/ar0ExoI+65pH29f45Pqeq/NXkX
owos9kcd+urGp+5crNKyHqsKnrY8e366RhXcX+0TluLKBy3hv27JhaiCy/sv
DD90hE9FjO+4/KNOhko+u/pTvpYYiA/Z9Byg5VFZldJHHrQ8Kped5dJ/dyGZ
3RxKTl7zkFyQsuX6gcFmoHhy5OvDtRIqa/WFX1d/yoHZnXY8nXgNUDb8bcei
r3Jgw+tzqyffxX5nDXBQS7vP0RHy1Da2/x97XYz7+QJZ+j6/xKnkGfo5l4c9
VP9rIwAT2hxMxUHaYP2y0FD9TWLKqWT5mUE2Jtw+cN6Z2qbmK0fljCqaEu0t
R8V47d09yUYdGFWpak1yNwI2s1RqjBcocC3u14usbnGLklIFKQfvpWibA5X5
gumt0VIOF2gqu27a2HWUHXznett4HiXcH212jdYvME7U8B+flq+YJqGOrdD3
CemsIXA79tLy6afo9lLM0Sn/bXH/kQ3i7XduNBIDyuzaX49rJrf8XryD4UNz
g/OHMXzJ1PrTto/ZssD1+fwwmXtKYPqhk2/brA3BvtRmR10dBepGlxLZUFtH
Gs1uXfHbsIx4qbLBppumD/7uH8g3KiPyRh0MaT9kBuxipry0lpcCwZU/dwcM
ayex3aVl/kvFGedMgNRYPnZ2gJirP7FD7cCqh+sUqIqiMwc9hiqA+EetX/vT
/QmnVG8Mimsm1le6qF892UgYsv97nX0P/L/4PXavN/OfQ+u/S31ve1Z8kKN0
VkyfX063ldYzps2i+/G+w/vQ/97SvHEmOmBQ5DvbVcEC4Jh5zblFVcjhwjwd
MH4uM26ftY7D8ZP3mB8m79tNfs8vrNv1XQ4seNOg7f5WTJ2lLj//fIPWO9fc
vr0j0BAIRy8P2NUqAvNea934SMvxRktEP2tmd5Nlv229a1TNQbfZhf3yl3rn
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
PurjVCgG4z8JAU/DFMxWO3P5Cq0nmdQcL6l93qs3CeyE557S9IjLdobxP9tI
q48jnS717yIWflQ3OkLTM+ZOiRhL0/h/yuUSK57T//vkb/OGm+Y9ZOW1fLWt
X+RB5+SpdgurxNR7Uz+/Vbkm4GvkhAS9UnlQHROkPM2ih7TSSKiwtygmHJ2U
1vX8qCVjitzzbVYqAP6DdXdfDpIB5Ul+o8YEthKuO8MuhP9rIXdX7+gOoOdh
dL81lUfpeTE/68s7R89DpOaqw1/oeTn847xm/im2LopXEzH0inP5X5rWXbBk
2nuaPr0SWHodbybnj5PNqljVRExizwFj9lwA6rudVU+UkdqTnphN3v6ewOsS
r9Nr7DrZy64b+znls8/qaoEBn3L7yubLU3Lt1W/AUC1QtiBeI7ZMnsL9+Lq1
Z06bqtJ07TbZg09p+tqd5n/DTZ8R9hr2D412/SVt2HY+21+Wm5lYs7aRNF/e
9mXRt1pCnZ13vA70J9xfq0DT5rZXHAbSNI7L2dt+vtCxVgyWRp7dp5EqAp/c
Aip09AyBnP401SiaDqvZY7hB3xCkinMG3KflkCyqxCuclkuKWDnkDSuX2FqH
Ty3wUaBO7Hz98JeqEZf/4rjxZO48bzGY+XNj8NMXrSTGQxTNKdlVcY4HJGee
tGTQctPAjIRBqy/wAK5/l7pa98LKPfJgnoOTRnKnJjj9tmCY63/iS+32ZnwN
rZABNVmUrOF9CTjdb/2K035tpOn1mxMDxnYSx/SN/FbtNAU/L9ekXVsrodJL
MkVDNpsC0qZBa/FyCeW54tWQTfTv3acyTt2hf4+f8Sw5QmoKlNLfdtz6JQYL
fL+vzFeRgAH796xfMssUyC4xuB5apAb+pAQKH0yS43AnBveJf3E0V4HCLe43
+MdbHE3rhRc7wzoYPVHM8gnMN6RNuacPMriPERlTgqvkQYncS30Teh9zuLLh
Z6+evNpbn02c6e2p9FxEZZyeGRq01IDbt6uuHV6eHiOibAdYu7/M7SaG2Rj9
nASEoDDHT6dpVy8e2GbT7Nf2VkKgHJBucOlHN6GtuU7d29YU3Hj85sNUkQQM
qqp4S9L7VJgbO/EdvW89A1RODqDpl3nXLANpenb7sWtpik2kSfqEp/X96wlZ
dt9dwfsQvrcAyN2oSeOF95DzHXIn7J/2ihw47Vreqj5/yA89i6ybjz4mV3VM
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
Y/PMwLxM/3WDlaXUxLrnwQWhQmrP8BkmMU90Qesrj+bcY7juky5YvWjbkBBT
c+B1adDs9B1S7pzB5058a8lExRO9OFfqo62ztzmqgLKndhv6beKB+oYFKUdo
2sHj78mRNI3tyh4Ra96cvsqjbO77JGaltJEfHlp2LZXtIj6yLcH2J8dopw4f
0k0UWqpFBU4XALOTS8pvf6giTskUP2gYyua5nKoiemb0T+1n3EC6fwLq2mOr
iIrJm+arixpIrZT1+d6KyWRw8dNNzwT5ZN6xqrmHfiSTm3xa4gJv/yZP5/ja
frOtJaf2SymztCgkGthzCp9b+BzC51LM3oj2xrw/RM38x6d1BvXeh5/jMnXt
6FGWQopaIRNvW6kDor4NcYzS0gabjrVsC1YQgEEW5hdjaNp8h/fIEJr+FHa+
33vNMlKDeH1/W1oSsXrHrM9ngxXAylqZ+2/GyID6bcarPZYIqeII67tLpukC
fG7cYs+RCPacwOdGTG335V9b8okX6cVqTqIaclSJ39+2ZlOwqws8uP1BQt1z
1tW+niChdjak/s4vMgW4PkNQZPi6/cc7yBM/T75pvSWhJnYkrWDypR0WxAZU
0/Sl/o7lijQdFSV/bP9xIfVoWNczm2e6YImOaGRaqgGISFSJn1Umou67nJT/
QdNXp/9qdKTpbiOjWN07Emqub8/GyxmmoM+Xxgd9aNr1VtWvezTdOSJjs2Va
ChF5O8HGs72M1A+7tczVP5V4czBFLc+unGzuryU8cVaO0pr6ySf9oDoI7btz
VzRNu435/reZpgeIbT2Kaf7qOKZCaw/NX6FdltbTwn9+MLA/IwYX6tuOzpcK
qdCNhmcLwnXA82WFW1X74/pTOsDZwtOzmOa/IYLM4Nc0/3Wa1ZDT7ttN7o7S
iU/NkgPf3SzuS9xNwJR7gdlNc8VgfqqIb1tfRRxt0l1iP76BnNbe3DX8fRUx
1ufb8RB6Pebti9xbbsUHE0RJK789UQXLN9z8u43mWy4Fv1b1pfnYrULrhhIL
OSrYcWvA1CQ10LNmxVu9DBOwIf7VAt17YuDXsNSsL03LlP9zNKPpTKrLpWe6
CjAVn/Pet54HGrZaB8+JKyecfw2QKC2tJ3exfP8Jew5gu+Y31e4Pzv3E1Amv
HW9AhDHYNs1Z+ZqamOq4UmudKmMCzmrW9b8wUUyNzh/kEvNZCkbFOOSsc5Dl
8rj/ZT798GyZLJU4a80BaycJODT5VdICJ1lq7Y5r8koZEvDZ9FFDi58sha/D
9+Hr8H132eta/NB9bZvsQztovea56pGv93+ZgWkz/yg4r5RSSz1KA64kmYG+
8vtmDfmjBW4NKvL2qpEHHervdH3WdhApUfqTTW/xwBnjs05NKzuIxMSYPUnR
PCD8vW+gL/17w8K9cv3p3/vPmKn7NrKRPG52/OIdmzriy/i6/SutOslxV1tI
/4eyQOP9s4Z7v/hg0iufnT/y1MDG5umuiud0gO8j6pPwrYCrC1HQ7/0qai8P
2J73mbVtuQqIPP11wQ8/Hsi2eeHWL7udnCH+kWyW0EPISof+vP28ncR+knNV
VuKFL9vJhvMPnHJ8eogxF7QVBBnviYLTbc8TL5WR3upnZms+EVCV6b9HuuZo
A5/Nu5wcnGg9PNfZ4vaqQkLLffnDonm15PKp8WaG6wsJpTmar/XpVuQU+5fp
z2Kv82bvO+Civze0IJkUB/yq8r3xm6TWbbvT/YtPjbzVITesnxowNX34Y8Vj
E5CjeSx4RqqYzVvXBqGTqlyH6wqA/6g74rs0P3LYVbD4GM2P+HMXaqd7lRGP
4+z7eQrqSaxPrFtwoyE4S0LdeP12+vEFpmD2y+UPd2hLQMn9vd6GFvpA7mKq
RXWDEITYqtqCI4nkZv1dqe9UC8inPuaTFJ8mks45fY5uERWQVvO+rOD3vCXz
pZ9miS0KyLGWU53mB7QTYFG+TGioLEB26R9k1MbHp3OVvpL3vx94HWelBdIv
Ho7JjZQHNYs3Tc/y1AIBi1cG9n8qD+6NGDf5eUkP+aDTghjfJgDVzV/6nPrb
Q66cIJfi1S4AqecWOlSYy1CVK2d/6jghBNuaHaYfoq97s9nyciN93bWuAgdF
+jrvzboD55X2kFERgVO66euCWk8qVJrjetKaQBx8NODBVXnqhLvxl7mxmqB+
aubw33flqfe+c1RsaLqosyz5G03j6/B9+Dp8H74O34fzFj4GyVeN/tpDnt9a
dtr2k5Crr+rrPVNr/RshtbDKTLhpgB7onGU2Q5QjpD4Rmrueu+sBPE543CI3
bNH+rSCgPlU8bsjerAXmWH4NWn1aBPq2WQnyLxgA+549sgSt111bczRvNy3v
LpLV2bVqPx98vP1MMHq0Gni18NnCpS4m4Hmrp638bDFwyY/+NnmhCVAc9YQM
niEGA7eM9z+5qIQUnvmy+Pz8m8QoGfcze/YXEiXpD5cUutSS23+pmZq9lwVd
XddmJmxSAk07u+WfHW0jbZLuvUlY00n0XQkU5lXwQMyECZaT+6ly9QxBBN96
6lAp9YKVs7DcdZ2VA21ZuRDX7Y2MaDdq/qBAqc36vE13rwiEbFdrXrPeAHj0
FEV9Vqkn7+ZV97c5U0bwDwu0t7nVkzL2h6suPSkn5NS7ByeRpWTisSZNYc1b
Ii829ubAJ6XkOtOfzaH33xKaZ7w8vg5TBqO74kpfb+NR0x8dWbJikIgyMpiv
vVpTH7SlJQWeX2YGqOtZgzp0pNQtxW8aHktoPrYjLCZHk9bzjms5RtG/XxYe
+yirK6Xwdfg+3I+vc2Tve8I+R9V76R8jV3OwKEr2zdDrvXLmQFbufDJ7c6ka
LWc6Txupf5uWO69Wr0qJ+igDNv4pGnjnRAepu2er6HldM3E6PmKTsVUHwX/C
H+9c30wU8Tyjlk3oIMLYfnwd7sfXjYnQWCi+mUW0aLX5nHGoInO0x4pOyymC
yT/B9IZvstSZxcbWgX3kgKKBW3n/ZepA/Wfw7+u2cqBz3KIb4Jw6SNmXanKO
pp0iDfb0p2mnuR2juya1Eof8mo487egi+Dud59cYyoBjIyLL7RU7yEdtXzxu
tvUQDxXdrnY2tJNzr1mPz6nuIZ4pahbV1bSTbzUzNqTQv996Z3hJobGdvBo5
N/NutQK7P4yB9aTHNvKtClSfqc8+FTobg7XZBzu6WhSoG2krAzNpOunb9viG
YgXKOdA4t2GAMdio88JvDs033M492DN4vRYYF9fqOy5Ogcr6sLA+OM4IPOta
VfozygAYOLyQKckSUX0GJdX0WSEHhs4yPeP4tpPgTxqww3+3HDi3ME+gndVJ
FK1o0UvK7Sbn+ILB7hvkQc8D17FdHW1E7P5/8/VCW8k79+1COnPbCEUyfJDP
3lYydG7dzXsb2onf/obV01+0kne/C6ZPlTaTEyXTXtTaNxLdHdY182na+vSu
eIlDI5H9KHVttkIzaWT3c+F50EjgfYT3VXbuprOScjPA0709a+9eKYVxuorr
8j6dUWwhi15PrZ/oJaKG3nIY++qePpis3pRo5SXi6rzifnwd7sfXHTuz7+hr
PVNgN+TdVE0jCfX6+I95Vqqm4M2w3WsOaEmoSaN2f3wdIQY1a85MfHlSBuw0
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
yEC1Acq3Dsffqresap+ThmWp7nOd4nSQZPEzc/wkDWqr+u0jFOlEvTVpCN2g
XbVH6xca4ekiH9XTjJSNF1ZSmL/QyL0il9afaUYOCX4KVClnASXrpL4LoVMo
SQdIutBJ0IE5gi6QdICkC/1KW1i3HCHWA5/fiUG9bjMcl43xc4/j88tif+GV
a4u/n4f5EJ52aTgb3B528yBR73xUGsj3gHwvdIj3wJJ4L0g/BdJvYbvNg2Wl
d0fRWP9Nz9LXDi3km0yTh7I7OolbbzCxy9v0nTJwfKi2f4U5jusTfN02PZCH
gndDF65fYi743SbLg29qeV7/VSbmeW7/lrUfOLGO9Ff544gEDLfU9s284ST0
tzg/flPj8YdLCqB95vAHEQ4uqEB9pYpxjBy6Wc6LY1IP10Po5Ug9HKmXU5ap
tZvfp/73Xx/P71vT4+XK8/uELbnn2SX+b582r4zsmN83P8ZWvUZzCnZio9GW
u/E8sOhxupUmLr/J3Xxw2gCX3w6ruJ58Zk7kE8b768xVyw/ry0OiTuzh6BVM
rI3n8XHKUnlw97femadF6Kn15IHRonJQYxkTqyqcC2/kHkQv/FBctCXgB6Jx
zK3Vj3cQHUndEHjr4g9EKf/1Qd4swo4VJgC2i1ucJjLZ4PeTZ9PSOB5X07oR
nMgGMd/0u0yPCQBvsbbrxFNCvxEkAC8PvA81FGOHbwNnIwTNBKE7HxquCChC
yNgj08duXHB4hZqJJ68iyN5O2eN8lAtc7k5ve3OJCizRvn0MOTFodiszOn+a
Ct5BGi00DjFQWblTXfMMFVb6+GaeoYoBF8HXkHzOs1Ml2vtcPyMSIuxuI1d6
0bZHhb+Py31GbiySZy9170UPjbJ4jiVyYZzVsV/m89a/dNl4KIGNhnl2frvZ
WigBpxmenC9x+ee8Xc6aA7j880kjJOMGG2FnwfsTzuaYrNmCy2NWKzKy22eR
vtUp1BgDTthdg4gKfptFZovWrRlOwvmH0oygfCcaxOw9RdkfOYc8SvPte7yJ
Bp8KPjjl4e+jjTTV3xJ/H5dF2nXVv5CHEaHbpVIRzAU5HcfyRQpHym4xMcmA
sA9LQxhYVmEi94mDciCn/mtrAi7vd9wsKe3A5f2CSd/1qVcZC/nfHeQg1sVM
iv5ADg58jLVov8SAwqbvUVUxcrD6k0gp4wIDlt7f7V6YwgXmj30nD61mBQFC
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
JRwAEQ2jmw==
   "], {{
     {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXecVbXTxm/fvbt72XIpAgvSF5YioCBNsVEEBBSwYcEGYi9gAXsFREVF
7CBItYuKBawoir333nsvWND3+fKMn9/7x3xOTk4ySSbJJJnMzGl94NG7HZVK
JBI375hIpPU8o30icbpgQoNEYvNMIrG7Pr6fTCS667mbYIuAXQXtlP7aYiIx
vpBIvJRNJD6rTSRGKf5pxR+svB2FcFykJW9f4ZmQNs5jFB6jNO+nHbdFPpHo
JjhA325J+ZkTnlVK84PCZwpaq4wVel8uuFNwqPJdofhfUsZJWe1SrsPeyrtC
CEZH3AFJ14M6tBCejcr/k/K/qfd9Fb+/nncp7oaMcS7Tc6ngPIXf0XOS0o5X
+BvaoOcA4b8/wpT1mtK8KjhI6b4LnM0TrsvooMmB+naAYA+9t1XabgofqPBb
Cr8pOETvHVTnj/R8TvF3b6a0pWqbYEfVebDSvKtvraI+eynNPKW/XNBfcHyZ
ylHa85S2QYtEolL0PEhpdkr5OV512E7PiYIJCo/X970FbylPM8pXfKnq/lak
ySuci/j9aYvwjhRUCX7NuI8nQ389K+kPhcfq2xjBJPo87e+Mn5YKH0ZbhWdm
yuHpCl+hfIcrfJrC/fU8OMo6UHV6Ud9+Vr4pSae5S/FfaIz9prhj9F6i70dG
W95V+tp4byhaNM04TZnokBcwyLcRHMu4Er4TNW77q+1HpDy2jxf0U/x1gikK
76nnA23UnppE4vpq0UX4jqNMxW+jfAMEz6rM5hEPrb7PGE9b1eeDjPFUMDai
XGjbIsYtffevwqcwflIeGzynJTyeT4k5clja4eMUTomuk5Vnut43V3h3fTsV
mqotp+l5dcL9MjNoe3jG8Sco770K3yO4Ve/bZz2vrlR4Zcwnxvy7el4e4aXx
/VrlfU7hLQWzYp5dFX36jcr9WjBS71nhzGRdn91Fm65Kf73qt3/MM+rcXuPz
7xLRQ3Bb2nML/K1jnj2k8FSFR+nbuSn3+fnR73ernG76thB+oT7ZX9BI9F+k
uH8Vd47S/cW8EJyscAfVZYLCqxTuqOc1SnOiwpcofLFgnsI36fmP4i9QuJPC
1yp8Eu1T+PzA01J4/lH4anClnW910nwIOowVNNH71XpupXrepw5/XXku0/vn
RT9rBUeJJpfq2UywSANkoeC2Bm73nGj72Rq303JOt1XE/6v4GuGbqfIu0fse
Wc8xwn30bKf4W9LmH/AneMso0aWBvp2tuETW44xvQ/VsL6hX+q313KjnbMXP
hx6CqfAspW+W9VzeKtJAn3q15VfR/AN9O0Zx1zK3hP4f5gx8SM8XlH47fZvP
WIx40hyZNn1UrcQywTXwF/hzwngO1fPotONFpsQc4enBWNR77+hf6tlZddhL
SPYUVDDWMq7bOwqfpXBnwUrR/w7BG4rrq/ctAs8ZetZljOcg1e0vweqE4U/m
h55/JB3W8Nw0l/eD9+n9WJV/sJ5a5hJjFfee3icKHldfTVJ8Y+Z4veqd9Psi
xV+WdN6/Y+xA3/5630/QSumfUT32VbhZwvgXBM/5VW38RXCSwp8q7kw99xCM
V/7PUg4/LB74kOBH5Ts6Z5xjhec7vZ+edF3PSruNtLUg/lchSAmeEI6XFXeq
YEelSTPeFV7H3Eo6/DhzV88roYXSLIr+/DTyibSJ36AN/AteqjRLUl5jlyv8
LfxM4aUK/5r02sp6+F2E71f+cUmv71/Bv+EBjI2012jwlKiP04H/kqTTtIEP
RN4b9Pw0eOzRev9cz5f03EtwoWC6oKHSlKcdnp8wvacxLhVur4E2JOMyLk6b
3lcp/uGC01xLG4vmrR8L9yMFf7tDsFq0v1/QnwGt/MP1/Qj6TnhWR/hmhW+C
5yg8V+vHZYJlWe+JXkmanz/MugNNEx7vm2XMxwpKc4Pir0n6+5RIc4niH0sZ
53zGhKARezfV6XwRcx+9n5vwczPWypTTiM1satO+0a7jhOf6lGl1vMIfsAYp
vETht5MO9xQcKmgf+KeyhseaAo//UO9PFc2jqR80vCjttaaX0nSIuTkuZzyD
lPe8hPFQxzaiRSvBjaxJafOwB/Xt7liDWHuuibLOYDwn/bwj4fHNOL8p4T0A
e5Xz9b6xk+aboKMmcEbxP0a6+gr31YyYS2cGnj6KO1vh0xg3ee912H/spDr/
nvaeYRfFjxAMzjnfWZH30cDDev1Z4GBMQu+Lo1+2iHA3wXDBRYIWgrbC10bQ
QOV/ojIuYI4KLmONCNpfLdrOpu+S/j470myrNMeqnm8r3w6xxr6h8J3qoz0K
buMZec8Bxv9NteZLO8BX855LzKMPVMFKlVEQrb5OOb4HfRz13CbheQOeZknz
NfDQpkO0sf1ANH1e/fdRxjRZmTANoOfdsTdmL8U++a+0xytzcI3C6xRezJxV
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
xsUcQP5zj/BcV2s8h9Y7/5nlznOP4g5X+n9rLRd5IOHn6gjPqrDchLx9iq7D
mcG7aBM84Tn2MAo/WOrvD0aagcK5vQbGwRqrzyvNjEi3NOd2I6OBDisDz1cV
DvOdvTt7eGRG21Y4vDzrZ22Ekf8iB0a+u2/IhJ9W/BuKb6jwkRqHhyvcKO9z
2pUVjj9K8Qcpvpj3Pfmj5TF+lPcIvTfOOx/4Wgf+C2qM5+iMx3gxxjlxjSMe
XHwbnzZvg8fB68DTNurWVfR/Qn3ajnHNmBdsrnCrvJ/jRIe7VdaXyvuO+ueL
UoebCs+Z9X4nDN9rH7yXfC0jb4sI38DZJu/3LZV+Q4XrAM2QhdMuZOPwDOoC
3+iruvQpuC7JFqYz/dAy8IB/fdbfCXcT3b6DXyncudzthZ8/Gryds/MktWVA
qe8P7iv4eTL7q1rfA/Ftc83BFoJDa6yLsUWp7xCmik7vCu+2el+p7y0FHTT/
D6tx3EJkMeLZCxTePoAzLefZ5QmHU8yFtpqH2sMdoXyZcqcjzX7Vzr+D3ltp
nJ5Q6TKfUdrJSjsvbxw7Bp4rVN/xrLt6H4NsS/CH0v0uAtzEeUHxJWV+/gQf
1nrVU/CWyryrxmtzhcq7gT5XmlWiwzKdKd7X9/fK3dZ2im/L/FNb72/u9yPU
d4cLujE3lP4dpXtbMF649hb0U3wOeRt0UrkH6Yw7WjBE5d1fNL6NWafJClqV
Oh+XxX0Vfkb1f0hwq3B+qjxbKq4nZSnNEnQ3tK49r29F8GhM/lXvs8s/Cm8o
89q3maCBcC8Q/f5V/JWK36Oz9RVuFc2KtQ7fVKe1V7BQ3y9Q+2YJFipPF9Hp
bz3/EjRV3GaC98U7t6lxOUvR3Sh4/bgn6TXgt1hPbhW+WwSLhHOZ0i8VZBW/
s/r9C9W/IDhLdMt3dn3rBM30/TvuX1TGP6Xu0x8ba58teFN0+Xgzf+vBmpsz
PbrpebT64agK0+jZvPOVab6/1ySR+EzlbqX351XW5C5Ou7TgezLudtaoTb1L
fe+8V0vNGZX1tMbarapPU8W/r/rkVdcPy52O/uGug/xl1f62tcJvthOPFa6f
80x4rYnBu/+IvV+LGD/t9fwn6zW0MtbWq5SmJO/1d7S+V+St7wCU5633cKHw
lSpcnnS+qlh/n1G98qy7Kcu4+IZ85lGVVWD9U3hjqek5KGc8s2td3vNKM1Lw
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
5ZdVfx8u3nGL8F+FX7qi9z34wezAmY28GiNn489ScJDqc4fqs07pDxR8Xmb/
2KcJzyLxpn6i5VLVbUm9fQ1nxKf2UR/vAO9W3tOVd4HydSr6rv0m4b+iuc+A
/A/x0YJlcfgk/7Wp5Yx8+62p3zkv4o/wljgzfqrxMkrj+Od2PmOiQ4GPpnNU
/tmCO0vsr/gawUr6Quk3NDW+c/W9SZn/UTVHOMaofbsJ/tC3z0WrzwR7VFs/
g7ylotkHov/7je2P8d4S+4ecVLRfft75vypxo1WHN0TDnyrtw3LPGtcF/7e9
1d5B6FWwJuNPQ/GPsjaJLknR8Vn6KXxm4CfjX6V/W7j2Ei3eg+Yqe3WJ/4e7
psS+2ffkTF/hf2rw5N8jfOP/LKR9jQHdzP8duV/v26Kbgw+L2HuyB8WOm/II
sxf9UvWrFTxSYng44svwU6r6TVFfldf6G/E/i/f+oH7+WW3etdb/2nk09iLs
SZDtMIbOrLZN3G61Tre2xPZ32MA9rmreob5cXG1bgWVq67PsT1THU4JW/DN3
ub49UWL54QrlPa/W6cDJngL7zeGi+TBk93rfX313mvJ3Fk0bN/fd/OeK31pt
6C3YWzRrIFrNFY0uE7QV/b5Q2a+XGMfOgvUlfk6qcD3whTKdvT9jTGP8j0qf
Q54u2tcJNk34oMV2hf/n4j8AfF+LDgua2M97K+U7QPgmVNjeiyf/yIU34a+d
fNi8sF9/JfgWeqHEncFdW+Rv09n7eHywUJ9WZf4/DzRapDHziMp6qNzv64Ju
TUSD8c3M/+CRe4R/hFua2P8J9JzDmoIPpWrrrqDLwH3rg+WmH+/okHF/y70c
9ixvsd4SJ7p+n/f7k+rTL4Wjstr/fHxbcaOQtzfzHfC7er+71vIv9FkWqs5r
VMbqcutQfBTl1ij9QI3hQ9XmUtWzRNBS7WzaX3xBc3gzPe9n31RqXbd7lfee
5i4HXHxDVwedHL6je8N43Ff4lsNLa+wLu4HiVtW6TuhyjdPYGFtnXn9wa4+h
LxRfI362BP0w5BvwIMVfrzbvpzbeLNrVK36s1tbHyn2e+Ux1vFM8cWSN/cHu
JPgeOmo+fSpoozQ3Kd+LwvNpievwSYn9x76kc84MtePdgv2FfF1iH7nsi/Hn
x163RN+fEo71ARPLne547ChrfD7LllkWjBx4iej8ptK8UW5dbuxS0PfGXm9c
6JrulfX/iw9KOG73SEPcHhGPvuqouFdGt3yP0GtF7jEydGvhM0Pi3hldaXSm
0UFGXoEvOORy+IQgDbyI59Ds/3xZEOY7eun4I0DvfETUh/qOjDpQFmWPjTDp
sKtBR/2QUvtJOTdt21jsJNG3wQ6CeOwmsJUkHpvZtyIverk8B0WY9NhaYC+B
rv5uWevrQ6s9s/b5xLfRWetW3RjtRT8cXdzRUdbowEOYdu0W+Kk3OJAXoVOP
TQI+D5BhQit0LKqizeg571jufwYk1b6XNFgmC47lzgkdpwYO91DcKxoDLwvG
xn3dkeTV+w7ooShumMb9zoLpGh9fKN8uFda9+Kje/oIfFLTWnGsl6FlmP2Pt
ua/N+oneKv7Aj1J8K9Ynha9Gr1TwEGfbNvZ5O0Bwj87R1wjPj1tp3FfZpzi+
wZErk/bLhH1L4GOCMbIg+nt+PHeJcQjdCfOdsTAi4knHuJgX8eNinOylgban
4He1cQNrds5+urZEf0owGh7Z8X++eKH3sKD5lvzrodb/A9m9xv52pyn9kkr7
ax4mPvyweMIjmssPN7bfROwxkLO1i37ErgRZHPHYYjxb7zuJ4xjT2p8MFu7D
2b9Da8HrjXzuQT7AeQqdUp7o/zWq9/8k/kSfTs/Xm1tnc2Sd/Ulxl/mjcA5B
D7iZ9QH5vwH6xE8p7/p661Pvqn3HkaHj+DX6i9W+j63En5Ly9lHbjqiyn2p8
bCW5CBJcJFyPiP/9We3/qv2mPL8Kmpf54uUyhW9CdiU6PSk4XenvEp+8U7RZ
KbgVGin+Jc5EzX3mx7/s5qr/bnqf38zybHSgkG+fpbb8LT54q+J3EnyovKtE
lyOE53PtPw5THfdUH/wsfN9kfc7ljEub8b/+S87yikrRu0HB/3MbLRyjaiw7
eLnWfrvwiVavuE74+lGeJvgcU3gvwblVlpGhLwsf6xfzmmf/CGPvhi0q9l6r
IowtDLZd2LhiC7A48mJXgk499nvY7sGHsQdGxx57PuLxtYrNCrYr+LR5I9LA
08C9Q+BHtwIbDO56uE8kPbYDxPXI2v8sd8GEsX34Grmf5vnDFbZBgJdhc4Td
DDhpB7x32+DDY4K/YaPMc6/g/2MjzPc5lf6HyAs56xqRF1sSbJr3jPTYRXL/
x90fd4CEsZH8O+iD/R1+PvlfLH5pdgs+C2+EJwyM+fhffuzvJkQYPNhq0RfQ
eKui/0+zRH13asH38Jv+J65+HF3u/0HAD/kXIP9k7aY0XQv+B8gHmhvvC9YI
1mo8P4oQVeOkrfC1QU9Y6Y/Xt+MEWwrf6RqDxyFPRedB86JHU8tZJonPbY98
UfHP1lo3cyF8Qfh6qqzf9G1alf9lgD49/8S4ocz/2fhDfXRfznr3k1TOxHrr
i9+pOVLUWF8qGKS67FS0b5cPc17buTs9WXnHqLwWZf5fD//+4Z9AazXH5lTb
7veGTt7Ljy34/z4f19rHPfIdfKdyBt9cacZwbkQHQ+UOFqzSuJmC/FPx1yHz
Utybgi8b+s6b8rm3/U7fvsVHBPJ+zenHm9sn4+uay4MU3kdza3FH++CDj7D3
xIce54FXxPuOUZtSCg8RLQcLKss8n5nXyMmXCc/SDpYLHC18RzW3rG5L5etZ
Y3kfsrRUuf/p+2atdZH6qCt3qvH6d0qJ9aBY91gXkd3B179Vmj7CtTW6O2WW
w3HncU6J76t/Vl/8yhhAZ7vCZWxAlynvPdYtalPbDpat9uyncrQ2dO/nPjoj
9mBrxQ8n6vsKzkY522AwNjaNE3TEFX5RYyNVYV/0rKvc/SxQ/GGqVzfBEn2r
1RhrLjiygWWC8C3kilP0fq3qfo2gc4X/rY4u0Cz13UzB8eiBqw8OFZ7ZWgdu
qbWuF+Xyr5hfK/w/lt5qSy/BRuH9HbuEnOvLf2woB3ucTmp7f7VjL+XbNed7
bvQjy8p8x88ZEL0JdB+wsdq9YF0B9B/wI4Q/PHwl7SN6jEdmpPxrCv6PJ//u
LIUn6/1+9HdV75Hc/yBjLbWt3btKd47ynJ3zvzY5a4Gzs3DPQz9IcJbSDcZP
CffbOf/f4bqi8SBHHFzu+YbeF34XOHNdWut/ieBzYLXWmvsF36s9pwpOqff5
egAy2pzLZ20hjv85rhONy1XfMsFa9UWlYIcK0wc9u0EaYymlTxasc/auvr2D
nJu2qD+/R+bKuQVffOiq8Y9d9dWCat+xXYfureDXEusDoI/Pv3KgG/+s5f+n
73Nngu5XteUB5SETKOp7TcH/LjgOH5+ChpRV4z0R//rlP0f75G1r0l9t7Cfo
rv7cXnM9q3wZwTfYz+v5hdr0s/rlpyrfM30vXnCVwu/zn5suPt/wj8Op1fZx
jF3r0XoeVW1dH+4juIvgv4XcW/Dk34X4dEH/Dv/DyKWRSePnY4bqea/yftPV
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
RvCh3mvF5w9S+C6luV/vl2pOnCFcK8X8HtBzTaX/4YuN9HNBk/XR33+iv523
zWFG54crlfdQEXqjxuZK9HU5j7YVLdTfr6r+t+BfRPBElW0dngzaHls0nf+j
//1B20GlDsNnlnb0ffCr0f/rI+99av93BZ/L9kYPVe/nozMjOq1XPfqrHq/S
LkFT5b+81joLfyvvkH7Cq/oN1nO12rIbtFFbHlRZDwjWCNdFwnGh4FXF34Vu
IPfurF0qc2nOPGpDrf3mtFRfN8/7/pi7Ju6SuVPmHuHyMv8HhvfD0VtQHecq
7k2V/1pz25MvVv1uqLF+9oPsiVVGF7XrjbzvA8HL/9vRr0ae/a/y/qJzzoNN
rB/M/RD3ZzPaaS3nzkt5p6ruUwTDyq0nTT5k3DfV+65n0xxUW7/P2V7+iHLr
OHyt9yPr/d80wjtqHDbSfmWo+rGp+niAaP2Jyv6kqXXBL1S9N2gszWhqGh6o
5wGC5/O2c8WuAB75U9gT8N5d9doCWwVN8qqi9SEKil+rsvZDtyTvf6Kha3Go
6ra78I0TrFd8qpvOjq3d99hPf5ezbRR3N/wnifsbdPH45zPvd2BnhLwQ2YLa
8J7SD1Z//cYdSLV9xnEvwx0Hd0Bbqq03hvz9s7xl8/h2ukq0fqCx9Tw403Ge
2151fUHteL6Z9SzXoZ+AbUuJ70nIh7z/T+Vd29iy9iaxb2JP9ZD6+i9sZhTf
Qu2trfW9724d7Tf1N6WbozFycXP7UDi0r+gvWk/Us7Le98r/Kk2lcL+kOr8o
eKaj9XZKVE5O+LK19m1TUuH7Cu7SlubtU/lTvfeo9j0Md2rzmCeCWRqnS/K+
c2RsIRtDRoasLIlyWb3PSvuoT8Y3tV+GtS31rnaOF9TUW48nq/y/6v3ZSt9T
cSfI3Sz32chbxxUsg0XHAl0L/sf0itK2FLRgzya8e3X2N/YZrKPYW+0nnPui
C6Q6HknfCmc3fWuRsw+tWj3vUX2+Ry9Z6fZXHfdr6n8vncF5RvnaK90hBT/b
sK6IRscJvtO3y9S3W3JeUR12Ef1G1Po/6fOaux+rlefLvO1ZsGvhP1vo63OP
je06cfinvFR0fILzAedlpa9R/GilWdjBshJkI4+gxyvYWu24SnW8UvCQwtM7
+H/qbze1Ty50cdDDQccK/nNpwvxneqm/Tc2ZF5EWR93/NvbeHjsTfBaQ5/TN
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
bE0QXJC3H9psZ+8t2WMuT7i97DkZj8cGDZ7eUvXV/L5pS98fHdzJ90CHao9T
aOK5vzt3nZX20/yH9iG7b+Y7kH2UZiJnaaW5I+/v+HB+jv5U+DKFe4gPjWSv
o/Dt4sfTK/zfe85w4xX/fsL3S9wzcd+0Fz4uGjjPNNW/0NDfdlL5qUrjvV58
boGgt9KWVXlvzb4aPgu/xXa7UWPLicbovanqd61wzVXaj1XWR4LmbX3WnCp4
M+193zh8OZV5TzdVsLvC+ynPUJU7pNLn0L0UN0p8bnqVdcr31vt4PXtVWi52
Wyc/8WG3n577sh9X1fZXmmHsEQWNwy/hnvq2BD8bzU2LA0UrnOHsUeY7I/xN
cG/0our7giDZ1jYk2JLg7/q8KttLHKr3KrXxTO7hBQeIfhMauHxshfaLOsxQ
m86vsJ9B7ugvrPA9+E/CW0QOIZiFzk+Z41drHT1b+O7r4bFzbIyfOaLDxYIT
VfcVguWCfsgf2luX6BOlu0C4ZwkmskYobS/F76C6bFtr3+r4hBkWPArehl0z
ts7YLD8gGq4RHKD37Wvtw/IC9dHHWos+EkxCP6rS+2f20dgg8myK/B7ZL/qo
zRx3eMQPQx+umft7uJ4bNR4OE54nmltvfkqZzxj4baTPkvhtUP3nCA5oaHts
6tMK+5lq491f7a0S7T7q6j378bHGzVWeyyr8jv8b+A//a8Afxs8K91MbP1GZ
Hze3P5QLlGZWte9euWc5s9Qy0lG1nk/HBxCm34+Ld+wrT0GmUev/0o+u9Twk
HXPyaI3/p/Oez9zvckc8V3S+rN7zccuOnp+9RI8j8R9APtW/T5X1v3nvoG99
qxz3Hn4LFNcJ+b3CeezrSx3GR+blnGfRAa91PHEnRvwfDT1X84KxRftDxkf9
JZp3FZxPS237xbNEMCz2XMdX+9886DLjY3AfjYvxghaKrxU0r/b/K8/BtiLK
xPc1NMJP77Pqh0tLXe8Tqq0bfWyp9XyP0nOW0oysNT3JAz7+pcm3ZCPzmK2Y
VzXmZ+Din574NMBueji8t9TrLPq06NLOLLUvN/SJ8HN7SrV1dNDP4Uk6vuEL
l7TY/uJjCF9Dx6jf+yMDUJmdAHRHm3vPiQ4+uvgXKc0xRdfxCMGdzf3fGfy1
P9XZadDVJ1/jvNOsFc3+ij3sqch+VIcZpbbTxZ6Xe8W3RYezaV/CPmloJ35p
aDNtH5Lz/1TnRtux7YYOpO2U930gfsTPqPEaQJ7DKuxHifYx7v6PqbOOt7Lo
2vA+yTln7312HU6DNCcAJSVEEQMLCxQVlRATA1sUu1tesPW1sTGxW18bGwMV
xQYDUez67ot78fP7Y/bMM3tyzTzzzKxZ617/afMz/pMp9/l1+adUuO5flfcX
uSNzHjPq3lR5L+7l7wPp+F4go4BMwskRxx4JnzTIe4Plj+wY9heOarFcFzJd
O+l93VNlT5MrQSax0fr2i5I+w3H++yvOgfAmG8FEUto7cpaJei1v/iz7Wu4p
4KOvpff/VuaI1ojd8tavyOm/DXUW66W4O6psGwj7puDpf6f6vpVrYN5UWBed
/25W2k/Vjk/kpoomtRXWV68UzSvkhmk8v9E4fi33p/q0kcp/RWlPUv1Nokej
XHeVMUr/b9BqPsNjer+WhS4gWArwGDYSTR7U3B6XN98hAz8yb129r9D1k6tX
/FnwvuRubbQ+BDyM/ZX3OdXRtdqYCXfLX5q2zuLZbb4TOV00mcK3t93zEF1C
dEHReVhR5fsKnleo7Bf13yjuRvolEvdqbBZWWz+ffmPP6UUwd+T2SLnMyXnT
BR4uvFzuj4q0J/lN9JnFGlHuOQiO/WyV35U7aPTw9X+JXJ9Gr7Xok7HOdswa
n/foCvMe8OE/4M+M8LZtljFcLFr3QU5b7tgKn9vB2khWOK650m0AH5r1DRz4
o6IcwtQ3K9b2VKXfZ97lhXrfX0Y+TP28p9qyhMhz/ljl9bCiwvi+rIvYsx2p
7/RPom0jerDNtsGOjRLmR3ely+j5Z3Cw5CorXEZzrKvcyRD3hOj2m8rojb4N
3wrR/gn5u6APpm/sP5o3L9T53IgubpXy3Ks2Pgt+AfcCaueqKrexptFnSnRl
flO7f0VHQmkm5d1HxhGHrS5sRtF37E7xjEze9tXGCgHPA3w7sD7QByUOXA90
K5iP6LdWq650o+c0OCTgi4AfklS7quQWqN523o++ntvgGaCfBw4GWBpgboC1
8YvS/NxqrI5j9C4dLbcDOJx6p6ap71tqvBfov3tbred3subYyqz5d+A8gP8A
1sMEPe9YbUwI9Mzw+X/pWqof7AfKVBk3txonYzw8gRpjcIC/0a3KWBBPaLM/
TvFHDtAYVJuPBz8PLAt8sCpYb8C5YM1p1li8oXHq3s33Kr2rfC/UVzRsrfbz
D2rzcPVlC7V7Lfg5SeefWG1MhTZ4UKJhU5txEcCQwL4TeBGLVPZbPYxtsa32
+T1rja2AbOq5PT1H39KcOaur146vlLe/8nZSG79Xuj+Cj8I8XLvKc5i1Dd0m
5uecrl4r99U4baK6N5Z7D3wvMC7klsBfhd8s9xHygdqDbgqvsr9xD0dUWmft
XJVzo8rpV2Xsmpoq49d829u6KKNFj4WV1i1Br+QUZAF6es7BG0WPCuwP1gls
IWAHYSl3lVW+l96ti8rWuAxQ3d+qnhFV5usvqDQuNfgS77POKc9IPU9QeL0q
67J9UW+sQHACL6s0JuOY+EaTlu/0dYpfX+HxCl+guboBZVT4Hm80+0eV87No
OYo9M3sbpd9Y4WkKP6bwRuxDFR6v9g2pdv7bK41xDL7xyuFqr+i6YrgxqbpX
Ga9peKVpCL4N/L03Wt1O9nzo6rEPvAVdzmbvh9epNJ8F2xHgRyJzAC/iCq1/
Wym8dbFlEIi/iKNYpXF8+I+84KDDJ8EmH7b5sDV9gPJOrPAzfS/IbdLXabeI
9B0KbhfP0PNzucsrjc1JWxaE/MOmUS90hsYLkVurMC3vVdsa037eHRmbJtN7
zZ5pXHyXHyn4GXs31ZVOT947Cw6D87ugyWNGfvTAiVususa2GCOeusdEe2gD
uBfgYmCbenLOdIG+E9s9p/pnXT/lYTdwSs7p0L1k/Paq8D3gnhGmHDCteQZn
A3vXYHhj14/5sXOFecXMmV0ivHuF05CX/4nfXXVNKvN/xK+2+11hvVHSTo4y
Z+SsQzhFz8MqPW+YM+Rj3sGjRp+PcUS3lDlJPGVPiXJIc0ulnwmDPb57hNGV
R38effk+Bdu3HxpzZOeYJ1tV2s48/A3m9t5Bkz0q/B5wR8x7MS36tVfQbnX/
ypyOcjJZ2/vcT88HFbwvXmPDD//vYqedGunBId8jyqdt7TFfaQtnEs4j4Jrv
E2H4vyci0wYvquB6SAe/aTUPq9i2DgjDy9qj0jzPXzgzNtsGG5j/4PZjh+0P
0Xl0k+UPuVftk/Y96xoeHnHwCZHLW8Sdg8JlecvCoItMWZQD9tevatu93Huq
/282+I5zYMpyPtTNXSdYYDMi/SFaf1/W/924K0pbfhTbO6OG6gyFnuwg29ji
3IAs4uxq32lvl/SZiLM954rT9T1dpvRfyf2BPmje34lnG3yPXSy3TLT6qmAb
L+81OPy3yj2cc32173aP0/fnC70zu+Z8j4teOPfC6LOuijC8hCOCn3BUte9e
FlTZxt9hIQ/AmQrZBM5sM5E56eu1gXFgPOA/PwQPpGD5y3dEt7flBsInCkww
ZAe49927ybIN0P6mkClY2WrZcuSsLkjYng541JnBop1ocK/o1qz/mlK2t3N6
ne/PV4luSzjn6bmT/ks1G/+L8b9Z68pI+beqDbfpvT48/a8ONj72A29v83/o
R//dYJ//56rNR9JepZnf5nToUU9RGZPlOqeMYUdbaC96POjzoEu4Umvtrknb
/5mmtHsgd8fag+yH0v8MBrbC+zZZn65Jrm+F/7s4bRniSXI1yDOkbBOxY8rP
U5GpUluOkDtL4cVtxuTD1uADzbY3CEb0uwXTlfEbozQ/ib69UtYpqk05PWWD
kQVWFnxRfHinnK3B0OJ8zXmbZ87jswuO2yzh7+fNsWbxbUQng+/jkVnLgkEr
znrsuZBP406Q+0CekVlhz4Uczo957xdI0yX2X+zLzg1ZBOQQajR/K1OWa8FO
AXIwyMDwPb8t1q+/23z/wj3Mn22+n+Ke6q8233lx94Vcww9R5q3am/2hd+P3
2rhPivZsxV5Pz69o3JtVV5Pc1oq7gL2t3smpOcvyINOCbMtU0WRKwXk4d3Pm
hs/DfuL6Sn9Hf2k2z/rFZsvsP1zlPTVY68iqPyl6TtF/k5uN/XGxBqFM7Xp/
oOXM0PnmG4GsWUW7n5Hl6odMUrn3RMjLsy/iLv3Z4KnBA+Ud513fQf2dqPY/
qf3WgS3WSURHcoXquFlxpw60/Ay2H34sMx7Fu82+Szq4h2VzsOGGnh7yTOgA
JvX8ncp4WHkuaTJmIusQ8rHc8YCHiYzOnIKxQ8Hbxt9d/d1C6TZv8F0ad8rD
WowpOkh1/tFkjFnkfri74v4UHTR0tdA5+7XJd+DomB+f9LcNuZ/9Gq2v/nmZ
adNX7mP2ohq757WffS5jWcCf8x7vi0X/S1ota3SO8p0tN07uM+SQ5OorjD28
dt64cMhQbNNovKFLgq7I574Ln0rtOFpuqc4Of2ot+hC8oQrLQzLnvop5z94A
XIGvIpyJeOYevBPuz/kPvA/s1xzAfUreNnJ4xm4YduROStiG3rhIc7radVqj
5YK4l+dOfrWcjmjcS+4O5r/a9Z3mT4dal7V95H1dNL+n2X0Ea4YyM8W2Uwce
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
Yy2inh+jLr7lD0Y5m9W7n/Tx1Hivx3Xw+8A7dk2JdWW+q/KdAv24K/pySbQT
et+oOtevdh/AvKWdI+Tfq/fy2Grnn1xwfvQuwLsB9wZ6o0f5q8L5dqf7NurC
NjU2qrFdjUzQPQV/yy4sOIy8EPsxdHGRDZ6i97Icnc++lgcGqx2ZYO5nllYZ
U/JevUMLCz4PsdYtjPUNeYePqyy7+5+Cy0TOGN7nkirL8ZKWPI9VWLb3oyrL
Srwa8ZTDe4wNxb+Sto9N+9FxOxHcpyrrgYEJfofia5N+7+6Id20vtX1PuXv6
Wp/xnyrrMi7u5Xhs10OnynbTakqMBXR9pKP1+hjnF+KdWrPWLohx5J4aG8no
yzBnf415y3t9f7xf/HdfrKvDGmzj7eco875Ig00t+sd+DP/PCN/BOV1pRsr9
kbJtrjmiyTdJ8z4O5J1VmkfldtD/u8ofrbSfKb623elIgy12bLIj287/G0Ua
1kpkGb/Xf5/rLH2q3vdPBtmuFDauuC9Ajh18euR8ivK2/YcdE2xsUs5zebdr
RbRts2ZjgVEm/1FfM3ysOtsmpE30Bbv13yaN3wZ+WqHUetNbFmxr42/4e0nr
mfLdG1vwtw/+Gbg+8NAGaW4MbHW6ItFwifwP5TYvuExw2EjzgeK6VHgfSp3s
RefqPZ1RZ7pM11jPARctZ3u2m7IGqo+XVLg9yMENUJqE/v8na51k9PfQ3Xsl
b5uI2EPcT2lmq5zPcnZg+oPbj7zleurv1DLzfZC7nJUwP2nd4DUVx71iosh2
aYelbJsWeTJ4F1uU2+8fYewaYScJ20ZvyX+zyTymwa0+x7B/Qi+a/RPr1WZp
lzk0/lt91lE5HfX/0X3dDvZT7AnYD3QcGvaTtLfZMmf6Q48FFS5jWcJ7hwGx
1v2uObMsaXv2y2N+wpdjvmwSc2Y4bUh7br2RN53hUV3UwXmQTx7c7LzLo6yv
5O4oM30pCzkQ5OmgA3ydB7hDqzfthgfdoCH2hsC0xfZQ91b7yPDRhi+jzB6K
/zLt/7DfhT0x7IvR162iv9u0eQ6uVWE8VPb37O1vqPXdOM/zav2M7b0uosO3
Wd+zNyOLlvT7h64DOg8rlPdV9fOfpPUR8vEf90fotZMP2YNrc5YRXIOFTxgZ
p+roB+GuDa6Pe30wWitSxml9Tv3qV+32YDuXuroU2zYB68lTiu6qNDtqfpzB
flF9vKzNejcTFLeD3OUa+++0N7tC/rtpY/ixR4LXt1Oz90fYBDxc+9cNFX9o
B+sD/Zi0jspljS6P57OaXDf1Vqa9nrFHuitl/VV0V/dWnXvJrV1tXUzi0a//
OeohTNspB9sKI6Mv4O7DU2QP96XGqDxlekLnz9KmCeFP5W9WsNzNQGzzib7F
OcexXmBrmPUD/doe3Mv1d3jHAV5TlkQ8aTeL9Qr97k9iHWAuj4l141zVe4fc
VQlj2pMfXPstRYfN0WHKe33aPMoZUmEdcXTXsZlNObwfU5R2slxdg9ehrWJt
vLDe6xdzCztJ6Me/qHq7VRt7AFvJnNWwMcV5rQIMX/AGa43fhQ1GsLzGtHp+
nFJmvyjC2E3lmTlD+aRPFtk2U2mE1wuaMx+gd3nM4Sfyng+P521/k3hwg7H/
WBrtrIj5yriUR5g0ryaNPYHOBDwt+F/wtZB/2S7C2ITBNgw2d8ArPjdrmiNv
jsw68ur79rQ9cv57RWkukH+e3FO1DoNvvO4IrddKN2SE9WtmZ61jU9fR2LuE
wUjCbiH3DsjOEUZ+7pAa/0c89g0JP95uGzvgaNKOUp13jqx1WdRDm2hDN+0h
Z3bRN7vB6S4KOXvsVmK/EhzR27Q/uTxrGdNf1J8rFP5Z/o09bZsHuzzg01bm
PHew73NxlHXfEON5LlvXz5dE+adwhpK7Wu3doJPmguKvUvu3z9lmJ/Y6sc+D
nR7OJjv09TmWM+x0veNXKs2Vet5Y+4NZ6tdo+aPUlgO7+f/9Wz1PadNVyEjI
Xa/0P2gu3Q0/QmvCbyqzh/p/C/gRotfPouPtWcddk/deGzwP9tv0e578G+Te
rvJejrRbqs0za10H/52r79QDWqd+XteYI7fGXh27yNhHBsMTf0aED+YOP+t7
zMNqjVvN86kar8Y+jpsywtiIk+UX93Y7aAO4U+zL2ZPTXmhJW3fLGH8f7H1k
W9A1ABf91SbToELjuLLJeP38d0/WOgmkXSU6dOnouGkjjNG/h/zT1JcFfEdY
+xR3dp3vsujfzdHHGRmf6zjTQWfqoNyfBzjv76LJN2sbd3aPodaLoAzuwrBZ
hj0zdBUPaPX4VeWMYfxO6M/ivx3hPjXWNx2O3KLcbgpvWGH9bGRfkHuZGmH0
tcEJmBph8k2MvOC7752znN4uEQ/fif94HlZhvfDJUSb1rJYTSVhvDP0xdNCu
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
Rf9jNJdvqTduerJgm+XIJGCXm/Bv6u8TmusfKN3j8p9BVqzW+bG//EHwXmay
TiuuLmk+FLbQsRcPdjH48OAXv6Z+vyp3mfqRyVkufyuVf6qeG2ps+7V3i+2p
w+ei/oZowwmqu1VxLwy1/XDsiGNPfFY39wEs+Wp9R8bKf7vM/taxR/o84/tg
7kax7UP8yUrzuer5TG5eD8eNjfgv1cYv5D5l7uvMcqP+v0pr2zqx/8F2JPTB
xnvHcIQLfI80Xumc+wy2CvQBv4R9EvnBOWxIO0w5yH2QPx88bfTbEJnEBiC8
bWz53Zt3mWDzvqc2DRcd1s75nMx5GZy7r6qt04I82gmiZbvCGyi+Lefwlapr
WFfruJCuv8LryPXO2T8S25EKb9pkf4jy7tZq/m/nnHmyYPbDA+Rs3RZlgufP
//AJb2rzOghO1Oai8zc5z7lvYm3kP2jBvEE3d7loO6vGbfg873jmEnpduZx1
u+7PO/xqwvp4mZgzxOUjHr0N5hIYgsRnI++otMPgvN2Xd16wkY/Oe77DFx2n
Np8omrbqefs2+9iXh0cArwB7nWu1ur/wGN5tMe23VHidGs87eK0nK/4kueV9
zaeBVwUfCzxacGnRp+OO4OGCeebXqm3XpG3DHf/qCM+JMJhg4DteHBiMF0UY
PZeb5N+cNrbVoc3G9kR3rz7eYd5BymSvjDzSbWnjKIGhdHiRn8FvI44w4vSU
d0uUeVujw+jmsNemHM4FaZVdXbC9NrBEqZe90Jr2IR87oMm2UJEDuSptXWh0
SS6MMH3sIzqkCpahQE/kqkhzQtp5OaeAVQlu6Zp6Lo0+zg3dasrhG3ZR0GRN
HegNrcF+ol+kh6ZjgrZz17ShyGHi5xX7P2hOG2kPeiunFywvgqzIg3nTlrXx
aP1/jFyq2DrohNFD/2Wg5obe25/k1+t5tlxrmf3/pI33uzjj/ORtiPj6yE88
sjZHq22z0tbtOlb+cWnrcH2h+ON5LjKtCCPTQtpjI/1DzX6eWWTMSDBSGyPt
vMgLxhXYW+BuPdbmeGjeVuS5dSYymTE/mT+XVjieucGcYK6Qdn7MK+i8NXuD
tO01nJd2mHM3c4axfixhml4b9Kf9N/6/dt0YbaA8ygWn6/poJ7LWtJVncLVG
qI/Dm13WLZGONMjgYq8a/b5e6HIiV6R1+oq047Fh/ZfWipFpzxFsBK2n8GEp
y9cgZ4OcD/I+hJG36ahxry9YF39E2ukf5/4OOai0dds2bfZ/xCM7u4nCWtpW
26vZJm37RP9JOfwy52n5W8m9pvLHp431eHaZ820aeWkTZWIj63T5p8kNletS
aX+tyn/bStyZ8kfLrVDe8W0OH5ywDXZs2M9HrkP+Bmnjpo6KMLiF47Rezda8
3Thte4v42FzEbcSYci7lrhzZj3K3Z1jQh7j6iB+ruK3T1mM9IeX+gJdyU5Hr
pt4TVM4JTa4PGTXGYozSd0o6L1hy+GMjDM22DRpi32gLhXNFtoO0OXThziLl
eHjL2ETaMv1v3JaRfgb0SBvzsET+IXJfcvWqca3IGzv08rTnyvUxj66IuXRV
xusecxiZNOpFXmujCucpTniOM9cv7uB8l0fe6ogn73Hxnt5Z5nZTFnJpyBeN
oc0J65lun7YeKHgszA0wcLCnSvy8lG0TQRPm1CkdLQ+XK/d/5F+jw7pdlLNV
0JP5Bk4F6ZGd6xD1lqc9vxlL8Cb4vzbKzOcjnPd4UNYvGotv2zxXTwj5tc2C
JmDHHhd9ZC1k/empfE8hO15vvObz2SeozJOV/k3F9RF9f0n5ncK/UjT8mftB
udtVTudKh8HyXJHxf8SDb7kqZXypU9OO/5szb97nW8606Nugd4OuEBgfYH3w
zUEXAD0f5CrRISI8nfUWnjxnzGrzYzgbcy5+nP1zwbJJ3EMSD+8I/8cI35m3
3jK6yueqjLerrcPcJeyBL1DeD1IOwx8GkwbcFLDq9mpzO2hDQ73zrymLMsDA
RIeJNOgowS+iXtp4UMZ04A5xix5uP32GxrT584R1FJanvEZe1WS9J/StXq53
/PgOphF6VcXyL6wzrc4KXgJ6f2CnXFqwnh7nna+G6H+dB74ZrHcLO1xK85LK
n5C0Li56uPjPy+1ZbrwYMHjAvts5aT1VdEyfjHhwVzjbYJ8AXBrOOuD3EPdf
0efKNj+Dz/1clElbehV8Zsdu+yPEJ5z2ijaXlcobI5j/oD9YVPMSbvPumjf/
0/MZDfbB67i61XyYN0Xni0XLD6vNK+lS7+c1c4s41i3Sv5s1jeDBkBeaYdOd
8e2jdjYUHF6DQ/Re9Ldz3vhE0GZfvTu9m92OrN75Huzlio0jip3NA8rcX+K/
1ju4Q4PzQc9eMS7EP9vm9Z21HZwt+nu/5vl+afefuXcdY5v2uXL19yfWGXjY
hOEh458T4fERJu1VRZYXRFaQ7wzfHr4xfPeJB7sJuwkXpL3nOSDtulpi73F+
fK/vjDzsE8AgJR7szdbI2yL/m2anoUziZkeZ8AxPTFs3kb0m+wn2QrTzsGhz
x4zDP5UbZ509BPsHcCDAg+Dug30Hedl7lMo/NO3vA/sGwj8k3GbyTkkYu/SI
CN8QYfqSFe0zBevnnhE0WRF5j4x+HdboMHnB9SU9OHs7pd0esCnQwaRf8PO/
bHNZlAMG8ilpr2/sObDdhd2uzxT+PGWZzBOb/Ixu0VL5n8i9qvJ7ZBz+rMzf
BXBowTdA55J1YFHCawHPHVhvsg4TTzngkYFFBiYZYXA9kSf9NOolbmnURdvQ
+T8+YQwDwuj+g1e9NMopinnIO0hbKQe82Z4Z9wUdK9Z7+suaDz1OCpqsE+G1
gx4nRxrwngkj50z8qUErvgmEKY89C3uXoTFfoS37ImygQU++O7yLvKu8n7Tr
s+gj/68bacjPfgwb1qdFmeyFkGk7LcK3axxHy62q9j6L95Fz6ITYh/WEjwTO
f531IPjujotvE9/hcRE3VnNgqzbvvxojjrNOJvQn+Bac0OCydozv4fj4FtDe
ifE9HdJsOfVpKe9R8Dl/YacM21zY5OoddrrK1N8b4M/L7ZqyvjJloh+dU72d
q11Xv4KxKcDW613wM3Z999Z/+6Rss2kYPLF4TiYtY/KZ6mpXe9vkjtJzW73t
c87kW9HB+Z+Czq3Ox/Pfmtt/ye2k8DWqZ0LKstv0b5eYb7R1YoTXbXaf94z5
Rxrel58yLuPRDi4Pme8JUT720NYCV7DCbbm2wvSYGjRZqfa+wX6l2hjXYErv
zTk3ZZvsTyrNsVV+/kB5/5tymHhsYVzJe1dlHjF59bondmt2OtI01bkcyiDd
FXwnKoy5je0SMOK6an52yRtjGXeJ3IHYJqh0+DK15/KU8xKPf2WE17QJbL+L
mAdyi0v8HrCP411AD273lPFd4P0SJg55p47tpsPkoAk23r7NmMbMKXTWSIvO
3U3qy41yk8jfYp+y1o55Ap4J+8dNom725senvD9n7PZKWQ8I2R3qezP8KTEW
yPUQfivm8OSIx85L34JlBcHvxhYsdmCRdXq4wXJNYOmBGcT6f6Hm84Rmy/VP
VPzd8t9V/EVt/o9ncBDmp/wNuqWD5/oRatv+yned+n+n/ivP23bLA5Gf8tAR
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
Ra/pyCD0/bfP+OicVvXT/+r/yaLllxrnGzO+Ez6nyTrptHuKxvWajHGb3xC9
v6hxWQ0ZzyXOHZw/GiKMnS3mLvN2mdrQWXV3qve3CJuL2FtE1hHbA3smvO9g
/8EZFn9qhBvrrbezV+xj2M+wF7ocObuM9ZC27GH9HGwB/az2fp+3TR/OmNx7
71Nuf1KEN9XcOlZ03mSEy9gnytmqh8vCztD6/b0P+nxtvRMqb1rG53HauyLa
DA9lU7mPkM1u9jPhGaLbN/C59Lyr3vuJcneozGr1Y5b80YrfEXm6VstnJ9ss
UzBBNF+oNe1apTsx4qvaLBcyDj4fdFGbHtU6sKPCv+n9Okd02CXjfQZ6UcTD
l14umvdROe31rgtZA+R1kYXbgXUI/jD6UH2c/1C9a4fItYguhytuVF/vv+/X
WL+ise6lNPlq++gRbCjaHaa0o+QvVV3nKM8fdXa/11k3gvXj4AbrH5CvZ+Td
NWPdLXg+taLzj+hcYr+vs/uJfaTzVVddxvautsm4PPQsqvLG4YI/9qHSf4cd
AbkLengd6cw6PEzvjOj4hvxj+vs9HSf/XPWje8Y8mY+V92y1+ec6343vGu2Z
3uTxZS+0rvIMVv3faQ7cPchyG3cN8neO713npNN+H/NhucblXDDf9X43K902
4DmAjay2jNR8WFvv2d8q4686r7Nb6P3tyhm1v9vxU53pQhu7RTvfq3YaZGtK
Ml6D+UbNQh623unAdL8k47tIzuOsXYuRJUYOOeP/PlLfl8idoPBEtfNmbK6o
nRfWek/Kd/3zJvt8739Qm1fKXdbHeY7P+GyLLujsjG0vEndcxI+osp1gbASz
VrBXAweDem6SO1XhsxtcFul/wnZTzmWco7HoqXouqPXejTLZp4Fl+J+M65uo
vcEucvvU+5n4TTpYXmxOxjJj5D+/1nfj+Mikc0c+vod1cZFJ3qGHn5FRxn4y
NpyxCb255vEJms+byW/pY1uzZ2WMnUx5nG3ATbwg47sVaHNjg5+X57y/pM3E
gY8HTt5FtaYv+ybwlfHZO5Gf/1efhdWfG+qdv0jv3/dqw85g94kmo/UO3qj/
ftG36kjOZ8hSFjus5Xq1fv1RCpdzBy3/OLlKhY+NcAv8B/kHlayGQk5cqf9m
KMz1xxUR/ltlXl7sNH8pfK3CRyhcCt9Az4covHPRv+Xewr2D3MEK71TkPNRx
IWfSYsdrCBN3FTueel/HXmLG8uG3KP54xd+u9CfJP1FOw7jazvMxYev55mKH
K+T/2WQbh8jS3Kw19g35L3cw1so80ebkjMugrD1U5kz0/OV6QNtihzvAxy7x
fzciyxRt6AuPtMT9gla3Kf4EhecrzchS0/RmhW8MOuvTlVha7HIoHxrPiryJ
jNf1wWrrqrUsB0+fcQdH33trLd1Z8+D+jO9muKNBbgj9Evhl8MoOabJ9+W7q
40MZx29U7n0cezj2b8trXMaLIu5r8rfk26L0R2t/+6P2HKfnzfeC//V9mf2b
I7wswtiGwL8l4rFJfmvGduDvijKx8dpHHb2t1nsc5HEW6L8ByJWprmXxPFRj
8XPOa802en9O1/NY+btrDZgn4lyh+Gv1XtQ0OMz+iOcrM96jsVdDvrdrJ8uf
sf9gDfs21rGtWl3PvdBYY/5W0AJ+2T0Z8+i+0Ry7LWNdCfpGn+H7baW2PJl3
XujKfqyz/t+y1XHkH9bNe1h07bH3Sv/p+3VaB77O+L9XFb5dbZ6p8GHNlou5
gDORyjld7gzRZ2utp2fia80fqb6vJ3ea/ntTbTssYz2C74c4vFl/+4dGPLZN
wHBHx+1O5R+mb8Edg4xXhx4yemd/yz9K7r/IaqpffeQO1PN5NfbBMV6iNfLD
Xs7Ttd66tQcovN461iP+coj7cVuDy7pM7TtS/pXIjSjtnbRBbnKlfex9l2s+
v6WxeVT/bytaNeWdbu1G0wpZX/BrJ8PjgF719lmX2YdOz3gvOkovUFdwh/V8
aq0xgMGQ/jJvH/sYtKtnvdvEmsv6jbzUWNHiNOXZapDtU7EPg9dBHGUdoXTF
ehcPkxPJEs+ovW1yGyt+uOb2RvJ/rTQeJXds7B/2Unv37O1nbI8/lTH/f+/e
/u9/ep6gMV2g8vdRvb+I3hc0GaP550Z/w55UeGeluR85O+wl6Rs/XjTaiv19
N9sHxc7memrLgzV+3l3/DVT7lzKvsFlTZ3vXb6Z9HuMsNlv13FfruuD3PsJc
Vdu+0XdhfeVZr95xj0b8/+qN/wX218PIlbS4vawhL2V8lhmqBe9Fhd8THXrI
PZexXddBnbyOsIbwLr4a7yO2NcATo9y/NW+eBStPfd1ABH5CcW+xt8/7veKd
+kH1rexpew8P6n05UelPkOvH/Uat60NHnzbeG3TGriZY0/z3fLTniwGmw9va
v/Vptj0MbGGA8fJ+xnazr0Wmtd3PuA8iHlsji2NNYN/4YcZ7R+4HFkeanTQu
CJO/y3N/r0PT5H+vNn4RWEn9B9k230uKX6S8G6OHznqrMfxddPxe4VPgU8ht
kjXGElhL6PSAtd8psJ1miG73Kc8b6tMS0fmzPv+uX/icebHtwfhjH3yx2vAe
7cjYB18LnK1D8va5Dz1Q4a/kzlddUzQem4vGk+QfMcj5D5d/sd6ji+RWKs+f
8IUU3lztXqn2LOK9ZG/b12HWJ+xSfJyxPZdejS7/ggrrDS/JWFe3r2g2v8Hj
wX75nYz3q1f18f7yPyqvU5vnBPPhZsVPUtt2rzdP5ZuM+SrHaQ5PqvV7AEbm
DxljbJbrPHOZyv9efTlsiNfeI9TOya3Wh0QXEp4D8e1yr9c7/hLF16xlWybv
KG6J3IdgR2aMufwdc1vz54+McS7gN76t/xfV+5k8PH+fcXnfRZkNaxunoXN/
Y7XyHnLnAiYzbX5Q/y1TnT+q76v4L3zi8X+M8M+t1o9FdhEf7MzHOtgHS5Pw
/2p9B8/9O3fvhD8vs/9rhH+IMsGCXiEabqs2by3Xt9W45X9G2t8iPbYZ/4j+
Qo9D6v3cpdFr7gYa3zrRbUUf06xcZXSQW97BuOCV4EZnbWulKGt7K3swv5S3
NOISEd9f7/0/fE80j1bqvf6+t9d7cOFJC848fkmE0dcnvFp/H1mCrPkkrAEv
xDrAHoi5hM3rbav8/ePb91q9182v9JxT+5f1cdxgteHQvNuFzZyv4t2apvf9
FPgbcjco7bis23qCaJjt4z492ej+l8k9qLY/wNqkfNPzphXfJv4rD/p8rn3W
+BrT69MK0+mI8KHbkQpfoTbN6OvnJVqrfqvx8yfyt+vrcwe6u5SLXjByC9CT
d5w8VVHOQVo7kgovGKh9QU/vt1JZn4GI5xx0p9bDO+R2bTdeL2sSmL2sUZvy
DiSMJ909a/sq66iMqd38PWcdWSfrexv8/lnbIZlQ7zBxX6nNVSr7WbV5A+Vd
H/4J/RGd+un/syucdkDk3V37w6M1ruvq+TCtCUM4Ryl+heg2IetncD8HMgcq
jFc6KOvnGzUmO6vuneRebnO7sQVziebAjtxpyT2lOV9AB1PxbUp/ucZwB8Vv
qu9eNmt59eVg/Nf4GUy6XNY24ufU2q4H9j3Ix3qNjRTSZSIv2I35rPNQ15Ot
fv4aLPSs66YM7r7AZTxYdNhJ+66ZTbYrSRyySB8o/laV9bnGuy7rOvmfbwXf
GnRSoc+hbe5/jdbA/6K3PNi0PUiuL++YxnorufOQ6RLte8gt175hmdwo9ftE
xa+nPDWqa/hgy1nx/YNncmh/83Z3VfxM9eModEJ6Ww8SfhC8IOwWEUZHcqt2
7xs4d1zY4rr3V/nbtvt7Srlf6N2ZLbpnVd9Kzbvve4TtoR5+xr4s+1ni2NNu
oLi5tab9/vrebJ2x3B7nm4dif9IJmTv1dT3RpEV+L7mRCo/Uezsr7+c9a/0f
8eA+g/8M3iz/o3vQM+Z4j5jn7wx1/kXyr2wwLcnD/fnDsXc6Vvlas7Ydc7P6
9QNYNHJXKP3l4Cnov+p1/bxysOMaGpxnpMZhPbl21sOM95vbVNm+aF2M9QGi
dRfuJuSOgZ7yO+v/kVnL651V4j0J+yr2VDvr7DRXZe4kf3TWMkPI6uyhdn7G
2a7CMjzEX9PB3+qhWb/Hv2mN2A0+xSDz/3bPmsfYQfPhE3hDSr+U+7es7bv9
qrkwMev7BM4r5N2pyjzMXbPmaVZpXj8Ez6SP15j5Pdyu9bLuA+2/S3Sr1Fys
kNtN7b5M7d91hOV8sX/dXGVbtLQfu6hfxH6JvdZFWsO/rfF+7g21baPoL/7o
CKPjsF7UtWGDw+g7TFQfd5EbljXvdFLW/NLe6u/wrONbFN6r1s/M7RFZz7mV
avNNfVzGXsr7l9ozNWu7BNgnOEP0ebDRcVOy5pc3Z80zR56iIWv7SqwX7PXQ
HdhD5VyttW/OWm4Xa+jQSNsU6ZG/ID82s/bv4fnKGndRvdPx39o1njPYdbpN
7dxE7UyIts/Kfaq2pRQ/vbdtrmBnCh59p6zvFy4e4HY+oLlwyQDHP6TwuHrb
Qukc6xfr2BiNyxLkerLmh93NOsZ6w3hpb3NgvXkWK1vsb634sXnPJe6QsRcJ
bbALNmmIv63ztN7cpvburbzbZa3jjr48mM9/iJ5XNzh+vtJcpn6OZx5rvlzd
09+GnfPu4z0d/J2mzGGsP0M9b9M6F0zS3LpS6XeXPwb7LGrrNSq3TPPj8JLV
5mYSdxc7XCL/zmKfDYuRAZN/TfFqlk3iuVLzu+B77arw9fKvk6uIuIu0H749
eFIzEv6PNNcWmYcEPws+0qAo84GEeWeku7zI/Cf4UPCLdorwvCLz7G6MMLwu
yof3NTl4fPD34LtdrfB/Fd4l6rqtyP2gP9noI7w2+gtP7bZIs1upeVk8T5G7
vdgyk2/qv+doP7J/SjMfecxi54Uvtp38XyNMv75VmgcjHXXeEfUOL/XzXC6h
S9wGeH1rR7/glUH7u6Nt/E8YPuE/UY6mamKM0twTfd+hyO0sh84lpkP/IvPe
5kWZw3if6r2etCt+AeUWWf/9sWLrpE9vsw48cnpHhn5Lusg4V+BngX/1KnrC
jJHSz0XOh3Ow3Hb6b1u53nLF6uOjSlMMPdXYhXpepXpuVbpDkY2Te15uUqnb
8Yj8++Tfo/QvKzwF3JQS69DQBvRo7k+43ivkL5T/LHMFXq726ueU2N5NVu5J
+K2KrxZR05W2642dlr2rrTNySvAeod2zRU5/PfqV8p+Qu4Z7NOV7mjFCfqbE
8ZRJncyBY2MuPBvzAaxW6DxG4S5Bz6eLvB5ijwdbLdh6xpYzOAMLi1z+XfKf
knuesVDetyJ8iPwX5b8gd6/iPy0xzj2496Pawp5AheuHFg8pzW7Qrth0mlTi
vIsUt0T0eUmurdxxlPs2fOkyl7c4YVu63IE8Az+W+9Pi1aoZq3HVPiw2zsw6
ch8ojBrUNk3WtUKvijsU8mPntGuxw8/EnFwYY3R61HtvjONLCt8nf365sWwo
92P1Z2PV/b7Cp6FXLP9duT3Dr1B5ffX/OxHuF2krFd6LfsidDt9d/nsR/37E
E6ZO6KNlNPF4qZ8J8658He8L+tBg4KET3a64N+MdWafEZT6KrkPElyg8u8h5
WXu+lL+k2Dz8P5V+OfNK4WtLHM9a9JTq/UhhVF8eEQ2P1HwYzp1gieNZV3dh
3ijcT351ifnmiE+BOQV+FXoc1yv+i3i/TkT3R+GjE9ZLQ8dijW7aZ/H+flPs
clhL0alC74JyeEfJO0FpyopdJkepx5udl3Ie412We6TYbfw42kmf6DNr7Y0l
roPyl8n/Ktp/fpGfCRNHeKLC84I+rNVfRF7o/xmymHr+tthuhdxUxlHxz8jt
xdpW4rIQOdte/31X7LX3jRgD6D814gck7K+INKfrWzcdnm+1475dE19iOkCP
PcA5jP7+IPewXClrnuKKSlZvJVavyazdfOPWK3GYNfx0/bSWe+6i9zi61OGr
la5EaS6Rv7n+7yv3t+I34b4ovrnQljTMjf2bfJ+K7bnZ7T5fbVrl+ouDT8v3
uDjK3KjE/xH/bKnL1FK/eu7/He9FrdrWUW46etl6blSa/dkaKTysxN+UdeUP
jXulvyJ+r6hrcIm/WXyr+Wb/pvCQSP9nkR35tX1eHTckyuGOad0Ijyj1N4xv
2fASh6n3d/Wxrzo+V4vL9qwJ+u+AhO3egzvZrOeXokza8ECJ07BWz1IZq+R2
KLYtMOyAYcNxx4ifUeS7qlzcwTHm+bhHO1z0mCp3j55r5Apy2oIlksV+Joz8
N/Lm+yBDzviwDid8x5aNe6775TfwnVD4Xbm6CEPn+uhLIeq4I9Yi0rAGPh95
GYtnY1zoF3bc66Mc9hX9Fe7HviXayV6F/Rn7tktZ+wvW+UV/+eGYu/srfnf9
/6PC9yjvz6X+zlH+Q8WOP6DI3zfiDy2yzAKyS8gcHASfhXOV3O/YKxcdFpR7
fpXFvL1N/i/Ku1/Cc7A83pHJ2qMeo8AztcZ4+6HCOG9L5D7kvKU8v0de1qgN
Sr22fqnwWMUPKPE+6sUIM3YvKU3P2BukNR7HRfiYUu9pyMs+om+J9xJvs/Yo
vCz2LL1KvH84sdTxyKGdXOlxfUXh5cjhl/ib+L8iy8izL1qrxN91vunIz5MO
Wf39ip2etDjSHaP0W8dcYZ6MKnV7viryd4N28k2Zpfhecm3sc4r8zWWd+Vpx
V8l9H+PzUIzd1FiTGNufShw/NdaijWMsirW+tfJOKvxCicMPJ7wv4xvG9+uF
2HtRbyFowp7uoRK/ZzqKJNbTc+8Sf786gxFT4j3JMyUO08enS5zmBoU/LnHf
oQ97ny5Bk6fk9yjxPueVEq9T2ZgnG8W8ZQ6PLvGasLbaOVP1jaJtCp+t8AYl
3vOOjrw1ij830rBmbhhr4MISh/k2DVT8wBK/N78Xeb3ifPGq8r0SZd4aabaL
fTXrEWvejaxTsZ6z/g2PtZH1bnCUz90/afZJeO3nG0AcuI5gOnbV87Ny3cjP
O67/ukd4J7X/0lLT5UewAvL+77FI/xw0VPyjcsfKZeBFltq+MDLnjCOy5ey1
Rir8qco8MvrE84hoD+2/NdYN3p2X5a8f6VfG+sB8+z+mzjO8qqJrw4RU0nM4
OS0kEFJISEJJodorCq+KYMfesWDHLjbsvaGggoCVIqAiIgoCooAFRbEriogF
FRB7+Z7bZ7j8fuxr1syeWbNm9uwpa1ahvyMZflcX/kH2Nk0K32F+SfP4Beaf
+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
TKUvqHfeowQ/GrXfiMMK7dsQ4wb4N/xI9J6ncfhQ1H5J8U9akmu8RxX6jj4N
gUE9U5TnKY3BYUqPK30SckHsO3Id35+xqvBHrVd/NtnW3BH1rhM/FdBFvbNy
LdcwoNCyDcd28jf/XP3QlvD/OYZ2qc7H9dxX6bHRPvyzl2ls9FfZ6Sq7m/L1
EzxN8O7YDGO9EJyb9Hj/rYPvNg8v9P3mTOGboWeqcB4q2kYofVC26YI++uR6
nfuu01Otb7gs5XH3u/C0qVxrre0c4cMTm+nYS99Xc/g+3bynwp49+yvs2C9O
ec75XHnStWY9IvgTwSu13uzPPoBDkdIfZvwofZzyNzVZhm2j6PhZ9DQiC6x3
DynPi/D/lf8XeBg59h9e1WQfvo8pnKS54wS+kb5LSk8ybh/pZxfaT3pP1nit
BTtgg6rOvss7CsfgDsYJD2eJ8k9mjCj8QW36Xs/AKq1dik9R+muEon+24BWa
S7dGTCd2XNm3sHY8ne09DXubX5X/INFR0eB5lDmbsuzBd495f8tcz/6avXcx
fEHR9rTgAsHTVHYq/w4ypb3s83inXrarhM0l7Ac19vJZaF2r58en9OTl2+cR
9OHniH3EdD2b8+zn5AzBYzUentb6Va46Ounpq/5pVj+erP7ZucF2xrA3Nlrt
Ok9Ps8bmyaL3tELLvn5ZbTsKyNjupn4q0b9RqOde0dS9wXZHH4V3Kpx/ZtlX
yU3K3080FHWyT5Ko4JjKlNbYLvxSfZ++cfsqYDz+HcbkOo27L/Ss0LjdzP40
Ynmn/VXv0G72qUJf/BmxPaXX8REkWmcV2kcrvmKRJd9LfTuozj5CyUsfooeF
v2Rk8/GjjA/i8wvtz/hc7vgEj4fXpzblRR1Hfw2eOX5ZN6hv0tU35yq9Xn14
ndrQkLRduVGF/pdnqFxUbTpZ8XNK3K73Nd72xpc7acrTt8zv8Vs7h31XzHRX
iNZry+2HdrbSp8Rchjsr/A1wbzW9ym39m/ssPZMEz8+zD298eePve6dqywLt
rN/uwBqnLxN8db3fXRyznNBE5Zmg8EbhPFx1Pxixz2JC/BbDq8VPEX6drora
Hzf19MNeRbFtOpLvgcBbvlL47w84J0QMv682PlPvOPAYfdvLal0fdL0daNtW
5mfkjrS+jxd8bLZ588hjQQfv7wt5uJvB5yyyQxUx54EXTVn4U9vywaN6Ft2W
EsvzNCjPnaprXMT+QmeFdPz6/SM65+opFr7JDS5DfnzK4lt2dK7XOMq+2ODy
xFnvwEF+/ASWVTmdPDerD5/Uc5Oe8Xn2yYEfjUl6Jgh+kLtU9rCCh9K3qvtB
yim+Ks8hMnU7qM+21zMWu+ZR+33A/8OtmqO2aEzO1hz7rNIjSr9d6XuVOUQm
7SxkChlv3Km1hjGjuaRG+XurrvfVz0/p313e2T7vV6pd1YqfiNxIynd13NON
yvOdGfdlw/RdflcbK3J8Znoy7Jmz9c9l1dm/+yf9fOYaoPAP9es90Kuyu+s/
roj6PHCd8N9daLll5PB/E85fNA8MhI8bcx/dp39i+3Kfr6iTPMgfco4hbapw
Ht5D85Pq3C7m+eL3kAe+/a8Rrydzk+4z7q+n6XlA8ON5XhN+DetCg9o6QXX9
T3lncW+oPDPzPP4YY8gEzs2zvz187VHPH6EfbsKfkPpziObkQ+t8XtsdHoa+
0SnC97m+UZr6eI7wP6lvNj3fvmrwUzMo5jMKZa4vtQ8L9lXsm9hHcSZjjv8p
rJWbhG+l0k/I9z79NdY+wTPLvf/mDJamvl1W6DMKe/aX9RwoeIPSFxf6jAXv
Eh7m8donF+mbbonYN9DABvtkfE3v5qotz+j5WnNJPmfNIvvMzmX9KbKPxA36
xqeobU/39dzGHIhPbuw8thf8Rgf7aML+IzISvRvtCwDlXnz7UC9+fPANcmPS
db+bch/clu1zxopCnzWwWb6k0Xi5c+OOjDu3Z1LG9xq2eYJdc+rrpnfLC33O
6Kx5Z3q597/wNuCTDMi3LzN8luCv5LA6nzHnI6+udqUr7zx9uyM7/+cX6zTl
uVk0fCb4f1HDx6rf+qnf1irtFPhv3B8lHN8r6nekX6a8H+kbjYvZ5gPfFDsP
jJGRSeNkXzmryfck36hdYxm7Tf4GVdhsUp5uKt9NOG/P9TejH/G7hX8aeFLI
QbP+41sC3wqH1JmvCK+6R+Atvqn54LhW8xXf7mXeInCXfPOq4V3X5nvvszWM
vZ6i47Fy87nfYT/R6H4sUPq52MAv9FmTMci58NdGp8GLej9lP5H4iLxXffJC
ofleq4Vnz9h/vCdC+Fud1L4XC80P+6anfbg90uyzdGnQS6rRmJsjWn7WN7pI
c8uF3Wyrckd9u56af3bo5zMMZ7eI8NyjuegywZvUb1tZkwRvybVd7Xv1/KT4
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
jwS/JpzPNHgPwv3gZ0r7LtO8H2D4P9urLz4OePBRSTn8VBJ+GGD4WPB24WXB
d4QnCD9wzED1o2i9VOGTavt1wnWv9mAj1a6J8OcUPqn9w9Wq81XBt4meVxt8
f9BZbRlban3vqfpWU+qs7/Qu91JJp2/Qc3GpddY3aB+xSWXH0C8tvpdJV7+9
0mC5ZnRm0ccF5g7qNaVfXmrdsleS1psijp4WONDZuVXhLaX2zYc/buDhKndL
V8vrc592rdKuYb+QZXk57ne517yQM1HK7xYnrZMPrde2WI7nPNG2U6vPsJ9r
nfy9xu3Fb+xu+j7flzrOmZI83E/gx/jWQM+joqG1wfLZyGfx/b/QnPCZ6vmU
f1nxF/v6zjy71XeDN5Vaj+X5mNtP2x9osczmX5r37qTf4MkLjqWslzVPZf7U
Wvk9407hmDrzSKv0X18k2voK7q56rxA9/Up9P8CZsz9rteBr9S+fqrrWw0fU
+nlIufcrj4mmLgorVedcxmEXnyfnFDt9Fut1P+t6d23x3U4TfZ1n3W/Sn1X4
o+bzp1W2a6l1x+c3WBec8yhn1aRouKq/4VbhSSq9tdT87JOUrwP7IoWnc6dW
ahtd+IXLKrVvuPt623/oKW3a08Av4x/pYJmRnFLLjTyLXKhoyFb8RuXpxDyB
7B/7i1Lb7xklunoJ/rnYPCH4Rdj/4/xMu7Fp9Lue3oJ/Yy+mMdos+B/Bb/T2
OXmKxsyZ3PsxX4n+lWW+w+KO62nGtOaUWvZk6AwxrorNb3uq1Hd9X2mMfany
cxS/Snn7ahw8L/iFUuv9ovPbEX33UsvE5qesr0v+paW2K4ccL3J8swUv0rco
SVkn7Wn6NObxwr02OmnopnF/fTfrLGcq0T9S//vqKusB1sZcDt3im5VnOfLg
mic6pWxzDTqwS0e9w0T3hBbLQ9zf3zqS2J0eo//0avV9Lf9eru0dYPfgX5sG
vW3zYJPCzb1tt+AnhTn6XjdqvthN4/HXfpbhK9Z4fKnUNviQXUymbM9uoeL3
aWy/3eCzI7LMS0M/oNOObju2Dn7SP7dFz/RS29gDz8nI1ug5oMK4kYt8KeBf
qzV7uwbLBk3tZbmzNo2x1oTl9pDZW17tM9JHDT4brSv1+WhLqeXnkIWBh4cv
XvzwMk9+XWo7q/Bc4L3g5/C2wFuGr3OJ9tuTm/yO+eX7MMey3+csgF/a2zU2
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
XeX16tBYr7NeZa3KP5I7sdzFXb6O3TPuZ3PvGHtJ3NmFhzuz7Adwr+qLgb4P
wv3k5bzg3A1BFmGwxXB1m9NEevZPmQ8e7mxBZ2+QOH+MeEkDa2psCeIjA1/R
+OD4oNp5xG/7xxm/T0ZPoNo49C/zvY/JHh73Rbk3OrrIa3Dkk+/xdZaJbw7u
j1FWBcGLLcW1SmxPEZz7pMDFgX9a5/IsLvYe/NfV3ocf32X8j5HWrUC/Yfm5
DThnZ+zNsOdD+XHOelLSZ8EnJo1fL9opgicnrT8wRuk+Q3hpvuGZesqEfy14
jJ7Xs0zjG2uT/oLH6rlQ9KOD50jhAwQnJ1d8B+cc//Xg20fw4aRx+EnLiZE2
fO4eG/xTIg3EBeS9jnmK4NSk1/6k/1Q9R4j/G8HFeg5Qv2hRX3tAzytZtjN1
v/Dz+rsdUSZLVReni/e0pOfMrAlPjXKgPJB7eJ7vz5wePKwPp0R6dihwOkgD
+6a0AfaokQf/POGP5FjWxCzLPiXkT8szX+FK/vfTv7ivh4xXQw5nFPjk4+yG
dOQr/TtI3gzRchO2L0Mb4R4y7eRQdOOE1+t/+onWtpXCvxS9ULBAz8VZnp+z
981cPT/oO0pmccI+PrF1XMQ8IvC2cuPX5pgXWTsJ3y1wZJKWvEgPPPlBx84c
MtvLvX9OvKxR0NXl/4Tu7hd6KoQ3Kc3lgoPQwc21LVvkYs+WeUROzGGwVQ7O
/GKXevM3sD5qtsz+UQbI+ijX38uDZ3DCZdLcz+XC+/L4Bwf91YTfmyM9ZRGW
u92UM/2b/FBey8umOMoKnLKbVujz3terfebbrv77hvD5OaaB36/2OEX0hdW+
7899fXDu7N8m+BLjrWSm6uzrHf0iaPOCvjBjOch7mf9Ktf12vxLv67E2D3xP
dCM1h/lN48ucap/Tzq32We0WhZa7e7bjfy/Sw9j2fox15xUZ30e8v2A/RvjE
Qut9IQ8dsP/2/KptU5R9QOZ10F5rdplQPvjqeLvaejXosICjb8N6HJmca/wu
+e9W24c4thBID2XzYZ3lM1fMaXMfYdxFr4TyQY+LNf2bIYf0gbPGRxb6Gehm
8D+7q9r2fNZFV1Z4n2AL92iq/X658jua8yHKP2n8SZXP3fo3jhK+vcLuJ552
4YdkG3YEDu+YCIseTVfCOloPKGyn8D0K7N/7yrR9fO+jZ289hyptewZ+iPBL
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
PNjlFLxB8EY9i0hDvH9cabsUF9H2sDWtuHqwN6j6zRa8WPRZlfYPPA172cL3
FP0C4TcL30f8DwruO9Z2K09J2X7g6nqfLPo9SvN+gieJf1/V3yein4b9grH2
nzmf8Zy8SP5rtfadeYKeefh05h6w+I4SfF9wqsqlADv0Grvm632S6Ld12R7g
17W2MTBdPA3iOUw8dayTUvZHyDyUtQpzUdYxOSnPGVnHMGdlvoqvw+yU1z34
711caz+8KeZoKc/R5o21XZVbuuxbfrZ4thti/5z468QeAz5pP6+1bYPeTvux
XUVwjU7bgFir0z5J8FGCj5mxnbYPuUAyHx5rmxqPjLUdyE9rbQsSf5f40MQ2
CT5M36i1fZGd9DxLPxpiH9j4wt5N+ItjbZ/lpbH2dfNcre1Y7C+ed2rtA5O5
J+vAfjEmMjbuMcp+hL+ttf/gMzvtC2Z6l9fHf9baF8vZnfb5cp3ox3Tans7x
nfZB9FutffDg8+ePWvv4wW8Pvnbws9Ot9v/wCPsHmjXWtkjOlZxJ2AARzwGM
v6IfLNhHfxQ8TfTDBA+iLQo/kLalbytzR1HxPjDWftkfHGtfz7/U2ofzTp32
v7xbp32h/lBrf6jXdHoNv0+X1y5lKftHxC/5oJTXGaxvKlL2cT5eeLnwmwu9
r1Ccst/NazvtJ3E/ybmw074pf+6yX8t/az1XrRL+d639PGWU9xkj7Ht1POOX
8jGBfi/6rSPs+xdfxEtq7W/4gk77bLqhyz6Ff6q1naQ5qq9ZGm/GCl6Utk8I
xqnb+EcJ/l7puRJzI+ZFv5A2/fNqxnm9tU7KazLsWLamPA/FXvewlG12H5a2
vf69UrZhPjzltdFxok1O+87ls+32c1Ukmc0aJ/cTbYeRtuMOji333VK+G8b9
L+6Cgb8w3PsrOzE2qq/uk7I87m8ekLKNEuyTzO+0f5bHurx30pzy/hZzq1Ep
z6+YQzHHYh71rfin6vsX4v9O+DmcDwlfIJ7VUl53Tq/xeoy1GD6V0invn+3K
/krKc0N8xtWl7OeNfR32dNjPub3T/tlPlsx7hf8s/Jkur/M6Ul4LPthpP2oX
iv5op32/XclYobI6Nm37fAemDLHRxzx3kt6PVH39qWdsje1d0xa/HmEfnevS
D0SvqfDa8jPRa7ErpfrfS+F/Guy5cAdtVPSbqB/Rl4qeUrtaWfRPRa9KeS44
Gpu6krkaeKXb94Qa281YyNpK+MO5/m/9MML+2iZ3eVxlfGX9SX+gLzyv//sy
xXPSWM+Vtkh5D4l5ypYp24BmXsL8ZKF4C+h/Kc+7mdcz72duf0+7bbq/3mX7
NLQB/te/d3oeP0IylnbaN0PjOM/NN0zZ7wJ2pZmf/DdP6bLd0RNFS3bZ9uk5
gksU9krm/eNsk2qblP97zNE2S9meHfaiJ6Z8LxzbepunPE/8SWGvZl9VYX9k
3BOeL7yrw3YMW9T2zycf+KdRPRyfsp1u7JZgkxMcnzXD6vwN+omCJ+h5Itf2
PC8SPlfrrEcr/A06e3JDU17fYwsTm5ibqB4XS85dKdvGvF7ryluE/1lsO2x3
Y5+u1HuQtwk/uMK8dwb/l0r3pfgKV5qfG+d70k3KxzPjvP/R0GFbmNjGZC2/
qsphKmlQHb8unnGK/2bW0PpPdAvfSHIW69sN4t+i1HP/C8X/w2DfM+a+8VTF
e3bKOPeOsZGIbXHsuJ6UMo6N8UM6bFtzRLdtfrOeYS3zVto2H+9J2V4R9oyw
a47tQXynYUfx6JRx/JpVM09mPaY0bKd11oH1/239ZM1sczljSx5bpdgsxTYp
tiexS9mqujwkZdvi2M14UO3pa8lYSXOY61K2V4utWuzUXhvlyfpsXMrrsz0r
zAcP/pJ6UvaThA+srpT9YC3utO+BRSrDLzrtXwk/Sws67acAvwczaryeZC2J
/6++lPfAPum0P7K3GFvS9itzhb6d0uH70psqve+OMw4NO2TYTTtKcpLKxyzh
i/VtUp3LEpuXv4zz3sGdkjla5f6Q6LeOtK+lG1O2P7HzKNvGvVzfd1bYm9ps
d/btcfZ5c3SHH/AhGgfeFH0NtYVrJPP9tG3IIvfqtO19XIzstG3UIgubtZdG
XGcov9cL309lOb7D+0N/Kt5/9LzLfoRk74gdtHr7Tvo6ZZuM2GPEriH2Dd9X
vh5VOj9N2c5h30jb45mttJW22K7iZynbSiTs30rrlynbScRGIvsZ36W8Jh7a
7bDIeGWU909/VxqqGrKyvk/ZZlh9i+8k/0BbrDPk/vEoyftF+CEltmkGP/7i
q9WeDhHfft22y0i8bW1O7yeR5lp9exs9SsX7F2lM+b7t931qEwo7Td+b63y/
l7u9R6gsl/HfT3lOmqVv22s+NIk9xZT3hJgb9hN9d9YICv+z5G810vftCIc+
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
syV/MW223bbsmee8rTS/ofz0CN6kMfcL8bzJHkuP8WcFn9fzlmjfjLI9dWzf
76P6uqXD9u+/Yg2ovlEuemuh36Hfqu+LlN+PW/xtL8krEdxNsiZ0eP39mXjv
VdoGN/pexTfi+VpPNWc6gp/reU19okR5/5A+W2b6J3pe4dy2wWHgZ973XYPn
ftC+1bNI/EeHzI+F76E4Fgk/ocK0b4LnswbLRebsHsf1dI/j+TTSMFv5eIb9
ZL1vPcTfXhX9tR77p3hV8DvKQnlZLPiP0lMt/LwK6zej5/x+jx/wwZSB6qpA
PJerLMZozMnBlznrAtVRvXg+Fu+7ivOdFn87RvOQY5t89jNL/Pfr2azYkPfX
VQ6fsY+i/8Ea/OdU1g+J/k6Rfczhl44zU97B8U+3keJKSPaTw+0zDR9qG0jm
ay1uK1NKbI8cW+fd2DPpcdqyx9n3Gvn9UPL2VxlsiF6I4vxLeR8q+iFKy4Ie
y3y3x/4TaHs/0BdY7+uZWmK8v56U0rZ7o9/BP464iPONFtPhv6Pc/CcW2o8H
5X8aOsT8W/Q8rnjni/8VPb/r/X3ltUHltrPCnJQ23FB1V6yxZSfBUsFfxfuL
ni0a/Q59iP4zf7LXINruglvWuG/Tr/8U757Cv1I5D610uknzKyqDlPri9B7z
LNOzh77t3Wj+2ko/0N4qczzEyTn5NoLb6dkj4twm8KWSdQ57YhqrRok2utH3
7Dh7H97o9dYm6IYJ32Kw1zrDGn3PqVJ52VH44F6HI/w5jGc93j9nHx0dr3Ub
bQM8O3hoAz8r7T+1+NtCyWxv9P4uOhas41jPcSeBuwmFvebfVPkfqjo7WbQN
KMty+/T7gX6L7UDBnxusOz5H/C/qWaL32aN9520e43CzaecrnX/o+3vCX1Y5
zO2xnDk9DvtTyHmzx/dHflbcw1S234t+YYXvk0DnO3uQv4r+oOiXlrvNr4pu
1Rjfm1qkeJ9ReaZE79P7AvqW5B2Bblur5jGMUUrDO6Kf1ez3M1QmEwX3l7x3
RbugyXleX8//FPZQymiI16KsQ5F5m3g2brTuO3B4uXXhNwlavsrxUnTIR3ld
+79Gr20H9jqugl7zkjb4nx/ivj8EXRfxNzT6zgr9+6Ho70cq/FPCb8XOkup6
L+F/lBrurefP/hpf1C92F/6NeE8Qz8HNvkc2LWN6Sa7hHoFPVpnsI/ycUvMd
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
J1+GSr+zq81PPvMPgv/WWE8m3+D9P6kK8QA=
         "]], PolygonBox[CompressedData["

1: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
QP0notahSpe6hvJ/UD6v9uvwko8z2wfAu+EvxPqcrf0Bc70ozboQ7fm1919L
nSfAj7KHWJjrPar2qi/wbBd56yRfk20M6RJjk08ydtnOgK8hrz39eynRMkTJ
Eo+l2lZZc36GtmfpnZ/oPbX21od05mVsxvJsj/oPTx9C7xB1vkt1G2pLMn7J
+gdQ5wJwa54tofxinl1grG6l/8Mjfqfq3dqe9TYDOOM/+VZnyi8DvkKZydRv
LnulLL8z9e5sIx2F9pO0X4P/3xreWaN1fqZ8P/Kj1H8bPD9pGvhdlJ8nev+d
v/WOnpBlG3LZklem/JuSncHfzAb+/8uWb4HO9IUss6ygsyTPZlX0N1rf6rmp
/u/qPzyJvMvM70nWR4L0bdArkea12FMys4j3INqLXKT9SeQXg58VjOdc5my9
5EnkN4PXrxifS7I1AP8JfrLB+0e8h9dePhX6b1H/tv/0LzXBZ2fZRke2OnqH
610+gPnKq2+L9nC0VZo1N4n1dBoav1F3KjQzaD8fbbYWPdJx9s4Z1L8duHbY
Z6Ee4D2z/tMhgXcBf0jyW/LPgz8K3gP8QckjwVsrX7aPOrODtwfvnOUx0lhV
oj/vMHZDtF+N9x5Ke6lkUhzwGubsH9beG2HbXj0lGwbRB3+fvgTp0yDw9azR
XZRdzLOPsy3zluz7CvSnAD8rfQp118PDNHjpp/0U7b1H/Zws64ClC17EOzY3
yzb2srXvR53+WZZBSBYRD54KXpz0N9+rmbRZAvh0xLK+seBngM/qfMZ6mSD7
L+Dr6bZVLQHNPtIn0N4PzFc2+FjwxvxnB0jWwJxMoexk0pMpfqa8q+DV4PUl
1uho5qtjts82VXSmIy9H8kDKpjGW+yXv47d1wDYIskW4SfK/FNsg/N8WId26
fdkkyTbpM63XOJe5WbJh+tSNsfyS8ZpH35+hzQLFrOOWrrtLls9ekllJdpXN
sw7kpdLud7KNY329XsM6ySTqztd5t5TXqNZqwyzbquk/ov+KbOJkGyefiO+Y
2+nkl0u0jlO6zk70twH9rU35sZQvKhlRim3UZKu2jzbXkD+e9dyHvFKUf4u5
z8c3qgTwD9D7Mtk2A7Id+A6e95awTeRR4PtYo4uZ2yv06V7gg7JfZC08xpjM
DdomRLYheifr3Tw3w74mO8Bv8P1ZJxlLnNvIL1k4+OfJ1iEHcq1TkG5Be5Kq
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
NOYae8kUJFvYSPpO+4Vs+77LB16xs39Un2tbRytdrWLMKtbsw9Bvx1r5gfxM
zjLbKHMS+Ce1Udt1VLdUln1t6kmGq/8Gz/aTt490JsdJcFXZFMUcw0CxDA6S
fgY+BQ+dajsGvmLh/5HmWLOHwH8BfzLbsSElc5HsRTGrFLtKNhGyjVBMY8U2
/hn8EnhW0LZjW5mTZdrf6Bn9OcKz34FX6htX2zFvFfv2KulybesUpFvoL3le
McfsVezevUHT/gH+x+n8lGPfVdVR3fvSHKtBNngtgLtHfBeJYoQ9HPEa0FrQ
nRzvUr43NDbo+0NaD+2uGvMkn0lGxfxMeYpBolgkOcxBbjnHwFAsDMVIUawU
xeRuJlvAkGWj8vlMYW025dngJMckUWySllnWXZWCRiXJxiRPIu9jnfFi9smU
b6bOmN20t6ZMr/q2gT8v3ap8Lsi7yPd4aa59LqV7loxdsnbFEFYsYfkgDJIv
S8htyUdBvgr9ZOOb5D6qr4+ArwD+gHQy6CRYPvPyne+q/V9N7wm1N3wg6r2h
bOhkS6eYzIrNLJvw38HLQS85yTE4FItjK2M2uLb3yNorV+PZXHhpRn5izDJZ
yWbzSyYUs4xJsib5rM8n78405+mMf2/UY6SxkkxZsmXZaMpWUzo46eKKyZ+E
/GOMz+Jc2yTLNlk2lLKlVAxXxXJVTIondbaUjDbeNniyxbuLNgrXtI+MfGWu
0KdKSaYp2rqDR3fxyGZOtnO6A0R3gUTAq+g8mG44k1Q55hhaiqUVxzf+iM67
somSPJ5vxKiQYw4q9qDGrDzlH6VMbk376P+e5v+o/qvagz9DW4+Br05yDIia
adYRS1f8Afh42QuRv6ScZR4jgJ+JOdaGYm50gre2khEATyANgN5A0uQkP1Pe
B4xn69J+1k62veSfKOKYRx1iluFIliMbSNlCKkaZYpXJhyYv+Rujjr1YHhoF
JV+mTNE473m7xHxm0dlFdzw8l2OZlWRXsmmUbWNj+nBbOfMgXnQHj+7i0Z09
7+dYRihZoWxEZSu6L+rYirrTQHcbqE/qm74xrSSPof4x+WPwn+usvW/UsYBK
0l7foG3eZPvWHHoroDcow7JP6Qz6B31HkO4KakT+Uu03Io4Vy/H3/7EkWtLG
eL2LJEMKOgk+RHqevFDUdwHIh0u+XPIxkK+BfAbrMRYnoz776Uxzc9A6DOky
5EOwELwz49G7nHVIK6U/CvmuKMXwe1+2QCHfJXCC/DoZtiGXLbnmW7FWNOeC
tcfWXlt3pujuFMmMntX6DPouKt2x0DVmn0D5BkqnJt3ai+SH4nyGe1D6Efir
muoY9qXS7PMj3x/JWG8j/41s23YMIj0Ebw9LJ1rOOo3F1Ls3ZlmBYoq2kPyO
NiaUtExYsmHFkFQsScXwuwu8WdSxvBSTXLHJtUfXXr06/S0s++sc3wWlO2Ey
gIvx/z6X4Jhkik0mHaB0gR14nx2IeQ1oLcgHRb4o98q+L953CuhugerUmVrH
d17o7osT2ZZFqsz32T6z6OyimHeKfZeH9ionOMZJQPoqnr1exzREqwptTCjn
GGdfpTnGqmKtKuZOCe196O/KIo7ZqNiNrcK+iysB/CXw1mHDd8jnKuYYaYqV
phjninV+U8yyw+F8IxrFfCeF7qbQHSG6K+Qh+puU4DOgzoKzoFcv3jaZss38
PMd7r6bwUzrDNl+y/WopH9CYY3YpdpdivCvWexH6k1DfMS4U60J3DOiugQ9J
cxSLL913KSmmtGJL96P9SIJ9BuQ7IJ9s2fbIxkexY87qfFznvzHT+zrNe1F9
8/Xt/5X1s6KO73DRXS7dg4b1bFau7+TR3Tz/p5Frm3XZrsvH8P2Yz3w6++kO
C91l8U3YdwFtBH8n1zp76e4V86VXyDHiFSted5LobhL1SX07xxjfgJ+u8F8/
wTJwycIfDZuW7vjQXR/y0ZetkOTNig1zlDqf69tJfwYDf5tmfYzi2Sk2uPas
2rtKhyRdksqorGIWKnbhl9B7NME+IfINUcwyxS5TzEPFPvwtx3sp2fiX13+X
Mu0SfMeb7nrbTDpZzjEhFRuyYtSxr6QD2KHzknTyZW1Tvz7DNmSyJRtC2kz5
dtr/ASeT1ufaJ0i+QYqJqdiYKqOyiim8R+9uxiMYb5mlZJeS6Uq2qzvAdBfY
IXi82sAxMBULUz5O8nVSDE3F0lSMJ8V6UoxCxSpUDCvFshIPH4Ofz/FeVO+k
X4HfzfDdWrpTTnfL6Qyls5RsXmX7uo1nR+p6zWjtyOdUvqd6pjzFhFVsWMX0
VGzPXOoE4u0TK9/YPzMsG5XN6B3pvjNL8bZ1B4XuovhW+vCCjhmp2JGDsx0b
RT7YHan7DfjTCZbxbEn1HT+662cAaRJw5ahjk+mOl2lpfqY8+fiGdRYK2rdT
d1zorotjvGMKlveZ90Ppw+D//dqOaanYljWz/e7Vef1e7Z3D9n2Rjrkm/GzQ
O6WufeblO/8qqVVdP1Oe5lhzrTsR2lI/I2TdalHq58+wDFWy1Nb0b5PeFZQZ
VtAx8xQ7r126Yy3rjkLdVdgu07GRFbNLsbukQ5YuWTHEFEssTP/2Ae8nvZtr
mYhkI4rJrtjs8uHXt0gx4hUrfg708yU7HvWbMeuwpMtSjDTFStOeS3sv6Yyl
O5ZOTbo1xehUrM7XSf8kOQaAYgEoprVoieYMfcvh568kx2RWbOZXY9a165ny
5jL+jRIdU0yxxe6RDVA53+FXSHt1xv96A8e43Q3tGtrPsxbHKCYUtG4N2ldZ
dxToroJNWc7THQO6a+Akda7R1lXSFPAZ9L9JsmPSKzb9Jp41Br9Z/vLQusGa
uiXZz5Q3LWbbQ/VRfa0OT4PifefWHmj/Qvkq8PMM5U/EfMec7pr7nvIvx3wn
oe4mlE+JfEvuJP9u6k9n/hMYjxvw0LW+Y4wp1lhd5rdpfcc8VezTT2KORZZD
+j7VPIpXxYh8K/qfjzh4iPS5zg96P8U7xuixkOuormxwZYurmJOKPSmdxjrq
9pN+Nd53/vUFXqs9SbJ1GNJl6Eyos6Fk4pKNzwYvRl5x0hzNPX04E28fDsWe
finmvksHJ13cXdC8J94+ZNUoe1zyrUT/5/Tfu1X66UTb2DXLtk+8fOMVQ1Kx
JMdrDqH1o/bYwHtpY2UpxwBVLNDSQcfiGUk6GXP6P5zkusuzHMtF9mCKXawz
ks5KVZiTapJlgj9A+Qe1/qFXI8uxdd6mjZ20dZD8Lskuo7LNsxwrTzZVsq06
k2VfnWmUPy35dsx7I70D9C6QzEayG53Zvkq1DZdsufqSjsacBEtnK92tfJ7k
+9SB8diXYx8e+fIohqlimb6r80kdx9RXbP1f6X86/+fm0Nges4+WfLUeAz8C
fjhmWH1QXxbB412Jjtmq2K3H030XjXyE5Cu0lPyOiY75q9i/TSQfT/QavyXb
MaUUW+perTfovScZeqLvgNFdMF+kO3aafDDli9k8aF//18n/hfw/0xwbWXdS
6W4qxTRUbEPJXE7R36+yXFZ3pujulJYh2yrJRiSR8Z5DfsNEx9RVbN1ZWY49
o/geugtAMcgVi1x3pJyVLEI2MQU9Zm/o+86z2eRtqc4YU7aw7Anr+w4V3aVS
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
         "]]}]}, 
     {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
v1NBz4+8jOiUF92+I/9UUTsvr/P0E2N2DmhCzO41UzuqPbXO03rv45idw9TZ
pSf83uixOxx0l8PesN3fqHsca/vNHyS/UD3K/DFl6Q09B89fWtujZxbnvJjO
jZXz2llFnVksGLZ7tAuE7Uy71ipasxSI2Fl4nYkPeO0Mms7MjSbvf2ivUcC6
6LMfniIRO9MuO7bs2ZOccql865xYIJ21uuTEHenOjwkOj85Fab+qfWsBnXuI
W1yi7jP7VvaVQnbW5aDTh3U+4yx5reLdOWB22QHRPxuwGGneQE552cmoh0m6
Z5t0zcvamRXFoFRGVx8yq0TsfKDOKei8gts587sH+RmRdRuZGYD1/OZ3k/9N
cdKKQyuob8eJx1ZcttIorc5Py9Yvu0cPZGYO2Z5U/kOdhdOZuNxhu9PqIl31
0yQ7tyM/oPyB6R1/jeL0vwxbzIBiByJxo+t9WsV6yZ9Kv5pAmtaykwO/cfzv
8skH44aLVjFu/Eqn/JTvQvIf4Lcz4hPIq7bH7kdvErUzYzo71p52awc9FXVf
BloCOY91Zkfrk7j5XuWD1W/Rx8q25rM7osYBX0b/X3SfNnJ8cTtLshDenB67
w1x3mW902/0AuidgmPb5tNdHwJxai5P2FWDNuPGI957jc9f9izrfpfMFt5A5
ztnPal87nfJsov8PJ+0bceNXunqK76Rv1JX9JG46SBed7dcZ//pxs9XKZqv4
6HNlLJ5TflPpLf11nqa32+410v1GDeKGi3ad/NYy794Im07SbSr6/Kv5i7K8
CNldpbpX8yrwsr5hxoclfru3S3d2+cm/qL593Z0IXECa97QHBK6A7xj6RN3m
S5ZPWfEO88irVnG+D3RZ5bb7xnXv+LKQ7R+1j8yF/FqyOch3pr0u8vvIRx+y
daPWj0dI8yNtd91n9zTpvqbJvC/Iuzbg0yTPZ3fTtua9i3Jegv5S2O6Bks3t
E2DPHHamVWPNVvIoS7/aErPzNjp3kwNY029+cPnDp/EuLfUwPWZ5S4ecGm8S
5nuVD7aX9k6Uq2fMzrEo/kpxWLKvyc52lXe/8+4Acn6L2blu+WHlj70Bfhg8
NzKzk2YU/GF4VmpfwziwKmJ3nevO82URqxfVT++Y6S39NyaZvUN2jz1aZznr
c63TXzjt+x/wPs9POjMo3wVlO0R/6xW3ewx1Vu6x9l5eu0+/Qszu1M9bzM7P
605k3Y28Epjcb/GxipPVWUSdSewhP0xBi1FU3OcVr50l0RmsL0J2hlTnTedq
HUNe84B93Xb3pu7gVHye4vR0hvgDdPoJ3frLfiL7CPy3ZZNz2zeob1H3Pihu
X/H7uvNIdx/18dg9gLoP8AH0h+jaXms/3s8J2Tlfnfdt7Ld4FcWtDHbbORHd
CZE7YnfR6E4anYXTubcKQYvZUuzWZvkk/BZHoXiKCz6LQ1A8Qgqe12n3bQE7
E6KzIXm1R1e8B3qOReaCsNk5Ze8cze9V0MfI/hC0eAPFHWwnj+48Q0n72G33
006Svcppa/VZ3WWmO81maV0ftTVKAcWjOfO45vNiPrtjWXct93Kbf1B+wpuO
v0N+jweKqUDOxJDVkerqU+ebzkId5qAdF/G7K78Xh6x/qJ/obGUVdOgsW1PI
7kvVvalnZIcpan1e5zHmhc1eIbvFx9RLf2QOC9udm7p7sw3wnOoL/gFaV4Mn
KONPmmfBG9OHCwXsTiWdC9Adjc3g+xb+pupXisugXBvDdu+n7v/cpzUkOp3g
W4i77c53xagoVuVuksXmdIM2Qnsw+EcCzyKvS5Kd2e6DrCno3DdsZ89ke5EN
5uWQ7R+1j9S+QvuLxtBaU+ZD6PZpxO7iVEyFYivkM5DvQHdlDQlZjLdivX8K
255O/3fRWrYb3Q8M3B6x+/R3AJsE7SyPzvQcd/Yp2q+UR9fRpI3H7J4UrWMb
x+xOUt1N2t5nd7bq7tb3gAvl36F+ZoXtPw9Ooec85C9WDANtsSRidnntebX3
7QLPaNqxgdvu2tOdewMUL4DeR0k7F/5asokh/3XZyaiHADydtf+Fvyy6nfbZ
2QOdQVipGIqExeXqjIL8K/KzjKEdHwQstlYxtleS7M4o3R31KGD3H+oeRH/I
7lXQ/Qp/R+xued0x75V+ijuFZz1yn6P/u+TfNWbt2AW4yW9nB3SGoKTjL5Df
4GKSxcoqZraM41P4n28hYPH8iuvPpP5Bu4TU15z4HMXp6L8ZnqBnUcV4u+2+
dN2b/rXf7lvfqv2i/H0a76F/6bc707fIzhMyu0rA6e83i1oMomLBFRM+THbR
sP0/SjGt9yN2d5PucDoRtf+s0X/XjNA4ojuhwNt7bM+nO8hrao/GPLuROrxJ
PV0pajHT3RJ27kDnD/rHLE/dTdLaa35t+bdLIf8M8rcD/w+mgDgq
         "]], 
        PolygonBox[CompressedData["
1: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
GFG6
         "]]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[{11916, 12512}], 
        LineBox[{11921, 13813, 11922, 13642, 13643, 13889, 12582, 13644, 
         12583, 14414}], 
        LineBox[{11924, 13991, 13992, 13516, 13518, 13517, 12278, 13966, 
         13492, 13583, 12280, 13857, 12279, 14336, 13856, 11988, 12369, 15401,
          12370, 12497, 13411, 12496, 13595}], 
        LineBox[{11925, 14536, 11926, 15017, 15019, 15018, 13696, 15020, 
         15021, 12768, 15022}], LineBox[{11927, 12970, 12971, 12837, 13144}], 
        LineBox[{11930, 15318, 15317, 15321, 15323, 15322, 13702, 13701, 
         13703, 14446}], 
        LineBox[{11931, 13913, 13708, 13985, 13984, 12343, 12510}], 
        LineBox[{11932, 15303, 15302, 13395, 15496, 13394, 13608, 15558, 
         13607, 13609}], LineBox[{11933, 14538, 14537, 14720, 14719}], 
        LineBox[{11936, 13710, 11934, 13709, 11935, 15154, 15156, 15155, 
         12721, 13077}], 
        LineBox[{11939, 13712, 11938, 13892, 11940, 14793, 14794, 15456, 
         15455, 12976, 13101}], 
        LineBox[{11942, 13914, 13713, 13987, 13986, 12344, 14360, 13753}], 
        LineBox[{11947, 14541, 14542, 13399, 14912, 13400, 13506, 15393, 
         13505, 14506, 14953}], 
        LineBox[{11959, 13717, 11960, 14968, 14969, 13529, 14970, 13530, 
         13532, 15394, 13531, 15395, 12336, 15397, 14354, 15396, 14355, 
         12380}], 
        LineBox[{11963, 14975, 14974, 13546, 15279, 15280, 15278, 12340, 
         13547, 12339, 13548, 14219}], 
        LineBox[{11966, 13719, 11964, 13718, 11965, 15157, 15159, 15158, 
         12737, 15267, 15266, 12736, 13083}], 
        LineBox[{11972, 14093, 14094, 13809, 14096, 14095}], 
        LineBox[{11974, 14097, 14098, 13810, 14100, 14099}], 
        LineBox[{11975, 14555, 14556, 12811, 14732, 14733}], 
        LineBox[{11977, 15287, 11978, 14788, 14789, 15454, 12778, 14790, 
         14791}], 
        LineBox[{11982, 14745, 11983, 15445, 14744, 14743, 12813, 15441, 
         12812, 12866}], 
        LineBox[{11997, 13418, 13417, 13657, 13656, 12647, 15250, 12771}], 
        LineBox[{12009, 13931, 13728, 14078, 14077, 14079}], 
        LineBox[{12013, 15529, 15528, 14265}], 
        LineBox[{12014, 15234, 14855, 14854, 14856}], 
        LineBox[{12023, 15116, 15530, 15531, 12024, 15330, 14267}], 
        LineBox[{12026, 14841, 14840, 14842, 13177, 13452, 13292, 13501, 
         12309}], 
        LineBox[{12031, 15296, 12032, 14752, 14754, 14753, 12827, 15149, 
         15150}], LineBox[{12033, 14571, 14572, 12820, 14736, 12821, 13118}], 
        LineBox[{12041, 15484, 12040, 14573}], 
        LineBox[{12047, 15311, 15310, 13430, 13429, 13662, 13661, 12660, 
         14084, 14244}], LineBox[{12050, 13939, 14253}], 
        LineBox[{12058, 12037, 12036, 12038, 12125}], 
        LineBox[{12061, 14763, 14762, 14764, 12830, 13131, 13957, 13958}], 
        LineBox[{12063, 13781, 12064, 14750, 14751, 15447, 15446, 12826, 
         15147, 15148}], LineBox[{12080, 15016, 15015, 13685, 13684, 13686}], 
        LineBox[{12092, 14585, 14586, 12289, 14846, 13317, 13318}], 
        LineBox[{12094, 15476, 14863, 14862, 14864, 12823, 13382, 12891, 
         14426, 12678}], LineBox[{12097, 13828, 12096, 14593, 12098}], 
        LineBox[{12103, 15282, 15281, 13566, 13565, 13567, 14051, 14052, 
         14242}], LineBox[{12106, 13763, 13762, 13997, 14105, 14106, 14248}], 
        LineBox[{12107, 15233, 12108, 15185}], LineBox[{12110, 13761, 13760}],
         LineBox[{12111, 14931, 14930, 13406, 15043, 15044, 11984, 15326, 
         15045, 15046}], LineBox[{12112, 13244, 14126}], 
        LineBox[{12114, 12907, 13206, 13022, 12526, 14038}], 
        LineBox[{12115, 15218, 15217, 12908, 15469, 13194, 13195, 13602}], 
        LineBox[{12116, 15193, 15192, 12693, 15425, 12871, 12872, 13601}], 
        LineBox[{12117, 13225, 12008, 15521, 12118}], 
        LineBox[{12121, 15343, 12122, 15535, 15534, 15219, 15221, 15220, 
         12909, 15470, 13196, 13197, 13320}], LineBox[{12130, 12914, 13184}], 
        LineBox[{12137, 15197, 15196, 12702, 12883}], 
        LineBox[{12138, 15471, 12917, 13187, 13188, 14020}], 
        LineBox[{12139, 13734, 13733, 12035, 13937}], 
        LineBox[{12143, 12918, 13192, 13193}], 
        LineBox[{12144, 15489, 14942, 14941, 14943, 14944}], 
        LineBox[{12149, 14882, 14881, 14883, 14884}], 
        LineBox[{12154, 15119, 15080, 15081}], 
        LineBox[{12155, 14653, 15082, 15083}], 
        LineBox[{12159, 15494, 12158, 15493, 14604, 12628, 14857, 12627, 
         12667, 12626, 14737, 12666, 14738}], 
        LineBox[{12160, 14606, 14607, 12250, 14765, 13204, 13205}], 
        LineBox[{12165, 14610, 14611, 12325, 14766, 13210, 13211}], 
        LineBox[{12166, 15199, 15198, 12708, 12886, 12887, 14026}], 
        LineBox[{12168, 12167, 15502, 12169, 12327}], 
        LineBox[{12177, 12175, 12176, 12687}], LineBox[{12179, 12090, 12180}],
         LineBox[{12188, 14622, 12187, 13896, 12189}], 
        LineBox[{12193, 14977, 14976, 14978, 13459, 14210, 13460, 14438, 
         13461, 12733, 12734, 12732, 13370, 13371, 13367, 13369, 13368, 14135,
          14136}], LineBox[{12196, 12195, 13231, 13271, 14287, 13270}], 
        LineBox[{12199, 14623, 14624, 12448}], 
        LineBox[{12215, 15468, 12952, 13242, 13052, 12633, 13648, 13649, 
         13403, 14499, 13402, 14259, 13903, 13904, 14535, 13905, 13820, 
         13819}], LineBox[{12217, 13737, 13736, 13951, 13738}], 
        LineBox[{12218, 15364, 14306, 15363, 14307, 12640, 14490, 13409, 
         13410}], 
        LineBox[{12221, 15079, 12220, 15211, 15213, 15212, 12955, 13955, 
         12954}], LineBox[{12226, 13722, 13721}], 
        LineBox[{12228, 15483, 14889, 14888, 14890, 13266, 14186, 13267, 
         14437, 13268, 12730, 12731, 12729, 14110, 14111, 13812, 14109, 14108,
          14796, 14797}], LineBox[{12233, 15118, 15117}], 
        LineBox[{12234, 14651, 14650, 14652}], 
        LineBox[{12235, 14301, 15353, 14300, 15354, 12201, 14824, 12200, 
         14823, 14822}], 
        LineBox[{12239, 14637, 12240, 12345, 11945, 12590, 13473, 13660, 
         12659, 12573, 13619, 14083, 14411, 14223, 13618, 14526}], 
        LineBox[{12243, 15418, 15254, 15255, 15257, 15256}], 
        LineBox[{12246, 15368, 12247, 15539, 15538}], 
        LineBox[{12248, 13711, 12249, 12460, 13311}], 
        LineBox[{12251, 15201, 15200, 12749, 15434, 12429, 12987, 14140}], 
        LineBox[{12253, 12252, 12254, 12943, 14285}], 
        LineBox[{12255, 15370, 14477, 14326, 14386, 12457, 13849, 12238, 
         15500, 12458, 12470}], 
        LineBox[{12267, 14331, 14332, 12449, 14464, 13276, 13277}], 
        LineBox[{12269, 15301, 15300, 13490, 13489, 13632, 13631, 12939, 
         12940}], LineBox[{12273, 13778, 13777, 14017}], 
        LineBox[{12274, 13965, 13852, 14202, 14201, 13424, 13425}], 
        LineBox[{12287, 12002, 12592}], LineBox[{12288, 12003, 12753}], 
        LineBox[{12294, 14517, 14516, 14519}], 
        LineBox[{12296, 15341, 12295, 13749, 13860, 13859}], 
        LineBox[{12299, 15365, 12022, 12848, 14452, 15479, 14451}], 
        LineBox[{12300, 13756, 12301, 13612}], 
        LineBox[{12308, 14964, 14963, 14965, 13391, 14195, 13392, 14718, 
         13393, 12787, 12788, 12786, 12789, 15377, 15376, 15375, 12259, 15205,
          15207, 15206, 12966, 15451, 12965}], LineBox[{12310, 14341}], 
        LineBox[{12313, 13765, 12314, 14899}], 
        LineBox[{12315, 13767, 12316, 14900}], 
        LineBox[{12317, 13873, 13872, 14346}], 
        LineBox[{12322, 15209, 15208, 12802, 15439, 12434, 12990, 14141}], 
        LineBox[{12323, 13752, 12324, 14988, 14989, 14990}], 
        LineBox[{12326, 12803, 13165, 13166}], 
        LineBox[{12330, 14275, 14274, 12066, 14276}], 
        LineBox[{12350, 15391, 11917, 12893, 14363, 14484, 15342}], 
        LineBox[{12351, 15392, 11918, 12896}], 
        LineBox[{12354, 13983, 14292, 14293, 13073, 14472}], 
        LineBox[{12355, 14649, 14806, 13030, 12565, 13617}], 
        LineBox[{12356, 14366, 14367, 12489}], 
        LineBox[{12357, 12156, 15497, 12073, 12674, 12157, 13133}], 
        LineBox[{12360, 13990, 14290, 13023, 12528, 13034, 13035, 12810, 
         14730, 12809, 14548, 14547}], 
        LineBox[{12366, 14370, 13152, 14489, 13262, 14491}], 
        LineBox[{12377, 12378}], 
        LineBox[{12398, 12656, 12397, 12399, 12504, 14269, 14407}], 
        LineBox[{12402, 13735, 12403, 12506}], 
        LineBox[{12413, 12411, 12412, 12509}], 
        LineBox[{12423, 15407, 12422, 15113, 15114, 12387, 13867, 14357, 
         15399, 14356, 15400, 12338, 15398, 14509}], 
        LineBox[{12424, 13998, 14324, 14325}], 
        LineBox[{12427, 12127, 14725, 14727, 14726}], 
        LineBox[{12431, 15443, 12140, 12795, 14000, 14345}], 
        LineBox[{12432, 15444, 12141, 14647, 14648, 12312, 13779, 13780, 
         12060, 14021, 14022}], LineBox[{12447, 13573, 14204, 13572}], 
        LineBox[{12451, 13848, 12450, 13846, 14316, 15369, 14315, 14475}], 
        LineBox[{12455, 14628, 12454, 13847, 14318, 14317, 14319}], 
        LineBox[{12459, 12245, 13553, 14007, 14379, 14220, 13551, 13552, 
         12011, 13871, 13870, 14992, 12010, 14993}], 
        LineBox[{12467, 15095, 12466, 15115, 12880}], 
        LineBox[{12471, 14019, 14337, 13098, 12777, 13097}], 
        LineBox[{12472, 12298, 15525, 12297, 13740, 13836, 15490, 12113, 
         15491, 15492, 14951, 14950, 14952, 12822, 12882, 12074, 14015}], 
        LineBox[{12474, 12318, 12798, 14023, 14348}], 
        LineBox[{12477, 12321, 15526, 12320, 12919, 13504, 13959, 13503}], 
        LineBox[{12479, 12478, 12480}], LineBox[{12483, 12328, 12484}], 
        LineBox[{12485, 12331, 13514, 13515, 13512, 13513, 14543, 14545, 
         14544, 11958, 14546}], 
        LineBox[{12488, 12332, 13540, 13541, 13538, 13539, 15035, 15036, 
         11956, 15034, 11957, 13799, 13800, 14046}], 
        LineBox[{12490, 14279, 12068, 14277, 14278, 12150, 14381, 14412, 
         13556, 13557, 14205}], 
        LineBox[{12498, 12334, 13520, 13521, 13519, 13994, 13993, 11989, 
         14260}], 
        LineBox[{12501, 12335, 13527, 14400, 14657, 14217, 13524, 13526, 
         13525, 11991, 13697}], 
        LineBox[{12505, 12401, 15408, 12400, 15409, 12405, 12406, 12507, 
         14283}], 
        LineBox[{12508, 12408, 15499, 12407, 12905, 12906, 13126, 14486}], 
        LineBox[{12511, 12349, 15547, 12374, 15548, 12373, 15405, 15404, 
         12394, 12605}], 
        LineBox[{12514, 12365, 15290, 15292, 15291, 13580, 11996, 13581, 
         13582}], 
        LineBox[{12518, 15163, 14801, 14800, 12264, 15540, 15541, 15381, 
         15380, 14389, 14387, 14566, 14388}], 
        LineBox[{12527, 14609, 14608, 12161, 13134, 12162, 12924, 13207, 
         12923}], 
        LineBox[{12533, 15344, 12532, 13533, 14376, 14659, 14200, 13421, 
         13422, 12015, 13599, 13600}], 
        LineBox[{12535, 12534, 15109, 15110, 12362, 14670, 14671, 11994, 
         14672, 14673}], LineBox[{12540, 12539, 13296, 13297, 14172, 14353}], 
        LineBox[{12549, 12548, 12392, 13877, 14392, 12029, 14674, 14675}], 
        LineBox[{12551, 12550, 12393, 13878, 14393, 12030, 14676, 14677}], 
        LineBox[{12562, 12578, 12563, 14802, 14803, 15459, 12019, 14804, 
         14805, 14053, 14054, 13804, 14056, 14055, 12348, 12614}], 
        LineBox[{12570, 14690, 14838, 13147, 12840, 14792}], 
        LineBox[{12571, 12597, 12572, 15168, 15169, 15167, 12042, 13729, 
         13731, 13730, 13935, 13732}], 
        LineBox[{12577, 12520, 14036, 14037, 13794, 14035, 14034, 11953, 
         14258}], 
        LineBox[{12585, 12145, 14380, 12146, 14273, 15333, 14272, 15334, 
         12065, 14408}], 
        LineBox[{12586, 14295, 14294, 12153, 13335, 13336, 13334, 13611, 
         13610}], 
        LineBox[{12589, 15124, 15125, 15127, 15126, 13629, 13630, 13626, 
         13628, 13627}], 
        LineBox[{12600, 12599, 12270, 15505, 12598, 12945, 13633, 13961, 
         13076, 12714, 14775}], 
        LineBox[{12608, 12557, 13900, 12558, 13013, 13925, 13012, 14146}], 
        LineBox[{12609, 14700, 14946, 13493, 13288, 14875}], 
        LineBox[{12613, 15415, 12612, 14280}], 
        LineBox[{12623, 15178, 14809, 14808, 12212, 15536, 12211, 15360, 
         15361, 14467}], 
        LineBox[{12624, 15180, 15179, 12272, 13776, 12271, 14016, 14334}], 
        LineBox[{12634, 15184, 12635, 15226}], 
        LineBox[{12661, 13669, 12057, 12574, 15559, 12575, 12663, 13940, 
         12662, 14090}], 
        LineBox[{12669, 14423, 14424, 13354, 14534, 13353, 14175, 13220, 
         14861, 14859, 14860, 14858, 12136, 14602, 14601, 12028, 13863, 12391,
          14377, 14445}], 
        LineBox[{12670, 15474, 15472, 15473, 13640, 13641, 13388, 13389, 
         11920, 13677}], 
        LineBox[{12673, 14415, 12620, 13902, 12621, 14910, 12697, 14911, 
         12696, 13674}], LineBox[{12682, 14427, 12890, 14456, 13381, 14908}], 
        LineBox[{12685, 14428, 13359, 14173, 13219, 14174, 14612}], 
        LineBox[{12688, 12262, 15498, 11937, 14625, 14626, 12204, 13838, 
         14305, 15356, 14304, 15357, 12203, 15355, 14432, 12722}], 
        LineBox[{12690, 15424, 12689, 15550, 12691, 15315, 15316, 13447, 
         14159, 14596}], LineBox[{12701, 15059, 15058}], 
        LineBox[{12703, 15258, 12151, 12704, 12982, 13678, 14138}], 
        LineBox[{12706, 15225, 12152, 12705, 12747, 13361, 13372}], 
        LineBox[{12715, 12197, 14693, 12198, 14575, 12070, 13894, 12071, 
         14685}], LineBox[{12717, 15133, 12716, 13901, 12718, 14502}], 
        LineBox[{12738, 13683, 13420, 14199, 13419, 14935}], 
        LineBox[{12745, 12744, 15423, 15422, 15421, 12665, 12879, 13352, 
         13943, 13944}], LineBox[{12746, 14113}], 
        LineBox[{12755, 12268, 14435, 14436, 14434, 14627, 14433, 13811, 
         12206, 15465, 15466, 14826, 14825}], 
        LineBox[{12759, 15554, 12758, 14712, 14714, 14713}], 
        LineBox[{12763, 12762, 12764, 12601, 13149, 12963, 12964, 12751, 
         13088}], 
        LineBox[{12767, 12765, 12766, 12752, 13687, 13480, 13481, 13089, 
         14162}], LineBox[{12772, 15028, 12773, 13095}], 
        LineBox[{12774, 15027, 12775, 13096}], 
        LineBox[{12776, 14121, 14119, 14120, 14235}], 
        LineBox[{12784, 12783, 12785, 12782, 13100}], 
        LineBox[{12792, 12420, 15514, 12418, 13750, 12419, 14179, 13751, 
         13970, 12319, 14949}], LineBox[{12793, 15371, 12794, 13043}], 
        LineBox[{12801, 12799, 12800, 13105, 14349}], 
        LineBox[{12836, 14782, 14781}], 
        LineBox[{12851, 15060, 12852, 12853, 14721, 14723}], 
        LineBox[{12854, 15210, 12855, 12984}], 
        LineBox[{12856, 15467, 12857, 12985}], 
        LineBox[{12858, 12805, 15440, 12806, 14783, 14784, 15453, 15452, 
         12263, 13511, 13603}], 
        LineBox[{12861, 15140, 12807, 15139, 12808, 14786, 14787, 14785, 
         12202, 13624, 13625}], 
        LineBox[{12876, 13351, 12055, 15411, 12409, 15410, 12410, 12492, 
         13209, 13328, 14584, 13327, 14902}], 
        LineBox[{12881, 14710, 12067, 15131, 15132, 12671, 15130, 12672, 
         13062, 13440, 13061, 14156}], LineBox[{12892, 13383, 12824, 14868}], 
        LineBox[{12912, 13018, 12913, 15215, 15216, 15214, 12129, 15235, 
         15237, 15236, 13182, 15557, 13181, 13183, 14169}], 
        LineBox[{12921, 12524, 12523, 14655, 14656, 12363, 13879, 14395, 
         14397, 14396, 14559, 14557, 14558, 14394}], 
        LineBox[{12926, 13217, 12927, 12164, 13136, 12163, 14296, 14297, 
         13897, 12219, 14629, 12415, 14845, 13214, 13215}], 
        LineBox[{12929, 15442, 12928, 11986, 13407, 14198}], 
        LineBox[{12930, 12170, 12709, 14818, 14819, 12095, 14820, 14821}], 
        LineBox[{12931, 12171, 14102, 14103, 13739, 13954, 12099, 14155}], 
        LineBox[{12932, 12522, 12521, 15111, 15112, 12364, 14679, 14680, 
         15501, 11995, 14681, 14682}], 
        LineBox[{12933, 13236, 13234, 13235, 13064, 14158}], 
        LineBox[{12935, 12934, 11976, 12867, 13117, 14734, 13116, 14833}], 
        LineBox[{12938, 12937, 14716, 12439, 14618, 12181, 13895, 12182, 
         14701, 14807}], LineBox[{12949, 12948, 12950, 12834, 13385}], 
        LineBox[{12969, 12469, 12468, 15106, 15108, 15107}], 
        LineBox[{12972, 15325, 15324, 11969, 15151, 15153, 15152}], 
        LineBox[{12978, 12735, 12726, 12727, 13082, 13962, 13081, 14161}], 
        LineBox[{12980, 12584, 15170, 15171}], LineBox[{12981, 14137}], 
        LineBox[{12986, 12860, 12426, 12123, 15144, 15146, 15145}], 
        LineBox[{12989, 12988, 11941, 12859, 13109, 14724, 13108, 14831}], 
        LineBox[{12991, 12435, 14455, 12436, 14454, 15542, 14453}], 
        LineBox[{12992, 12437, 14069, 12438, 13807, 13806}], 
        LineBox[{12994, 12993, 11944, 15506, 12862, 13112, 14483, 13110, 
         14639}], 
        LineBox[{12998, 12997, 15433, 12999, 12741, 14441, 14311, 14312, 
         13085, 14314, 14313, 14006, 12742, 12207, 14636, 12452, 14936}], 
        LineBox[{13005, 14668, 12453, 13621, 13622, 13620, 14041, 14040}], 
        LineBox[{13011, 12547, 12546, 14660, 14661, 12385, 13880, 14403, 
         12016, 14404, 14405}], 
        LineBox[{13019, 12516, 15457, 15458, 12556, 15412, 12555, 15413, 
         12568, 15414, 12956, 12957, 13140, 14309}], 
        LineBox[{13021, 15416, 13020, 15122, 15123, 15121, 15120, 12576, 
         15508, 15509, 13033, 15510, 12588, 13038, 13342}], 
        LineBox[{13027, 12541, 14059, 14060, 13805, 14058, 14057, 14133, 
         14134}], 
        LineBox[{13028, 12559, 14116, 14117, 13814, 14115, 14114, 14813, 
         14812, 12053, 15462, 14811, 14810}], 
        LineBox[{13032, 12569, 13693, 13694, 13690, 13692, 13691, 14153, 
         13668, 12054, 13350, 15009, 15011, 15010}], 
        LineBox[{13039, 12602, 15388, 12603, 15098, 15097, 15096, 12281, 
         13868, 14508, 13869, 13523, 13522}], 
        LineBox[{13040, 12604, 12607, 12606, 12261, 13287}], 
        LineBox[{13041, 12611, 13899, 13042}], 
        LineBox[{13048, 13279, 13278, 12960, 12225, 13141}], 
        LineBox[{13049, 13238, 13237, 12911, 12128, 13128}], 
        LineBox[{13053, 12637, 12638, 12711, 13919, 12710, 14101}], 
        LineBox[{13054, 12651, 12652, 13010, 13936, 13009, 14145, 14530}], 
        LineBox[{13056, 14722, 13055, 13078, 15142, 15143, 12818, 15141, 
         12819, 15463}], 
        LineBox[{13066, 12676, 12677, 13705, 13707, 13706, 11928, 13912}], 
        LineBox[{13067, 12680, 12681, 15038, 15039, 11961, 15037, 11962, 
         13766, 13768, 14001}], 
        LineBox[{13068, 12683, 12684, 14549, 14551, 14550, 11970, 14552}], 
        LineBox[{13070, 13069, 12109, 12686, 12865, 13360, 13917, 13918}], 
        LineBox[{13072, 15261, 12692, 13071, 13956, 14207, 14208, 13839}], 
        LineBox[{13074, 15428, 15426, 12695, 15427, 12884, 12885, 13006, 
         13953}], 
        LineBox[{13075, 15352, 15351, 12944, 15450, 15449, 12445, 13003, 
         13920, 14798}], LineBox[{13086, 15135, 15134}], 
        LineBox[{13087, 12748, 13374, 13375, 13373, 14907}], 
        LineBox[{13092, 15138, 15137, 15136, 12760, 13002, 13695, 13001, 
         14142}], 
        LineBox[{13094, 12769, 12770, 15101, 15102, 15100, 15099, 12286, 
         13815, 12285, 14118}], 
        LineBox[{13099, 12780, 12779, 12290, 13495, 13494, 14515, 14513, 
         14514, 13747, 12291, 14645, 15390, 15389, 13496, 13858, 12292, 13748,
          14167, 14168}], 
        LineBox[{13102, 14347, 13103, 12796, 12797, 15041, 15042, 11980, 
         15040, 13769, 13770, 11981, 14002}], LineBox[{13104, 14480}], 
        LineBox[{13106, 12804, 14772}], 
        LineBox[{13113, 12863, 15551, 12864, 12996, 14540, 12995, 14795}], 
        LineBox[{13114, 12214, 12951, 13240, 13241, 13051, 14154}], 
        LineBox[{13115, 12216, 12953, 13208, 14776, 14894, 14895}], 
        LineBox[{13120, 12977, 15190, 15191, 12148, 15189, 12147, 15186, 
         15188, 15187}], LineBox[{13122, 12825, 12898, 12897, 12089, 13222}], 
        LineBox[{13127, 12124, 12910, 13190, 13191, 13319, 14271}], 
        LineBox[{13129, 12916, 12915, 13179}], 
        LineBox[{13135, 12925, 15070, 15071, 15069, 15068, 12083, 13592, 
         12082, 13593}], LineBox[{13137, 12831, 12947, 12946, 12205, 14005}], 
        LineBox[{13142, 12227, 12961, 13176, 14780, 14994, 14995}], 
        LineBox[{13145, 12838, 12974, 12973, 12293, 13498, 13497, 14518}], 
        LineBox[{13146, 12839, 12975, 15374, 15373, 15372, 12258, 15202, 
         15204, 15203, 12754, 13007, 13689, 14144, 13688}], 
        LineBox[{13148, 12979, 12842, 12841, 12275, 15222, 15224, 15223}], 
        LineBox[{13156, 12428, 12135, 12757, 13999, 14333}], 
        LineBox[{13168, 12430, 15387, 15386, 15384, 12276, 15385, 15485, 
         15486, 15487, 14922, 15543, 14921}], 
        LineBox[{13171, 13316, 13169, 13823, 13170, 15241, 15242, 15240, 
         12025, 15164, 15166, 15165}], 
        LineBox[{13174, 15052, 12001, 15051, 13788, 13789, 13791, 13790, 
         12376, 14658, 12560, 14967, 13926, 13927}], 
        LineBox[{13175, 12502, 12337, 14918, 14919, 12382, 13824, 12381, 
         14373, 14261, 14568, 11998, 14567}], 
        LineBox[{13200, 13201, 12476, 13324}], LineBox[{13202, 12079, 13325}],
         LineBox[{13213, 13212, 14749, 12414, 14600, 15480, 14599}], 
        LineBox[{13218, 15072, 12087, 14767, 14768}], 
        LineBox[{13221, 12088, 12894, 12895, 13121, 14595, 14834}], 
        LineBox[{13232, 13233, 13063, 14157}], 
        LineBox[{13246, 15513, 13223, 15512, 13224, 14176, 14589}], 
        LineBox[{13251, 13153, 13817, 13154, 14849, 14850, 11993, 14851, 
         14885}], LineBox[{13253, 13252, 11946, 13155, 14164}], 
        LineBox[{13260, 13258, 13259, 13227, 14848, 14590, 14177, 13226, 
         14178, 14286}], LineBox[{13261, 15511, 13150, 14853}], 
        LineBox[{13269, 12194, 12958, 12959, 13139, 14631, 13138, 14837}], 
        LineBox[{13273, 13272, 12899, 12900, 12816, 12869, 12815, 11985, 
         15047, 15048, 15050, 15049, 12817, 14746, 14747, 12018, 14748}], 
        LineBox[{13280, 12833, 12832, 12183, 13455, 12441, 13570, 12440, 
         13875, 13876, 14254, 14886}], 
        LineBox[{13285, 13163, 13162, 13161, 13743, 12208, 13465, 14192}], 
        LineBox[{13302, 13303, 13301, 13310, 13309, 13344, 13345}], 
        LineBox[{13312, 13313, 13315, 13952, 13314, 14495}], 
        LineBox[{13321, 13322, 12475, 13323}], 
        LineBox[{13330, 13329, 14847, 12379, 14588, 14587, 12093, 14925}], 
        LineBox[{13341, 13339, 13340, 13338, 13623, 13337, 12845, 12587, 
         14697, 13025, 15005, 13024, 14148}], 
        LineBox[{13346, 12277, 13855, 13347}], 
        LineBox[{13349, 14075, 11999, 13826, 13172, 13825, 13173, 13243, 
         13446, 14183}], 
        LineBox[{13355, 12173, 12849, 12172, 15251, 15253, 15252}], 
        LineBox[{13357, 13356, 13358, 14193}], 
        LineBox[{13384, 12178, 12936, 13228, 13229, 13044, 15008}], 
        LineBox[{13398, 13000, 12622, 15176, 15177, 15175, 12210, 15358, 
         12209, 15359, 12962, 12835, 13143, 13964}], 
        LineBox[{13404, 11968, 13405, 13164, 13491}], 
        LineBox[{13442, 15260, 13157, 13441, 13254, 14932, 13255, 14616, 
         12174, 13835, 14289, 15339, 14288, 15340, 12102, 14470, 14471}], 
        LineBox[{13448, 14206}], 
        LineBox[{13449, 13436, 14578, 14579, 12078, 13723, 14580, 14581, 
         12077, 14983}], LineBox[{13450, 14209}], 
        LineBox[{13451, 13435, 15064, 15065, 12076, 15063, 15066, 15067}], 
        LineBox[{13457, 12185, 13265, 13331, 13829, 13932, 13933, 14522}], 
        LineBox[{13464, 13462, 13463, 13275, 14251, 13274, 13827, 14262}], 
        LineBox[{13466, 14211}], LineBox[{13469, 13467, 13468, 14212}], 
        LineBox[{13470, 13084, 15432, 15431, 15429, 12740, 15430, 12446, 
         13004, 13167, 14143}], 
        LineBox[{13475, 15094, 13476, 13845, 13844, 13842, 13843, 13299, 
         13300, 13289, 13291, 13861, 13290, 13862, 12303, 14062}], 
        LineBox[{13500, 13969, 12306, 13666, 13667, 13663, 13665, 13664}], 
        LineBox[{13536, 13535, 13534, 12000, 15293, 15295, 15294}], 
        LineBox[{13545, 12043, 13544, 12044, 15160, 15162, 15161, 12756, 
         13091, 14478, 13090, 14479}], 
        LineBox[{13549, 12184, 13432, 15061, 15062, 12056, 14759, 14760}], 
        LineBox[{13558, 13559, 14221}], 
        LineBox[{13563, 12051, 13874, 12052, 14769, 14770, 15448, 12712, 
         14771}], 
        LineBox[{13568, 13564, 11923, 13757, 13759, 13758, 13995, 12341, 
         14358}], LineBox[{13577, 13575, 13576, 13574, 14981, 14982}], 
        LineBox[{13579, 13008, 12465, 15436, 12761, 15435, 15437, 15438, 
         13093, 14335}], LineBox[{13584, 14987, 14986}], 
        LineBox[{13585, 12062, 13434, 13433, 14203, 14378, 13569, 13550, 
         12142, 14728, 12433, 14729}], 
        LineBox[{13588, 13587, 13589, 13586, 13591, 13590}], 
        LineBox[{13594, 12493, 14966, 12494, 14654, 12361, 13771, 13772, 
         11992, 14003}], 
        LineBox[{13596, 12499, 13412, 12500, 12372, 15402, 12371, 15403, 
         11990, 14643, 14644, 12283, 13745, 12284, 14018, 13746, 13968, 12282,
          13967}], LineBox[{13606, 12515, 13017, 14329, 14013, 12461, 14239}],
         LineBox[{13616, 12564, 13029, 14465, 14410, 12517, 14684}], 
        LineBox[{13638, 11919, 13387, 13386, 13605, 13604, 12513, 12594, 
         12593, 12257, 13483, 13482, 14512, 14510, 14511, 13851, 12302, 14338,
          13850, 12027, 12395, 15406, 12396, 12503, 13178, 13333, 14574, 
         13332, 14903}], 
        LineBox[{13647, 12618, 13046, 14330, 14014, 12462, 14240}], 
        LineBox[{13652, 13653, 13650, 13651, 15305, 15306, 15304, 15262, 
         15263, 15265, 15264, 13245, 13306, 13833, 13945, 13832}], 
        LineBox[{13671, 13670, 12081, 13439, 13438, 13659, 13658, 12875, 
         14706, 14708, 14707, 14709}], 
        LineBox[{13673, 12679, 13672, 15312, 15314, 15313}], 
        LineBox[{13681, 11955, 12723, 12724, 13080, 14473, 13079, 14474}], 
        LineBox[{13682, 12720, 13366, 14430, 14431}], 
        LineBox[{13698, 13916, 13699, 12781, 13700}], 
        LineBox[{13715, 14068, 12625, 13716, 11948, 13795, 11949, 14527}], 
        LineBox[{13720, 11967, 14999, 15001, 15000, 15002, 13613, 13615, 
         13614, 12529, 14694, 14696, 14695, 12580, 14413, 12581, 14291, 12104,
          14866, 12105, 14867}], 
        LineBox[{13774, 13773, 12213, 14827, 14829, 14828}], 
        LineBox[{13782, 15545, 15546, 15544}], 
        LineBox[{13787, 13786, 12384, 14374}], 
        LineBox[{13793, 13792, 12386, 14662, 12561, 14971}], 
        LineBox[{13906, 13907, 13909, 13908, 12231, 13898, 12232, 13744, 
         14228}], 
        LineBox[{13928, 12006, 13725, 13726, 13724, 12260, 14638, 15379, 
         15378, 12463, 13853, 12464, 14443, 14874}], 
        LineBox[{13934, 13830, 13281, 14252, 13282, 14189, 14187, 14188}], 
        LineBox[{13941, 13942, 14496}], 
        LineBox[{13950, 13203, 15230, 15232, 15231}], 
        LineBox[{13960, 13364, 13363, 13362, 15481, 13304, 15285, 15286, 
         15284, 15283, 14598, 12425, 14665, 14715}], 
        LineBox[{13963, 13571, 12728, 12190, 14632, 12442, 14666, 14633, 
         14779}], LineBox[{13974, 13972, 13973, 14163}], 
        LineBox[{14010, 14008, 14009, 13775, 14012, 14011}], 
        LineBox[{14024, 12069, 13198, 13199, 14878, 14879, 14880}], 
        LineBox[{14025, 13947, 13946, 14232}], 
        LineBox[{14029, 14027, 14028, 13785, 14030, 13784, 13783, 12388, 
         14663, 12545, 14972}], 
        LineBox[{14032, 14031, 13979, 13980, 13755, 13982, 13981, 12048, 
         12353, 12352, 12486, 12487, 12390, 14218, 12389, 13537, 13921, 
         14973}], LineBox[{14033, 12889, 12888, 15464, 12694, 15194, 15195}], 
        LineBox[{14045, 12091, 12903, 12904, 13125, 14597, 13123, 14835}], 
        LineBox[{14048, 14047, 14049, 13803, 14050, 13802, 13801, 12537, 
         13885, 12536, 13026, 13445, 14149}], 
        LineBox[{14061, 13636, 13637, 13635, 14533, 14531, 14532, 13888, 
         13887, 15006, 11929, 15007}], 
        LineBox[{14063, 12265, 13488, 13487, 13639, 12595, 13486, 15503, 
         15504, 12596, 15129, 15128, 12519, 13119, 12873, 12874, 12567, 13031,
          14799}], 
        LineBox[{14073, 13922, 12641, 12552, 12554, 12846, 12553, 12847, 
         14691, 14692, 12636, 15003, 15004}], 
        LineBox[{14076, 13930, 15520, 12007, 13929, 13727, 14231}], 
        LineBox[{14081, 14080, 11943, 13915, 13714, 14067, 14066, 12619, 
         12649, 15419, 12648, 15420, 12653, 13890, 12654, 13891, 12646, 13654,
          15524, 13655, 13416, 14917, 14565, 14150, 13047, 14151, 14152}], 
        LineBox[{14082, 12650, 14065, 12616, 14064, 12615, 14229}], 
        LineBox[{14088, 14087, 14089, 13808, 14086, 14085, 14817, 14816, 
         12017, 14815, 14814}], LineBox[{14092, 12668, 13060, 13971, 14984}], 
        LineBox[{14104, 14072, 14070, 14071, 14243}], 
        LineBox[{14123, 14122, 14124, 13816, 14250}], 
        LineBox[{14127, 14128, 14256}], LineBox[{14131, 14129, 14130, 14255}],
         LineBox[{14139, 13634, 12983, 12421, 15417, 12610, 15173, 15174, 
         15172, 12311, 13864, 13865, 14340, 13866, 12473, 13186, 14669, 
         14844}], 
        LineBox[{14147, 13014, 13938, 13015, 12658, 12657, 13057, 14339}], 
        LineBox[{14160, 12133, 13453, 12134, 15076, 15077, 15078, 13250, 
         14185, 14615}], 
        LineBox[{14165, 13158, 13256, 13818, 11951, 13257, 11952, 13160, 
         13159, 14166, 14594, 14852, 13239, 14302, 14303}], 
        LineBox[{14171, 13189, 13295, 15319, 15320, 12085, 15527, 12084, 
         15307, 15309, 15308, 13423, 15053, 15055, 15054}], 
        LineBox[{14180, 13230, 13249, 15552, 13247, 13454, 13248, 14865}], 
        LineBox[{14181, 12544, 13408, 12542, 15519, 12543, 15249, 15248, 
         12525, 13886, 12579, 14529}], 
        LineBox[{14182, 12643, 13413, 12642, 15515, 12644, 12632, 14702, 
         12675, 14711}], 
        LineBox[{14191, 12256, 13286, 13443, 13444, 13065, 14929}], 
        LineBox[{14194, 12791, 13376, 14562, 14563}], 
        LineBox[{14197, 14196, 13396, 13397, 13680, 14539, 13679, 15013}], 
        LineBox[{14214, 13484, 14215, 13485, 14216}], 
        LineBox[{14222, 13562, 13560, 13561, 14683}], 
        LineBox[{14224, 13676, 13675, 12698, 12700, 12699, 13741, 13742, 
         12126, 14937, 14939, 14938, 14940, 13180, 13308, 13831, 12046, 
         14493}], LineBox[{14226, 14225, 14227}], 
        LineBox[{14234, 12329, 13975, 14327, 14328, 12750, 14442}], 
        LineBox[{14236, 12790, 14125, 13472, 14213, 13471, 13578, 12237, 
         13841, 12236, 14310, 13840, 12877, 15507, 12878, 12870, 14735, 14560,
          14561, 13107, 14830}], 
        LineBox[{14237, 12358, 13988, 12491, 13949, 13948, 14233, 12404, 
         13996, 14284}], 
        LineBox[{14238, 12359, 13989, 14605, 14416, 12707, 11950, 15549, 
         12630, 12629, 15460, 13050, 15461}], 
        LineBox[{14241, 14039, 12530, 13036, 13037, 12844, 14731, 12843, 
         14554, 14553, 11971, 14904}], LineBox[{14246, 14245, 14247}], 
        LineBox[{14249, 12739, 14112, 14439, 14440}], 
        LineBox[{14257, 12922, 14132, 14281, 14282, 14494}], 
        LineBox[{14266, 12020, 13822, 13881, 13882, 12021, 14406}], 
        LineBox[{14268, 13978, 12045, 13754, 15268, 15269, 15271, 15270, 
         13508, 14954, 14956, 14955}], 
        LineBox[{14270, 13016, 12059, 12664, 13059, 14091, 13058, 14469}], 
        LineBox[{14308, 14004, 12725, 15345, 15346, 15347, 14620, 14619, 
         14621}], LineBox[{14321, 14320, 14322, 14476}], 
        LineBox[{14323, 13976, 13977, 13704, 13911, 11915, 13910, 13151, 
         14839}], LineBox[{14343, 14342, 14344, 14466}], 
        LineBox[{14352, 14350, 14351, 14481}], LineBox[{14359, 12342, 14447}],
         LineBox[{14364, 15336, 12075, 15533, 15532, 15272, 15274, 15273, 
         13510, 14960, 14962, 14961}], 
        LineBox[{14365, 15332, 12049, 15331, 15244, 15245, 15247, 15246, 
         13298, 13884, 14498, 14497}], LineBox[{14368, 14369}], 
        LineBox[{14384, 15537, 15362, 14299, 15349, 14298, 15350, 12186, 
         15348, 14385, 14667}], 
        LineBox[{14399, 14398, 12495, 12333, 12368, 12367, 11987, 12901, 
         12902, 13124, 14485}], 
        LineBox[{14402, 14401, 12012, 15329, 14263, 15328, 14264, 12086, 
         14375, 12531, 15084, 15086, 15085}], 
        LineBox[{14409, 12456, 14362, 14361, 12347, 13507, 12346, 13893, 
         13401, 15030, 15031, 11954, 15029, 15032, 15033}], 
        LineBox[{14418, 14417, 14419}], 
        LineBox[{14420, 14074, 12645, 14230, 13923, 13924, 12713, 14107, 
         14528}], LineBox[{14421, 12655, 14422, 14468}], 
        LineBox[{14425, 12120, 13834, 12119, 15337, 15338, 14592, 15475, 
         14591}], 
        LineBox[{14444, 12444, 13854, 12443, 15297, 15299, 15298, 13458, 
         15090, 15091, 12191, 14933, 12192, 14934}], 
        LineBox[{14449, 14448, 14450, 14382, 14383, 12416, 13764, 12417, 
         12482, 13216, 12481, 13326, 14901}], LineBox[{14457, 12942, 14773}], 
        LineBox[{14458, 14460, 12719, 14461, 14459}], LineBox[{14462, 14463}],
         LineBox[{14482, 13111, 12968, 15555, 12967, 12266, 14891, 14893, 
         14892}], LineBox[{14488, 14487, 13130, 12829, 14761}], 
        LineBox[{14500, 13431, 14501, 13502, 14505}], 
        LineBox[{14504, 14503, 13477, 13555, 15488, 13554, 13478, 13479, 
         13437, 14923, 14924}], 
        LineBox[{14507, 15327, 12004, 14959, 12005, 15495, 14958, 14957, 
         13509, 13883, 14521, 14520}], 
        LineBox[{14525, 14523, 14524, 13821, 12538, 13796, 13797, 14044, 
         13798, 14043, 14042, 14777, 14778}], LineBox[{14570, 14569}], 
        LineBox[{14583, 14582, 14390, 14391, 15382, 15383}], 
        LineBox[{14613, 14614, 15026}], 
        LineBox[{14634, 15482, 14635, 15367, 15366, 12229, 13837, 12230, 
         14429, 14906}], LineBox[{14641, 14640, 14642, 14945}], 
        LineBox[{14646, 12304, 13499, 12305, 13474, 15092, 15093, 12241, 
         15243, 12242, 14876}], 
        LineBox[{14678, 12072, 14576, 14577, 15335, 12101, 14664, 12100, 
         15103, 15105, 15104}], 
        LineBox[{14689, 14687, 14688, 14686, 11979, 12868, 12814, 14742, 
         14740, 14741, 14739, 12034, 15057, 15056, 13426, 15276, 15277, 15275,
          12131, 15556, 12132, 15517, 15518, 13293, 15516, 13294, 13185, 
         14170, 14843}], 
        LineBox[{14703, 14184, 13348, 12223, 12850, 12222, 14630, 12224, 
         14832}], LineBox[{14704, 12639, 14705}], 
        LineBox[{14717, 13379, 13380, 13378, 15025, 13377, 15024, 15023}], 
        LineBox[{14755, 14756, 12828, 14757, 14758}], 
        LineBox[{14774, 12941, 14492, 13307, 14887}], 
        LineBox[{14836, 14603, 13132, 12920, 15073, 15075, 15074}], 
        LineBox[{14869, 14870}], 
        LineBox[{14871, 12743, 14699, 14698, 12591, 13343, 15477, 15478, 
         13263, 15553, 13264, 13365, 14617, 14905}], 
        LineBox[{14872, 14873, 15239, 15238, 12244, 15012}], 
        LineBox[{14877, 13283, 14190, 13284, 15014}], 
        LineBox[{14897, 14898, 14896, 12307, 15227, 15229, 15228}], 
        LineBox[{14909, 13390, 13646, 13645, 12617, 13045, 13456, 13305, 
         15288, 15289}], LineBox[{14915, 11973, 14914, 14913, 14916}], 
        LineBox[{14920, 12383, 14372, 14371, 12375, 13528, 15523, 13414, 
         15522, 13415, 13598, 14564, 13597, 14991}], 
        LineBox[{14927, 14926, 14928}], LineBox[{14947, 14948}], 
        LineBox[{14980, 14979, 14985}], 
        LineBox[{14998, 12039, 14997, 14996, 13428, 13427, 13543, 13542, 
         12566, 15087, 15089, 15088}], 
        LineBox[{15182, 15183, 15181, 12631, 15259}]},
       "0"],
      Annotation[#, 0, "Tooltip"]& ], {}, {}}}],
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-10, 10}, {-10, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
But we also know that w[t] is a Bezier polynomial, and as such, when t is in \
[0, 1], it is formed by convex combinations of the control points [1, w1, w2, \
1]. So we know that its minimum cannot be smaller than Min[1, w1, w2, 1]. So \
if w1, w2 > 0, there can be no roots in [0,1] and we are also safe.\
\>", "Text"],

Cell["Here is what this new region looks like.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", " ", "=", " ", "10"}], ",", " ", 
     RowBox[{"f", "=", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"w1", ",", " ", "w2"}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{"-", "1"}], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["w1", "3"]}], "+", 
         RowBox[{"6", " ", "w1", " ", "w2"}], "+", 
         RowBox[{"3", " ", 
          SuperscriptBox["w1", "2"], " ", 
          SuperscriptBox["w2", "2"]}], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["w2", "3"]}]}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["w1", "3"]}], "+", 
      RowBox[{"6", " ", "w1", " ", "w2"}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["w1", "2"], " ", 
       SuperscriptBox["w2", "2"]}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["w2", "3"]}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"w1", ",", " ", 
       RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"w2", ",", " ", 
       RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", "   ", 
     RowBox[{"MaxRecursion", "\[Rule]", "3"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
     RowBox[{"Axes", "\[Rule]", "True"}], ",", " ", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"w1", ",", " ", "w2"}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"f", "[", 
           RowBox[{"w1", ",", "w2"}], "]"}], "<", "0"}], " ", "||", " ", 
         RowBox[{
          RowBox[{"Min", "[", 
           RowBox[{"w1", ",", "w2"}], "]"}], " ", ">", " ", "0"}]}]}], 
       "]"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4000"}], ",", "22600"}], "}"}]}]}], "]"}]}], 
  "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJyMnXmcXUWV+HtJd6f7dYeks6dJZ0UEBIHR4AzLe4DIRAeXoCjEkYBBBYwK
ShhBIKMBjCxClKAGATWgAcISNpHlPlYJO2ELhCUkgSSEhqS700ln6fxenXO/
Va/O4/6c/qPrc+rVrVu36tSps9e4E3845aSaqqqqffasqnLl7pPnTpw8d9fC
HTOW3zVjeX3x8w6cOM7DVfI30cP3S9mTv03L5B9aXwD+gjw/yMP3SDnMw7wP
mPcB874YXnYQJe8H5v3AvB+Y9wPzfmDeD8x77XuAbcn7gXk/MO8H5v3AvD9+
38RC1jzb77bjsCXjAWY8wIwHmPHE75tYyFpnO+92Huw4bMl4gBkPMOOJ3zex
kIVndt3tOth5sOOwJeMBZjzx+yZ6mH1i8dzincUDuw52Huw4gG3J+OL3TSxk
7XO7D+2+sHhq8cSuk50nOy5bMr4sumPpgt0nFk8tnth1svNix2HLH7nH7xpZ
+Jy0q/bjGi/9NBcflv7fzd+oZfJxrffta6T9EA8zHmCeox/q/1U/jIv5AmZc
dvy0Y37oh9LWM87fOnDyiMKOne6vtkhJ/Zuu+xlj/HPAvG83Gc94/zswv/+X
1heYB2DWPaseuF36257Uyvf2yxwH8KkyH43F1wUemzkuYNpLs8kTCn+X38dV
1AO7eXnvl62yDve39kvfO9TPH98DHh8uHWxMvqSlh8EH+qFf+qFf3su4+C7q
wW9g5ol5oz9LLxln1rgooRfA10j5cvKslhX7gvUDZhyn6fgKvGdPra94D/3y
HvrJeg/tKZkP1p35Yh7YN/zO+vI79Ib3MZ+Mm+egMzyn+7fd98s4+J3147uY
d7sOb8l4d/Hzxu+Mi3Ewn9AN2rHPgemP52jP/H1M3tPqfwdPGDfjZX0YF+Ox
ePifpbL/IRMKR5bKfzwAnVp2UBbe0I7nwAfGQzue0/EOLyyT76orUlJv6YDd
55RZ7XT9coo3HeMLlNQzf5ZeUn+wtHs7WSPjfSz/krxnZzJP8Kx/gXraXaiw
L7+m9fkRMp73/fqBV9TTDjxgXd6Q9gPTc6KmyDqz374n7XuTt3Vceegh+HuZ
jjOl/6M9rOdMuz+PLX1Ret1m6H6bf16fayv8wBWTwnzSj/3OGM4Vea7aDXPW
OF/PvDLPfDfzwL6jPfNg6RDzxLwwT/odwyrwjXr6ZVz8bvk4vot5yZo31sHS
FX6nnnOf9yk+jypwbvJ9fM9Wea7L7ydLB4BZD+gC82fpGONhXVhnS4cYB/2x
z+iP5/kO6C3jAg+s3Ea/9tygnd0XjIdzlXrmy5571NuS8weYectqZ0vaA7OO
wNAlYObLnqd8hx2HfY8teR8w7wPmfVnjtP3Ykv6A6S/rO+04bD+2pL+sebLf
Ycdh+7EleAWeQW/rpd9uz5eAJ5Zusz6MK6YjuQL78Cda7/kW8NjySXbdOT8o
+8lzAzz9o6Se9/Be6B0w/dp1ZR8zX8DMEzDfz3gsnwJ+8n18D/PHe4F5PzDv
j/nEiRXj4XfWze5n6hkPMOMBZjzAjIfnGE/8XRP9+xmP/W77XmDmy9IPq1ex
dIXfeR8w47DfZZ+zdMzqbSzdsnoUS2esHiNrne0885ylN1ZPY+mYPV8t/lo9
heWTLZ7Zdbb0yupnLD20ehpLF62exNI5frf7zu4Di4e83+pjLD21ehlLV6nP
2ld234P3jMe253eLp9Rbuks99IR9Az9g5SZK6i3fYPUS9A/fDb2GHtIPpeUT
rRxo9Rq057zYV0sPW7mG3+130I+VC4E5h+iX360cbOvt++GrrFwPzHPME+vC
PDAe5pPvod7CPAcfaPlM1o1x2HPOnjO0Y3x2Xa3caMdp18nKm7Zfe04zHs7r
WG+V8+e+0o+aAu8D5vyFnsT7fqjHM2D6Zz8Ds38t3gN/Xcq7fAk94zugH8D0
D0z/wPF+De2h67QHpr21t2SNw35n1nuy5sGO244LvEOOsd9lx017WY7JE/z7
LF3iOfCFfWr3LXhFaeUc8Il+geknqx6YfmgHTDv2G78D8/twEcjuyu8n43ve
0wOLv3a/gMcWb7PGYcdpxwHM+rDvwWPGSXvOL97P+rK/WRe+B5gSesk6Mi7W
zepr7HlBvdWzMW6+g/bMj933fBffyXOMj/dYeQSYdjxn+UL4LcsfW7sZ5xv8
BDDzbOVmy6f+X/th3PZ8oQRPsuptyTxm1dsS/UtWvS2ZV6vns3oP6IalA81S
/3pygu6vPCX10AV7/lm9IOvMOBgX+5YSPMqqj+nnUM9/cd7xfmDmHxh+xfJl
1NvnqKf8V/WsH/XQOX5n3PY52lFv6aull1n1PM97oEuU2MkoLV/C92fNK/ud
EnzIqmf9qGec9Mv4WQfGaembXS9LD6hnvzIP7ANg7CvA0F3WAby062zlXH7n
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
qFZdn6W1vl/eU+7f6+aFvCvkYeE5+nHlttfGC70dfEZzMeJzSvPo/H+mf3uH
94Nz4//JEe2Sn/GECxuLjg9fPKpX9snp+2zx+xd7hPuOaf85UvBw0zcbvJwL
3aak/iD3+ovXJO/Kfn0wzzwxb44eH/BS8F/ZLvQgld9n9i9QUq/5MFJ/v8aa
gvWDJy8OeXJox3NSTg/2dMHH/ddoPspbNkr+6ePX7xC/1S83qR/tgkP0Ps8l
V3UnvxQ8fyx5SNiZtxLdZyl+rR7p41o5r20cGnhG3Jl7/uHfhngItXstTR6R
dX8puVHKZ5OzpJ9lXv8CTDuewz4JTDv64f3EPWDfpB9K6snfr3zGCtGLPr1Z
6fzZf9ii+R9agr5/3eUy8Wnewrd1f5++Kml1CNZ4VYJdqtxOtdv96i9795pB
BUrqkRegt1Ge9amNMp+fH5TeL720xcdV0c6dC9sObZTnF9+i9K5xT5UXFy9L
9ZDzUvt4T2r/7knPk3nDCuVy5YCDGrwc6b73E00tRUrqIzvUUeOl31xL8OOP
9H5l9MvqA9GjPCN49mHSJc+/lUcPgJzEumI/hT7DF+4v+PJyigcv+HY8Z/Hm
aimfT+tfkedWv6F4N+WeUE87/Bvcvu+b2a8IfoHvjJNxO3p1RZfCAw8eUmAf
ODrwb02NReaZeY/u4Vo6oiB2ktzG5GxXvXa1nAfHrBql8UVDUvo9P+Xn5jSq
PDEkzS+9KFcUPc8nP0yGu+7feytfnjfL4S/P0Y/1W3L7eft1ql/6+ASN83d4
BF5xznDucI5wrqBfjOLcLlB+feOnlX46vijKv9wv9QNZmtplfpTaaRqb/Twy
r9Lv2Wk+6dm7SP3vf6H5puuPT++RPjucN/itA0PP4NuBI3/NBbVFS+eArR+9
rNv+qZ5jkcoDfXuH+YzyN5blUbd5wgQdxpq892l84qWTcxH8Ufd0Awt/Mjfk
V4B/ct//4J9qii6/SMeDgV+kpB69S3QPTSHo1SN8nxHqaYd9iTzG6r/VkfLP
nQnyJDDyGPv2EOWT0nNguYfxl9B2L/rSnd+Nh6v9d8m+K/Pcy8I9LdB16Lz8
/s0V3j4mw61adhB5yKHj0HXkg/jeixDHG9mjJoZzgnPj6/LcXcnDSt+SR8Su
cF+i71+RDHA/T75f3zfx7UTxPsXPdSMK5K/HjibPdaxJmsUv8tE88yt040td
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
8R+VxqtsG+DzWct71tQWIz3X7LE6b4v0/ojfXTS2gN8+fvzo15y/2syp6l/4
6DeblF9rUDwo0SWJy1tyWLfXpzj5Yuakbp3nJe/5+NWfuu6OXy9w63PBPiN8
TzFdlz+uTvVOGzReYvrmlN/a7O1j2Flcu7YD0/vvrg154DjnaMdz6HfZt/TL
eySOda3aL2fe06X23vymhLyByD34RSzT80bns99gnx/A7Yd9WhuKUZ6BpaNV
L713ag+7N8Aq54yO/GuXLq0vkr8OvRxyEXTL6X9ac+uUf9yvU+j1Id8K/rWu
fvFxO70+WPwBq3Nev8j9jg6/fn9hroh9G32frMM89a+avDjc0xvrl8K9D8ip
yK3IQchF1o9e/Mc+2+jtl+5981s2x/aTp1P/kenpubliaBr/Ee7hBua7mQex
O1/zjLdDIycgN6CvRq5gvyLXuvrPf71G8HzCIwMK3PMMPss5W/hQv//ZgC/k
mxS8uCrIe8R7AiN3I4eLvmDG5sTdY7f/1ICXxAm6fX/bXorfPz1e+bjbz2sS
enNFa3WR/Sb6k7+l/iRr3hN+a8GtnX6fsG+ieybP35xsc/z6nE1yr1/b3l0y
/i9+b5DIpxf+T20Rugadg8+H79fzOsS1WT9R19/1R40SunPK0oYidg3i2WQd
Zqd2gGF67/uaPwT7g/veL+3TJvvrhk/393Ig6yfy5T3vJsPcRD/8j7yM4ysv
JZSuv9sPyHn/OIkLWhLs4+xn9Gfsd/QeIvdf9rTKJ39Z7v3JsCc6fN76W+W/
v/G/Q4VO/vJK1Q/PvmBoAb+ZafI9D6jeqn5N8ox87wN5oY8LVur6Td+QODn6
kLv0HL74Lo2fndyZS/FH+bWpI8fKuH/wlZSu91P6s//jqR/bwuDnCIyeLqse
2L1n1FjNK3bMn1u9fYL8gzrvqf5gdoDx24FPQM52433jhBbhX07dgH99iD/B
7w8/QNVzr0oOkINsnvDTk767OpnrNvq6X6RxEqt8HIy0f3hV8gN54aVpXHOH
zmdbl4fRgwsduqdDzofzvt+V+iG9mfbb4WH07Zov6k31f5r6QZLVDti3S59D
niMuRecx+N8CY9cTuvXic96PEj06+aHwoyVfF3YW8kBE/qXzR6V6oNT+MDvA
2IcE7xcF+ykwem7oo9CxY0JeFdpLPy16j+XuR6bxtY3pfaVzBhSIU86654A8
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
pOXQ+oIcsM+lfsAN6f0f+4e8h5IX6KQGf/+eYw+39Kh8fevjqh9unpHz/p9u
Wi/8tY7voL9rPuhxu4f7kNBLunPimLtaCqwD64I85+aj9aAq9Zft+LOXi4Vv
OeKdintuaIc+Rtb7O+tlPd+8Q+nfYcNqi6wL6yTlCal/wlmP5ckD47577ss5
PV/n36D488zKhDhT4k6JMyXuFL9c/HTxy8VP19HJ0/+S6u/n6D0nV3er3/av
9x2v8c4LU33bYSFOgrgJ9MoSb3Pz5rzLz3BSb/C3cfP7jYtC/l3JK3FhyFvk
+MdzFmg+pL8u6E3wa8fPnXY85/D61wPrPd8i5+/dei/jaWmcrMvb4+b3iR69
b7Dx+pCPSOKNt6fxlJe+Kv7Yt9wd9A5uvjraVc/1gxfr5fkrXo7z8Rz3is7P
Hk16P8zPRqh88+UT6orkKSFviWt/w4vBnlMet+3iuPF7kHwS/Wv9fVriT7VP
p4/DJi6b/DSOHvQ2VBXJAwPfSf4Ltw6HnqP3If7o4uA3TF4T8pxgFyVvj8QN
7tvo/XLdeT9/WsgvIefEX0P+CNULbBV/iYdWbhH/j0k/ek/ob+PlaT6TvXt9
HgbypNh82JI/5pEuof8zv5/6W33QmZf453M03uqTb2rc89++oPHIv9/UKnz2
f3290fuhEvdAHAT5E+R+wKE9mufovQ+U369/K09Jvfgb/DXkPyDfgeNDJj+4
Se3pY0PecTeuHc8q/3n6vcQtVonep27xNokPuvsLIZ+Am8/fXBTuv5a8SVXv
J2IXfO0lby/z58hcvdeTez6Jpxd+8im9b6B+fpXY8b5TovvoXeTepQP7S76i
Xx0Z4tmFjswLfmBi569d4+PRHb6vuync30McuNsPN0/oV6SkXvJa9WsSe/ni
n4wpyHzu9qbSwQUfJJTUE9/s1mP0jG0J9xhzr7Hw36tUH537sd4ndeuKyvhk
tx8arq4VfuWRf9up94L/Ve0nv94+UJ677+DaInFMxDWVxw/P/lNfAt6Cx8+5
1ySpv8NnO0Lcr5uvQkdCPe2op53g+4pNSZ1bprVdyv+cu1z5n6UdCfG+brxP
35BTeeXcbo17rt4o+2PmHz7w8eN8F9/JvmCfOPx+6Q29T+mL6/X+afDQ4aXw
8R8GPxf2DfvI4UndY8HP252nH5w5QfMWrmtWf5hbQjype27E5zRO6dmj28Rf
8rDxO3xcowx72oQCeYbIK0SeIc4Zx4ed8ZcQH0k/7ly567k07u6va/LEJ7p9
9JdCTvn5hgbvxyr7dV6IH3RxlBO/EOL76Id+oevQefYJ+0byY7y9Tf2Pvtar
eR7OeCXZ163jJ17wJfXMA/Mi+sdfP6FxZX2va76pvhDfRF4t8mzJvWb116X3
H76TkGeJeB1Hx85bHeyzjt4VVgS/S5EzJuk9BC2v94h/xtFTQ3yLnJvn5qJ7
5u9cFOJTyvMcuXNC5I3/WJtcI+zMo+KP8fmzwn2z5C1w7Zc9nRO58/HWAUJX
Wieq38andq/WewRfTvM2vrxrwT0+tEP0n1NHf1XjN7Z8Pqf89q4b1W9w/Dt5
/P4c3r80pLYIHoKX4Cl4C93nHJDxf3VN8j9uvm4qCr5e1hniDf4o+PG2xsPv
+DAh7xZ5uFh38AA7lcihTVsT7nF363Jml47P5dkg7wb1tHP7cXyd+hP99m8t
hf3d+396q9KRn61UfeG4VcnNrqPvLEjAa/Acug6d1/0Y/KPxW5a8eDXNRUrq
JY/Cnpu8PzPv4b3gHXgo5/KuaXz0aesTzgnOjXL/X4eH7lwvnNSt/MmoHr+O
rKuMty/4K4od4KzgD8c+Zd8Kmk9W+uHyfLn53L1d9fHJqHGFa0Wvdbv390Xf
Nc0VS9P7Zxem/rejBxZaXHd/DvllyGNDXhu3H2uuro3yXLhzg3PEvf/ba1TP
09TdWEA/SN5e9/yUw/t8fJGbhysna77LXeb2k3V5ZUit92dFD4JexPG/S/6Q
3l+/pFvzOczZrOfB/M2Sf7TqG5ovaucLmg/M8V2u3x/+tcnrTdCjwHeV82FO
b7u/K2e+5/NukYer3P7g8kJht5J4ltWpPWq1ypMXrawqihy29xLl495Ym3Au
S37B0jmNfljOwRc3J5w7Lh/YpaVziDxh5A1Db4Mex8kt/zla76Oa9Ydhmt92
nzVq11ycyPinXKn6/KlfWZWnpB49qssDMPm3G4SfHDZF7Z7Xtm3Wdds99WP8
7Mt59L4qT72fkEeLvFrYsQWf3+1N4IPd91xd4ovlPt/B/b2/oqNrDwzR8+Tr
q4L/osOr56pbfJ5ZN597PVPt76vCH9E9P2y22vsuPHGwtx+63z+1T7Xuu58E
f0TuieTeSOyRQvd21sr9JNuv75Nz9zOj6uRcf+ga9dv97njNz96261bhj5I/
bFG86PlQ+aUdXQl8M3w0+a9kH1/WmZT7V556Ungv4/iqK3f7UPMUPN7l5511
EPvqqSFfFnwGfIc7z8bsCP6K0FHoKnoZ9DSivzgixFUzz8w7/uROf/DpUWrv
OuUapdefv3WQ5pn+j1Tv3aP+6VfM0vxuf586uEBeCvJUSJ6dcZv0+35Uon9y
ri7xdgXmnXVgnpl39ADoBYRfOCfkIyEPHP4W+PnhP4leEj2lngsfarxTZ5e/
77c8nszp2dC7yf27f6spXuno3gq9f97ppdFTC57PV/p18MIQ51/uN/Tvnep/
996wJuHr798Q/NzK/WvW7tZUkHP5E0+rfHDZugQ9MHph5GDkYvQy6Gnk3PpK
ev7tsyIv9P+iu3yc1DdceXsKv/y2+I9dcrXaY5fUtai+7juv+nvXWOdo3Ut4
Bt6BR+AVein0VOTDlvU+Mr0/52mljzO3rhX9/JWHBn97R29bzhor59uga9Q/
YUHDWJGrdzu8SejGES/nZJ5fOUv9MV1JPfuEfUMcKHGhjm6uuH+oPD9/cV2R
knr8LkV+PX5VnpJ6x0fueFPjfXd8q0bky86BGpf70Gt6f8g/fx7oFXIsci1+
ew3u94Wb8thhsMtwf5LTRx2zm/oj3HCD+rneuGddkTgr4q7QE6I3xI4peZB/
FvLPI2dDl6BTpXG3/uoS5VcvPVPj//dp7O/9uCTO468bVF978SrJt3F+W0pv
5g1T+eLZbWI3W9ReLfN679UhPzp2eydXtvy9vQAdLI+jSKZrfobrSjDnCOdK
5M9zSrj/nbzcyKnIreTpJG8neTOx15Lnj7x/bn7W7d7P+ye5cX+5SeHj16tf
mcuDRF4k8nbi/4GdBbsLeif0UJyznLvCb0xM3//aWq/HQq/l6MCCNQPkHJt1
Qo3sr47NzTKPBzyv+H5d2bxht8GO4/B47M62ghvenMvUz/amZSOU/92zQe4P
XfS5dzWP4g82JvBt8HHwEfAVMn+fSvPRvNqTR2+NHlvmf2FP0t+h7TWb8tjR
sKuhV0bPXJ6PcuTf65w//qSfzlN5/8ySHIbdAzsIeRexo4PX5f7Na3bNeX9R
137hz7fLunUP1DxCjedsT+87q9F80rcHP2rshNgNGRfjdPmqO76Xxv/v81oe
uQ05jrxR5JFy4/nn/mq3vX5tUwG7Dnae8nxYpx+d5mOcm/pTXP58Hrskdkp5
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
j/Lf9U2zyWVjc5lmHRT5ga+sCfwV2B/1I5fPy83RIueGTLFbOkidAHfs2ASP
hAb/qZNpd1s//eRkKq1bWMewbmEdE/V0FtP16pFmzdrkSfhluO+yGBvbifx9
VrVZ295iiTrx9Z4SNlQzlylcc7H90gG8H+kvlgtp/SbztDuWIwsZC+NxsYbZ
eYy7ubfd8VzED/IkvH6dPx1Ug5k85g3VO9BD9eh74T2hR6BXznXee6HDJwvJ
DxbP+6Ux/dOn9mrpkyPpDeiRytlHy3SauJCGMwY2atvOmrjv/Oam6qUgyxO6
HSjvZUXChow8e6+2guxv/yHUcLYVaUTbVdDr0A7XoR2uE89fpTNPej3sPYXL
YaNd2k7U2/OF2au2/L1N/b/stkG9k41r/2V9O/T6+XftF6Ze0dTNwXz9lqN7
escFfmH22c+du9TWTNi3VlHRkNYj98bJ6R7WGmTS6kS3dpttSIzr+sZXW2mT
fdNfXk6uZUOSu82371isJV2H++A63Af8EMnvlz3MUC1nor6qORzW1yLoJ9wX
v5NE74vfSaLX4T647hW9D/TTUKrHMjofa30qM5+ZNtTf7E+rYkkPQS85Uz10
meoltMN1jRuENw65WsD8DF77U2dnHvOf+sL7Fa9dyNnHnT9cOq3PaSxZa3il
mTNhvX+8fdfBRlxfTZ1JsXPrLSXeNgTnCHv9fa76M9+arI9ffnnDJGdpPOE6
3KeIXof79KbX4T64DveBHoRehJ6D3lttuOD3OV4vPgvd25Lh9eS9s/0Cfr8y
In2HXllm0VKNNI54MHyUZT4zoGm+pf+RXBp3UiVJaupLLC7XIpPv9uwZqVPO
eF0KmhsWU8iYt9No1Xm7Hnd+jeb09b68vbLb0Xw0L3dRDFwbxstjVp3//N9B
da7N6W5Dtpw3IfPc5vcf2VJV8g937J3xcLWngWSXr1x56FldXXVS0Lihneo4
E/JK321iJG/3dbTITnzE24GHji3yCfj8lyn5cdn07bVcFu1W0ev8S/b/GJyl
J9nZ53MPDD5ZZkPaHD6+UnWKNvmebpZRz8mWXFPfsXvLEm2ibf4oySjNlhjU
X//SKUabtKbtIuh1V2m7RHod2uE66HnofY/7w393+FjI/Hdh3Ss3jXKmPMI1
Rv+IHfk0aVfEQ0MHMqSBj0dApjNJ7h/+9XQ7Z+k8zareD0MTU0oZlKjHdbiP
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
b0xT7UUGXInu05UXXvP+8bLFHRNmGHDkzbkDgV8UxNzt2tmuiw042JsBI/7Y
Hw4oZPU3qv95yY/nY8df3p/Aj+cr0yb63vIrZ8+tebHt+0x10r+1Q4/l7o7E
dJ/X+FYbdLnvGX2/HuHl1RlN1Hvwclvjx6Ur+XZjVp14PJ2/rlWRU7bfNIon
xdsd17p1TXf1KWBtr7xRZ0vzmFM3Z+z3XG1DFtdKCBu0WFviKzu8ymFL90aG
HEnOdGvH68mSKJ9rm3i9iXq0Qz3alXI+muYf1LiGn7vXqcvbD1fNjE97TjQj
5j9b6u3l9dfITWRrUu5Lpvh2H671qDTWY6MtMzk0m32Q+OzBsYJkZq/hlFfO
07PZH/p79Qe1TWZQj3YXtqTuzE4rZx2y1Aq66GgQm4/z+9Y2fMKeSL930GFp
Agucz8xxXX7ubabB1TscxwXtU+MefVn2JzbciEx16meXNShG4uVsGeSQ8v6j
Dqe/Sv3S2FP2JDqra+b1pplsXrcnV66nJzDaI048bphRyI7evaz4+JoiZs2i
25YNKpxJUQPLk2O09bmZrldJ2w1X2DifqGEP6/1gw89HWV6b95P1vziz18qM
ELYi8plvvrqatC4HkD/+h+6qc0lXeqqcTjEhn1wG7zzMl3tGNly+l69fPK9O
2w25JqTfnd3flzxS5/QHhg3XVeLAMD/DN1xU4TpFrnBU76ZLPv4X4+Z2QYVr
0tKsuXPfTGa7f89sp5hcdoGR26wR0zOZ689NQvrH5bL79Wp7n9EzkOyABmsT
1jw3UOVgn1nuDPX4xcuemkP8tGfrkX5XdoUX8nbjsJxaWQG8HWlaN/LaNX7d
rXsitfQ7vw4v6+5605xfd2P927Y5wK/D4ZOXBY/SypT4kpkO4f3va2ey34P+
jDaen8B87Bk9smvsX3Z/PRud/158E3EEmpgTbW/TgVy6Btd9b7vHvR/lstY9
s6cmmGcyDd787bDNUkG2dpm87uV3GXfzT1v1hT+q4Hv3V0TH2et9YtfGpCd+
6/qZnRO8ad+9fm9ZPa2jF9W+fmJJbO9a7tffsvOsm/wN//yJfdjM7v6DW2/Z
8K5dDO175DPFd+o5flhZwB7p5zDjagHlj+PtUR36XHjOP5eumLQv0+Bibuj0
azbAnAyzP3r+mCVvx6buHdtIR+bliP97w6SBni7X//SXp3ettTmX9oG1Zlyx
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
   "], {{
     {RGBColor[0.14800000000000002`, 0.33, 0.54], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxMnXWc1dXTx+/u3u17t5dl792kFlARsFvEIMREEREUUMFAwMbAQgUUuxED
QVCwWwwQxRYVAbvFbrHj+bz5DK/f88d5nfme74k5PWfOzJzWUeP3OSY3kUh0
75JI5Mk/qz6ROFPu7LJE4p2KROLUwkTiHIX/W55InCL4BkUeLXhJUSIxSd/5
JYlEssT/8uSfKP/r/EQipyaRuKg6kXg1lUjktiYSJym8W7PyUZ4nC56UcJpJ
keeaIsfprbQ/Kc5XciPIM5NI/Kp8fpHLUZxhCntacapqE4maykRirL6ra/19
RMBHyp+iPL9WHm9XuIz95C9PuT4XVSUSM+T+KU4kflRexyhssxzlKzwfEryz
8Hw9mUjsIbeBwjfNMVwnnFfI31NuQ4XNl9tLsJor8UbS8EYKWy5/d7kTBD+Y
YzirOPNynLa94HzhPlxlHSn4NYUNkrtQ/zcT/tMVXqfvF9OJxAtyDwvvjVrd
tl2FW0J985/Cn5cbJveI/k/Qv9mq481yreqH5yLPJrXD7arnb/r/qOp6Z9r+
b/q3qdxA8Mx1+/5c7fbFP1N5Hih4nOJfIf9yub4K20nuUsGvKvwq+UVKO1yV
+01lPiJ3gcIulPtAg+li2lruQ8EZlTND8H+0s/JoKnL6Z1L+vlrwy6pjoeDn
5T8pHE6Q69uYSHymMfCe6lWmNFcWGp8zlN8LSePVQTh8VZpIpEv8nzJnRLmv
FTrsjIhL2ucF76/+f6XIcalTH7lLBB9ean8LxVmkck9XvNPkOqndF6rdals0
JhsSid9pU7lcwTlyBytNqtLjizF5nsZ/k9wY4TRF/fWd/CFyT6gej8sNVZzb
atzGI9Wln2tO3V7kMX+g2nao3ELB39a4HanL70pfWuLvIcpjf7nTC+0zvk8T
vKHKOkD+8cpzkvCeqfDR+u6het0jf5TcwRXGd4Xi9Iox0KR+maC8lwuHv1XP
GuWzn+Bd9O+ZGCv5audl8jeTO1rxH1L9f1U+uQXqO4X1jXxWKt4OgjvJ306u
j+BG+fVyOwo+N8f9n1S6vAKPJcpplHtK3/kF/tde8Tdm3il+bq7LnSucH2HO
yZ2s8B4VhllPfkl6nDHGXkq6rAsV/r7w7Cw8/1Se/Qoc5+GE69QncP5O+Gwv
uGOu24S6NAjeVv52cm2Ks3nS38C94x/zq0T+wXIDmAsBl6q/9slzWuK+J/88
ue0V9p7cIYIPivr15J/wWavwLZMezx+nDRcKvk3hOyX/15Y7Bc4vJt3OU5T2
qKTxB2ZB3zzw/CTtvL6L9WDzWGcKYh4z1nsrbBO5txS+Y65h6j4w+p2yDpQ/
TO5vwf8Kn4ME58m/KeB/clzv4dEOJySdZorCb8xz2tw8/x9B+yTcDiOirZbE
P8L3lz846XG0UG5vwf3kn6Y+6if4DsW5qdTfHTRWe6t/exX7H7gNkD9O8fsn
DZ8lHP5TfbdVmi+V5q48/yN8fbyjc73mTo+1a6c84099dwh8aNtX5O8s1yvH
Y6RXtM/Hue5Hxuz9Sbcp7XlCjKeM/AV5TsuaOS3pvqffv4/4WcUfKX9ojA3i
7hLxh8g/QO4q8FE++wlelWu89gvcgPeP8L/zDNOG30f6YfLb5Rkmn9zIk/8r
o1zm9fkxVsnzE60hL6nNzla7fKR1/kO5KYI/19q4Ru5+rRkPKexBuaTm4usp
71dVSnOU1swP1T9TmrRupLzWX6O0r2s8XlvoNX90qWHm/vmK95Xivyh/EWuA
8nhX34dpPzhF8Q6V/6tcvcIvU5y6IsO/si7Lr5b7Kd+O8tnbG9lPWKf1/ZLg
nnK7FXqfJ2yl4owVnr+rrhXKc4nK3V7//lX4bSrrDZU7T35tsdOxj3+k707K
5wP59yt8G4VvrfALld/WghWcqG02XCP/XsW9R25Lfe+u9Xyg3HK163lqv2fU
ZisUvo/8veUGCm5T3KzyylA/7S3t5X5Rwec0u6xZ2oNeTrk+/aDPlM9ttL3g
pfIHyN8x4fz6xPdQ7aWvpJxugfrsTuG9WaHrum3Ul7quKPX3vhXGaXf2iZT7
lfa9Tt/t5K/NN37g+afgW5VnS4n3g8XaBw+Q+1p72lOq67/gpTi36/8vKvc/
aMSM/QeE52ztNVnln2FN0vcWyhOatEG4bCn4cOaI8rqmyN+PKc+T5Q5W2Fjh
uJnC9lS/Feu7PuXv0yCy1MZH6n+x4paU+/8KldtP7fmC8Pmh3PluFfluEWWt
VZq/hdtTijOto+a24oyW35ByHRKKd7Lyb1a8Jfr3cdCm0KWPiF5ZLEJxnur0
eaHb6A/aNuXxStvdpHSVaoc/oi3rYgw/WOJxzPg9Vn19pRqhVWPyFcV/ucLp
VinN73Lz89y2S+T+KXS98cF7pcr+tdg4raP1FLZAfoHi5imPXLnfRLT+WO9+
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
ORszf1TP0+AzsXeWeB1jPeuhuXM8baL+2iHtsIuYj/SbvqfIjaCP5cYnjNMt
RR7H7Sr97xiFf6B4i0s9XmdFGuJPzPFau24NV54PC8de+p9X6Tx3j7F/SIz/
TsWWCUP27KRW7wXd5W/HfiW3qNj3aDfKfa40vyjsZ7mtleco+SPlmlXGN3JT
5HZRW52hOT9F7bq2k/aufI+ZG5LmITHO70z4LvlNfX+q79eUbpzWmgqNh3nc
+ci9rPJuL/Pac7T68U6Vc4fcGv37ocJ8ppO421G6MxXnAeE9U+PoOrlL9d2q
NX+Q2v1Y4d+gsq5SmoXwpgRfIvhYwb8pv19rzONLdPC9+ytNvrdHHo+7+2eK
zCPZPMdn0HVnZsENcl1zfK+0S655vpyjf9B3vfxpCfNt7sr1eaFe7d9ebrLg
DYRfd7l2Zaa3Z+eYb3NlwnlekfC9w9555jn8pji3srbnWAYQWUBodfjWm0Ta
QxRnbo7PDv0ifhfOBcrrWzlVLXF70rI30ICzoU0jDjwZ6Gro7j01PveAbgha
EvoSevJN/fuS8yV348L7a86Ccl8lDI+Vuzy+gfuWGR4j96LSfiFfwyKxifKc
pe+fBH8KD4gxKHc/NHzUkbhfRvjZ8Q1M+3CfR5t3K3DakXKTct3u2Wh74KnQ
J1H3i+R6CZ8W9mLBJ6p+J8gdI/c6dK/cg8go6Lu/XG/1eVux6XRof+R/aNMe
yru98rkXHqjg01OOCwxPnbsKeOznyW/N8bkGv0PAxRqTRXJ/cA+n/NNy72qc
LcpxPanjCwGfD++aM0/OOlHLdefrJ3N8dqZPlwieIX9XlbU44uATTrpb5JYG
DF+go+BPCM9xnjdG3ksD/rnCcdj7vqwwzsjmNcpvznFbrlFZN+T4rMp588YY
b4xl2p02R7aU9QTZ1J8VZ07Ax3PuiHmzNsYqcqrIq84PmDPmLTG2Ny5yuZTP
WYrzFWcBZME4t+THOXpO4AOPAV4D58tVIZsAvDhpOoH7qWsiP8bD1YELYwlZ
qWPyfP4Yk+tzzMkKLy/2uYa8/lGb/KvwWrkt9T1W8U5i3gl+KWDup06Uf7TS
Lhc8NcfygcDwCYYq/FZ4GHKvMfdqLTfIHvd1ju+OTpXbRnkeqTSn5ZjHdWme
+WN/xZmGe5CM1pKSSp97/sjxunI2443ztMLO0Peh7D15zmdrldVW6z21Ls/3
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
bpcS61TQJ+AJvc6alom1DbqdeYXPmeUa9fPVcq9wJxNtDO/otFLTikfJna02
O0tuiNaCWYx5+FXyn9P3XVq77kQXQ+5cue6Kv6P6sUjuUbXxXar3MXLPKs1R
Wu8/1tjqq/Lugq8rdy57ltbAMRoD11VZ1wTZb2TAXyh2e9HH6JkQ9ob8zYTL
plnTGpsqv7kq8zbF/aTaMtDUaY3KfLrG+9EByFvB8xQOuRnrG3xYHfJlrJ3Q
+F20DyvsQe2bc+UGC75F/m0p8y/PSFg3sEuZefKPwt/W3LylwWGduZcq8H3Q
gSnLrrPGvKCwDeSuFXyNXIFw7VVhXZ9GtdFnOW5veJiHtol2Uj63dVB61e+O
UvMwj8maJz1O7vkW3zMd02r65emgZ/ZU2z5UbZ7hV4rztsr5osV8XeJzJ7VI
/x+tNq8W2uT5AtMSX8BLlntY8NXyr6q2nkk7jdtauanIKmWtw9xf4ZP03Tv4
w7heBT7XbKU4h6vuh8n9IbhH0PPHqqydK0zHlaq9/oKnWWSdnrtTzgv6mTMz
dOx7CnuXtV7lLFe/vSLXDj6q3I7wn1WXocJrO8FDgq7eKdJerLwvkvur3HoI
2wRNiLw5+W1fYPqrT4Hv0VYE7c4Zn7HVN87s8LqhsTaIOc/c514M/Z5XSz3f
9lI+e6b9jU5kv1g/n0r7P+nQHWId3VH511WaD15eafquX9B4C1OuH3XbUmVu
AR9T8KcVph2hKdHJQTcFPZ3xao9x0BfB99oraEv46XsG3BS0/fqz/N4R/mfa
4zQ34XLgq4Pf+zVum2eE8z/wOgQfqjg7Ks4OtZaPRq/nlwqXcXuN9W/fZ/3W
POgr16HE31WV1leqrjRcKHdtmeffNLmtKtyXx8h1zlqX6TW5DdJev1lHN6nw
He9k9M00p6/XuPmu3P1+QK3xPEJpx2ath3Vsg++Rn1f41Qr7QHHfL3e9BhZb
J2JAsccvvLHNK7z2TOF82UnlckfYyXOpf9DhrDmMCXgj6Lo9EmGXaa59SJ2U
xyzur7M+Y0/X9zTOVip3HHS33FTV+250iuWmqqwbNLc/EHy9/JUt1hmeKv+3
VtNpJza7zBVR7tvKew+1y13QMcpvKGeFWGP6xnqIzOPKiJ8RbiXC4d1y80Te
if2I+9K3A6Z/f0p7Hm0aPCDGP3e/xOkCb1ptfIjcoGLrfL2e8d38TOV7Xbnb
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
zh6xv2S6WS+rvfyPWjyHnmixXdaOsScWqC9+zlpmAD3pDjXWv31B+b6tOB8k
PF72iDHzWYvpxw2aTFcxp6HreXcIvO5JWBYQmUDkBjdssIzY8ITtoO8uV1fs
O0HuA5/M9ze2N7HViY1h4EMS5vFzvwOf/9ZOttuA/QZw4YzNO/C8j9Aadee8
jy3i/sLzgxb7PVuNwwYNrs/AwIH8KX9A4MCe1j/2NWyiY+8dO/jYgn03xv/I
WIvpU/ishMODrYh8ymPdJM4dyv9K9JvkJqn/sx2M23st5tFw7t65yW8z80bz
Q80esxWxlvKW38YlfrMTvib8zUHtLZtHHOTzsClPm/6e4zq1j3pNRie63Hbw
dlaaLPKMFbbbhCwEMhHMfeQmkctCVpA30ZAX3FVpd6m2DVLeVmgs9vsKz5Xb
5mOXUr/V1sQ6i4wgcj0pyz3VqI0vzfqs/k3chXLXiV0+cLk633ZUsacKT2kz
9c00xmyLZWR5R4T3RCibPJcnfG7n/D6/yO4jwfPk1zO/U5bBmBdyV8hcdUp5
bMPj+KLF9o0/b/FZHpjz1fVFLov3SvCzUe4drLeNxm8T4TYVeSr5PVptQ3yj
VrdxfbTz3vHGKv0A/6lnqeVSN64xfxy+N3TipiWmFbE3g50abM5gfwYfWzTL
wz8i5Iex+YIMMbrb6G2z1sC/ho8Lr5h1hzBkmGco3YUpv1P4XqtpkrEaS1+p
vu/T5siFphyPOFcqvzsbXAb0PnLD0PzsG1vGutrWVfucxk1n+TcXOfwqzhfN
tkmObXv2jcExfrAnObHM9iG719hOATYKLiq2fX9s+m8Z+xL5nFcT7wrQ97GH
sX+hy7pON77c9uqwe4dNucqOlrm5tKPbN6fUsr+lrYZL5BfGuzS8HbN78JXh
2Q5qdtxixdkWvVe53dTPH6SsF7V5wvqHhZH2MfXLY2X+h636TYpty56zAzA8
AfaZ3rHX3JL2HGBcbqZ6b1rtN3KwrcB7OeRL2CbVxm+XNt/rFIienVrtO2bu
l8/J9X7GXja1m+W3zpefV2u67eWU4VeCDv++2nYisBGBHBz/sfmD/WFso2OD
mDGLbXTsol+qNPsVW1drhsq/EH5ilcP2j3BsEa0fj9iRyKnxGGXPfz3oB2zs
A0MLQAchm8d5hLAVEefxeIf3bLX5qYXOb2yhz72Ud1jCc7ABWlZwZ/n7FPud
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
zrHGDav0ugEvCD/L6INj18YaSBrOoczpzO2clY4LfSR0gUZEeyITRKcFXUx0
V8AW/D3Wox5p2/hRr3EKdwteB3xc+LnwUpADIA9gj81cSzzz4O8pr9fobYKD
xV6LM+PaZabRh8EXK35C8c3KOZXzKvLK/8Waw/maNYOzLf524QdDT409xryk
zy/IPjmnHJow/2G+6EMSlo3Oj7ysOcj6WXdY0+fFus4+Zy7fV+ZyFkRe+uqr
Sfvw3b9kniz8DmTML8e7xqYsL4e/MS1o9Cgeifrw3r1inuC99HvK+EfC+8qZ
8Y/Yy8Dr5+wGT2Na0vxDeBTTk+bLIZ+dFmt9TbllVLT5PpGG/4g8hnjGGj7r
WZ85s9OWt0R7Mu9A46t3+3I/47+QljUdGRl79DvjX/D89kjDeYY0yJ3xNX9H
jCn4AbdH/K+xF8jFuLszaMqfEfX5Oel73oWPDXwPYzM4KPoq/Z9xUBX002nb
rG2BXrTS/aTr8nLv+zgPs/cbVzIvC746smhC7OLxv8y8hT0vWBlg8bDm0U/p
r/ThjQvW7Tq/yuMVHXn2nT8mvd9BNgFWObqJ2HowZ7C//7TMeF/0b/CqGNvs
OWmTs8pdN87pzFOUx7djq0Wa1oRl58moJ2dl6FsSXhOWx5oIvjW4Fdi/UkZn
tOFtQXMmYhxvFX2A9WXL+NfwI+EVwifcqdw8NdK9p3Bk0vu/HvEd8Dc+S5lP
iw/fT1L29Ys+zJ7MKynLhsDA7MZh4rz4e5nPjKcEzZ7zr3LzGeGj3piyb2DK
XBz1Qab2u57/FnuLk2uNj4NMjrPA0jLzGZjD0HdjjGB3iYyPvSmyBnQzsIf6
NeX1AhtJbCVZR7CL/CVlDCTSo2eN7wt0rdkbsUdaqcy2qf2Cxtcx/oupKxhK
6KmAycN81T/Gy+Mptxd6GoOi7Wi3AeB3wQNNGof89VrraV9Ubj5yQ/Sj/jFX
z1bao5N+108p+/omzcEx5zA/4At7o6T5GPgfx/c4PCvOKdgiwsPBPoCzLjYC
a0T8iITPm7Qhcy++289N2RYyn7YNCmdb9HPgj8DfQA8HmvnkmeCH8d7BUTa8
u6tUh6Up6xp9X+72oj74eob30hLfSNsyXvDFjU/ubj/d+AtH1naewsOTLuep
lPsVelebldsvO+XA26Vvss6Cx4F9EfuGmTFP0h+QxfBd8NXvDvkY/epIdYoj
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
UbdL2CtiF9PDvsvGFO3bjPV3rOiP0/ZTjb/qt3oYi/igovGI8woP1rUpe6RG
x6tqXb7gxxWddoLCiUXjCbcrPELXGVVOOy7SD1a6f4pereDrwKLxv7fJmh6k
9MOzLmtY1ti/E6LMUfGP+b/UZXzUB34wNDxhdAd47+9R9j+jTJ6RZ3CcB44r
+hzxt/KeQF/K+jqePLQfGLS0ncIji6bfqlpxj34LbXWUrtcT1kmEZt0hP+cl
zkpn5t2e+P7mOjrSf1I0TTvPbHCZlE++4+KsBX181JPwhKCzRfsqxu5vj3rT
E1ROtcZ1VckYOZRxbKQH+w8MQPwI3dHb9GU93B/HRJ+kH3APzuTdBZ91OefO
YOzqehQMoILvD8PHRsHxxIHJin4quqnXFM2/gHfRVPS8yZwJP4N4zqSH510O
ZWLzdifzgcI7iqbBLGW83FM0/mVn+Fc4Qunf1TfcXrQvCZ4Rz36pO/9+att+
Cs8pGhfu76LTvxN4qHdE+buq3c7mvytNn6Lp2fzfeucd39PzNOtEp9Jfp/Fy
WtFYjuA6Qtco/f8Unl70fu1M/jN1rnS+yZH351qnAQP89EgD/Q28v6L9fZ8W
6Sn/DdXhAtEHan4+j+8rGosYjGJo9FqJP592Q4+l6HtofBydF+lvqnOdqE9v
jdlSo+/7NPq/7NnT8zl16Fnl8MGgv1b8/aK/Uvi8+vO0os+k8J/gQ8Hb2hE9
HdoXjJwmfzPrKese8ax95JseedmHsBfiOfuRW4sr0t4S5dwc6Smf/nyK6HtV
5pZ17pN7aY56QO/dvWhM8l/Vn/cQfQi6vQXTrO+1nU5zVavLo1zO1uBIUSa+
jF8peqxgS/hJznMXcw/vpt7w7qoGaH8huq7TuJu3FY27Tr+7J/rkIv2v+0T/
VWncePx0gtV/eNE0OFb0wdui35L2/khP+3I/Se3xdsHvoo1pD9qHPdtUhf/S
1VZhvGV4cN1jDhpeHLre1wUNLvINkYbn0PDs3ii4rFX1jQsLLpM48LCmRvn9
Sj5/nVPruffwqD9+CaCZh/Gde1fafis78VFT8v1i7W9mKDyFPXnaNP4sjmm1
j8yWVvtGuy5tn2v4Fr8tbT/jH4m+M23/o2Dk3542Tv4/1P7f6h+PGeA9xeot
3lfcAs660vy7p32Z4bscf2b4Mb42bd+yw/XPxtO/O7yX+Xfa+5nf+ts/Qqfq
84XodUQP6rCf0n+ljSeNbwt8TOAfBPz+G9PGovwp+h1jatggzb1ql80U3lZv
f0j4n9hU7ZsUfUzwEOApXC/6KpRBMvZJ+YfoP9O2Ly7LOA18hio9uxS5Xy/H
LY+8lfqOL5udf121weMl+8+YpfvpaWNd4y99Wtr+uodm7c/jdeSI+pb/pU1/
r3b+TteOqvepap9ZKuM/+vYeAzVHaoxVKdxX7f1Ns22gD1XfmNDstv5d+c5n
bKk+Tc3WIYU/OTBrP9no4P2Rt47pHF2j8F2QdvyzoXdK+sObfY7jPEc94C+D
K3en0n8ZeXfVN/ZSPdZWea/iv6jJ8QeoH1yt+GqFtzD/6Jqv+HWy9rUDpmqz
vv81ygPbXc+n6XojePNzow7ME8wXzBtv6rsX1hlj90f8YDebR/yD6MF582rh
53/ZZDvzqQ3GxQAT4/CcfWxzjw9Y/MOCP7eH2vZc5FgdXk/AKmU9eiBvv574
xMTOZq7efxB6tirn07TTLVY7fwhvWnU6Rd/6oP71RQX7CKUP4ZNyq/7hz03n
2cFF+3s5QOV8X7TP0DbOHypjA12P1Nln2cMt5u0OYC/S7DGDD8y70/b3yfmY
/sU7ZhS8r2Xf2DXPRp+fqO+6XfFv67u2yPn/7lVh2dVPoo/UHDm75P9GP9hN
ab6l/ZQ3q3dmdL3f5DP4Lk0+/x+lb3xGefZkTuqj/avSXqvvGqW0i5R3QqX7
6RMF39MfPos+9R/lfSttn2CHij4VXVWlO7bTck/kn5zb3k4bq/0Atcf+jcbQ
v1rj/yH6SLux299J+2zXqvG8vf5xf8a12uxktd+/MXJTeZ83+zvvVN4F+taV
VX42Y1t89vDwLOBdEMd8eVjMmexbsYHBl9BFbZZHzGhdsccFA4WzyyGRZve0
/Q3Tp5APkB5Zxl4anztortlT4RT8euc8tgeqTc6tM72J6n0cmImDvN9mn/1N
2v/hm/gXD7dbhrF6p+ULn4fcgXBp0PRp+naXL3mNt2vVBj0HWCaCjIG93Msq
e0HBvrPg0YHJjqyQtoCGX0dbZIKeWfA9NDyMmuBjcF7h3EI62u+saEPK5hyF
D64eLX5frehf1AY/19vP9Fmq19yS++xHdcb4flppZ+kb11E/nKlwWaPn3P17
Gj9zWdoYmqc2uWx8elEefgXwzVKZccha8GrB5yPWxTdV1kjOoO3mxfTk38Fz
Ajsga18rVRmHyGI+DD9jtGOt3lXTZD4EawTnLs5cp6vuh+X8vxn/zAPgGt+m
f/Oa3r20w+tSZdRnq7TP7ZzZt+P7aBtdOaW7WfdZhQ2t9llzksqozrhO1OeM
uJ/Xar5YdcT/t81lNrDfybq8dar9rbyjZ8YYC+wLWiqNtQzWQnOlebRnBW92
Z3z9ZM3TI7wv6LsV3qNrfoXb6r5or4Ku+7NeKzcOOh/hAxG/buQdEnko9x7O
+DmXS5lTs9YZRV9036x99eGnjzieYVd1Ut40acCoxE8tOJWUSznI45Cz3Zpd
8RyascDaclfWvtzAsQbPukP/Ynyd45/hzKLwC12jq7yenRsy0zNDflqpNNNV
h7ODphxo+BLXKrxG1ysVTntupCE/92DTXx7fiN495y/OXuRbrv70V4PrAm4r
uB5getyRNY3s+IWM68y7iOMZvMc7gyYNIffItvhOfCOzLiB/vjPSXB31nKu6
rVo0Tg0YNdhRglczTPTa8D5z3qON7Ofxdo363U5p60+gnzCk3nsL0t2vvjcP
Ppnm/vtEjxC9kehx/czrfE1j7QaN36t19aszL2dkzt9ynfrkgznfb9fPmDgF
lTG3n/UnNlXe7TRXfqzno0U/orlies716JG1LeBs2kfhcF1jlOdafe+2Oe+9
nm/z/mwr5d1K5fyOzF30zDbbfV7dZp8V+Kf4GJ03hf/OGkP95qApf5rCm7L2
J96j6DE2ROPr4Kxpxhqy31uiv9GW10d7fpV3f16kvDuX/Aw+3r4Fv4Pyu98H
bvvM6IfgmD/c22vbCZoPa1XO9Kz9mr+SdZ2WVfl+WtRtYt59in5I3PRIk+vh
+uPLD+x6fMK9Kvpjtc359M+M486PeHxkvJU1tif8aO7BpQX7k3ji8KHxZqQB
DwxcsG2qLKt7lTLVT3aKeLDC0HnGthedPeS17zPOk46DRg8QPDBw+B9KGMuL
e2RDxEEjmwMz5p2gL24ydj9xYFG+njX2DuW9F+WD/QwG9JOKb212mjMqHL4R
NFiRC+NbmAfQiUcfHpzDpTEnPB408ejLfx5t8onCT2M+eTZrPBqwaNAPRN/v
xCo/J92Q+JZ34xs/i/Rg2pOHe/B1KJf6YDPyaNTzkSiPctGxQfcQ+gxkRvGM
+DOjPrxrp0qXSfnLog5g/uPz4MFoE3CxocFIYU1j3mYun6M+cUbWvoBOz5rG
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
/dBhzFmHDuyB83K2lz213XRZu23IsE1D5oYN+rU527Uvb7Xt8N8K2wda32Dl
duscQM/TsyXoWeWt0w4uBd+M/RW2XZfnbNN1eafpHtF+5+aMsfB7q214lyms
1rM54FSLPrJDZwelSUY7QaNXf1q7bf9T7dYtulf0w8ozUm3xkO63VzhO3/sA
vFvdHyT6ftGPck5S/7tDdF/l3ULp7kW3oc0YGuB4gKNRo/feznhSmj5txpaY
prpPzzjvNIXD4F8r3FzhO63GYfhL4dut1rM+qsPYBNQTm2nwprGVOVPx/cDt
0Bi4Ts82E72W6DtFT834vdcrvGCA69Nbdfil0XKQVxS/Xqf79h2K762yWtCN
EL151nr0S9X+C4vWa4cX8UDQPNtLac5G37nK4TlBE54bNDglxxaMf/pVb+dF
H7682XlWEr2d6jZT7y1TX/hN9fo157y39HbdGH+MlT9yHi/VqkNV0feMtXJd
y0Rf3eB3w3vBJoIy11Y54/LWRcXW4Zk68yfRhT6tYHr9yhX3B9bYDug86l1p
e3b87jyB3BweG/YZokdlfQ99QJNpzkqn1TjvypXmPV1VsN+fmXXO+6PiDms3
T2x9fe8Nmq9OKlgXenad+aXobxcaXB/q9qT+0/Gi+9XYjgwaedaT+l/7aO7c
sdP7lBMinvynwGPEBlp1OxGd5F6e40nDPM88Bd8JPPpCvXUfkc9gE4MND3Yu
X+bsr2cV1f8b5C05f+/8JuPiJHXt224971vaPCf+oOvbnOfGv/he0b9hJ9jg
/IeC68I8jb1Ag8vB7uNV1T+nqy/4GNiM6GoWPTTvEL01bAron+h/3jDI5V6v
cIu0812ktj2I9Ublraw5annOPDX4aW+q7NVafD9JeZ5Q3iMUVqk+lU3+zmKj
58ilOWNH/ZWzPuuNqssgXX/qfmzW5VLmqvDYlL5VbbVuvfme7DGIIw3xU5vd
noepbmm1bW0x0WW4xZpAea36FxPava88Qf3hU9Vxrsr6H+tW1nVBZsF8iI7a
RznbVdAWtMOCAcbFeEhlfEfbo8cW7XxIk/8RbcN/oH2O1Tc/pW8/ZpDXlvUa
vNbDb2bth+dM+FbQ2EHcmDdv9Ka86aawm7slb175Vehg542J8iJ60HnjZVyH
7hM2hYo/aoDTlKvP3qHwdnTrVc6teZeD/R14J8fmjZ3CdyOz4dsPDT3MpzQX
ftNgnb/Ne1nvHhrdkvb+rtcspfmyxu+F37Ka+uUNzH8dTntz5D2gxb4ZbmBd
zLuu1HO9WtdtSw2k+xTen7du+TN612xdd8U6ynpKHacOMF2n8ps6rGtcpzqc
2d/f94reP1//c1Nd9yjdC40O51TaRuWovPWeec8D8a7fMrZTxHbyvZAz8Gyf
OttXIiNZs8Z2lmvA8xngZw8p7NvhZ0v7Oy32maTD3vHRaGdCyr9d7XNNo9/N
t2LnAiYMctmRtb7H5uWVwCM6Xf1zntr/BfoN+ZuNi4T8udDhsfrkQNsZ8Az7
BPTK0V2H7qf+vKboXE/jlIBPMkj/7qV270PYj8yNtblO9HcdthdYDbn0AOOV
zNHzXn1tgzhZzz/S+75Q23440ONro7z1AA/qsK7y42B3qQ1G8+1VHouUw/yG
TcnQmFuw7yA9uq8j8samYp+J/RA4RdgQobOL7i66vOxDR0SaX+sdfyJnIn37
A83eR7yYcT7sn15tdNvSpsilt8x771zRR+9XvkM6nJZ3sd7vyDjgvye8Z6c+
3wVmFthZ0LxzZLx3h7zzkB6bqR2Cvj1jO09sPPsNdJlvq02ur3ca7Kqez/j/
o7vxWYv767158z+vinGNPgF6BRe2WdcAGTny8bzSzs5ZRloh+jH2G0q/V5vt
n5cp3EfXu6LParMPWnzRnqnwPvXZF3OWlR3aZv3R5xQOVzkXNluWjtyMPtAl
52u0TRftin4YemLr9NM+mTUIfxl9LctHpg8ILPLVJ0LGOiJnnVT0UTdpt13f
UOU9QO/7ROWtNdByd+Tvi3W/ykDTayntmn18Rjmv3XqrZaEH0UvxM/Sq+Srj
b9Vtua43c9YdfiNnWX2LvvHSZttCvKm2PU7ftlDPzmqx/J50J7T7/HF2e9i/
5KzffknI/eiTE9sst35N4TFtts/5s822Z5wNOBe8pfc26nqu2fa7nNk2DV1x
ykH+uFO75da7KG8DdixKOxlscvZjqsNKtAsYbA2+JxysOp+Vt743fmywr/m7
4Ht05OC3YYsLDw27mRPztp1hLj8ub3+Or2j8Hqf3vcz5T/9plJ5v2+HnpOMe
/dzj89bBq1JbVuo6XnlWUx1W1TU5b/73ldEnkYFfGfM8eugnRd1IuxL2WFHf
UyJ+X4WnRZ1/Lfg575rV6HWAtJuozKsL3rudkHd9+Bbm/t8KjttaZT+mNrlC
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
XBY8/84zef/L4Iy9Jvpq3mdDt+f9jHCwP4nPHJV/nvDXFD4x53qnDfwi7bhP
gkWTd1qkwze8mPd+AnNYeOax0JeCfz/yNDv2Rpj3M+dHZnnEpQxW5o1J9Wqk
j58rzq5ej3fhS5zvZd7L95Ema+dzIi5lObvJeGVgqq2MsiW8de4QZfuoaLXy
ur3M/QD9Am2eMbEq1vL4AkYGf6y1pcbeBVNzC/sj1V4756otNyDGHcbmLyK9
bKTJO5ADdLI65Aljz4B3Mf5WiO5avfM98Njm4x+YtTN5uFr0mrzXUlDu2bdk
f4O9DvZAXsbuu9pzB3CgKyN9vgceXGjwe7tH+psjb+T/lrzzQR6Yd/SI+Ql5
IRyc/B3fRv/JngHlwP4AWEndqj33+Epplot/Fx9G1ea/LLOPXNb/rP0J6/o/
MmXBH97WfJs2pjwDI3zH+gqsYPYGSIv9AfYw2MsgL/Bdol7IV23w4PtSVqSB
7Q8y7JcwX+oWYzS4vqXVtvMF37dT8OxLkGfe2Tlk6Fe5kAEHGB82Has9v6IN
dIx6HxdxkCUePP0wtszYNtPP0/75Z/gHmI8QzpyENkqbZa13dMp+hfEpPEX0
WvpNlfnNojfx3QoflfU9fF2p65J6vDFkmAvdmnf466q7zfqvbxC/Kec54Y0h
w3PkqOtWHJW8bd7B67k14vIO5PF7QNq899uUbcnwO4vfW8YixiRwVhhjGLfO
TXtMZmxmzDoveM6cD8pannGpNSxk2uVtN8s+28r4f+kf6BvoE/DTCIYevhyG
hJ0s8tjGIjs65MG6Gx19JnMoziFa51cV5t+LswmegTt0Qs77TZxvQCfmd551
wLPv9JFkrhD/oeixolfm3fbxGQ6Pjyf2MKk72vw+eZcPbY/9KtJlb+qgtOsU
vHwodYzPk+uCp645n7km/nfiTY644MCQB3T56K9vE39cF/ff9O+EQe/I23Yb
W+/bgr8tZOCp26lR77QJ6h59Ib6Nd4AzMyTn91I2YM9cHu8Fa+f6aCfkl3zX
16hfyXssZo5waWKb58tE2xeNQQcWXcLcOWvcoVOrfQ82ac+secLRLQFHCD0R
fCo2Zo2Dupfo3rpeop9gTSp+dJ1tjXk2NGXciY0ZY0/sHeHYIPfKWB58QTDu
Sbd/ymnDf97BtBj8IaxdwE7UNx4cPO0HnB7wegbXGMcHHtyeW7KW4wxiv6z9
VYFDCB4W98xBdnznyPiWPSNvnMX0jG8fGvLEJS/NkR/ec1i8l7LZLWsdGbCZ
9gjMJdbRyzNeS7Ovsyzne7DhwFvrJvpMYpzPZ+H17NmMdVYIW5KxPfTTevYn
7GAT4y09EzKLEusOLhQdtqtl0CFckrON9JLAZiIOe+/z0BHFPlj/whOJcYyv
azIOyGdRR1DwQR6tsV04ZfKrlO1vscMF6wAMkoWclYp/PDGm4w1g4YI/p3iL
yq0jj648GOCdW1w+h9T5GeHozs8PeWQ+j/yRt9uy1kXjjA7aP2t9f3TEDg8e
3AVsLId036l/gz5NhWiPrLFpySty6DQNZazPGlt2e8ZYdReXmHIPni0+v7eG
n+43c+bBpINuCx6sOeLgG7sy6zTREZoT96xRCMtEOPil5AmMXLBIu4pfwHkW
83Xxa1L+jtKwF+0R8uCdontSGen8kBjTbEGt7Vyz/Etp5xNMPfyLE4YMeGfo
RqEjtZbz2Zx5zj34NmTBNfwqvp1ygHIPvi84y2Bign1J38LYwLhAGFjM15f6
GZiZ+GJ9B7y3nO93YKWB88U6Dn5oqc+RD45/FvkDIx3S7pf1OIVs75DftcXh
3Vtsu027xU/Tqpz3N1r1qzKu93f1bKPKpy3/oMqnTdY82MpfS+abjLH/vo42
Q5vg3Ac59no3KG4JfK3xiODBJJoV8cEO5D118S7OrZBjb/vjxOmfqLi/Url9
l3E8bM3JN3mmTcOzBr+v3Fi3zJnBPRhTaeyDaUXjw1zVbAyZUZXGgrmxaAyc
W4v2awW+zQDJzCkaC+JA8c+iS4D/6XLjjkystI+4t4u2Xz6v2XbTkyttO/1U
0bge/RV+icLPqTS2ETgzoyutG4JuwrmVxmJBB+utjDHmwNvANh9cESi2+vCv
J8ZIfDUxVueajPGnwKRqletu/dMBWZ+rPli0PsfuysPT6INU2hf9V6EL8c+C
1ssF+89aoTRXV6nf07seoTzRkak05sXCojE3jmy2b5ZxlfbP8rbqYlClcafA
RANDDCwxsJh+VWlMpZ8VjQ9wTNFYWGBwgYdFvsHMAi/rb0rn5ErbtYPDcGWl
sRjAV8NXGbhqPYtuL0nRuFTgU4GVBkbZCZXGEntJ5fBizpi2XYu2kSgXbVt0
uVF+a4q2JcemfH7RWC7gxKwoGkf6tGbjLA2rNK4SOD9nVRrrBzwFcBXAMMVv
HNio9aLporFewY4F3/XoStsDdS/abuFQpdlQNBbqL8RXFG2T1qPovqo8a+xv
dDvRGW3V3WRMq7H+KBiaYGmuVdzXm4znOVHzis9VXzMkN1xxHxV9RNdi8FSD
Z78W7Pw7aSdl1rugbNCj4Hs+DMyHf6hcZiiNC5Wf19AtrDHm6rLE4yu4TaTH
O8BGWxrhPCdsVoSvzBjrc6Xemyj+vRn/i9C1NeanJ8a7xx/73YnzN7XJuDvg
76DTAzbz9IxtkmYl1s18oafzhV8B8Eg/aHI4zxc0WTcIfOKHdb9Ua5oJtcYy
RX4C5++J/YFubjRe3PsZY8bR7mn/4wrGIgWT9J3O1hddm7HOKP4SXxO/ptzY
usghA24pPBi7LyXGRF1OflUvqzPGX9tQa1uENQpfyVxCabTQ3jLGX6ZOWsss
Y4zUtxJjXuD3/qOMcf2oq21V1p1C7+CviddJawueL1CPj5S6Hv4ZGHYfRlzC
ab+kRTobCNe1X8r004z1m+HXR/jWKuPc/jRl/eT1oaMMzhlzF+Yt6yMd4n6d
uA1fVut/FZwdMHbAFGdsXpiy/94DM/Zlv0X1NFdptVO8OVXGswbLmnKkfMsl
Oz9nefbNTkrcpk8UPTRjzFbwWo8SPTpj7Jd7cr6HH6h3HpkxZgzpHRrynL+B
Qdw3wg6JegRvrx/1KvlJ9eoTFHZuYp+tQzM+4zmgyb5T8aF6NXoxGfvfvBi9
pIx9Tt6kudev2VtkrpgYk6OzwgYmTv/YxPkEv4b89dT1s4z9zuITFN+gA/Se
QRX+Xv7fI6iHjP2LDsj4Ponw/sGfH+M0tkKbWZ+K35Qytvm1uqbV+PnUjO2K
oLf9D88zxtzbEttl3iq6kPMr1kh6dr3uLxe9LsLXSHZOjdcArA2wubwlcfjN
icuOMpyssrw2cZ5G4fMB/UfqTO84LOqA8u8f38U37hLflRM/JjHG7dEqk8EZ
+0xlH25U8FUp47WD347f+Elqf2+p/vso3tXxXt7/pPK8IGe5KRmXC/EIvybK
5wnx83Iuu+FRd9Thhkb7Ml6hev9n0bhXt+v/fbvRvl+vVlg15QbGh+jfisb6
uUgyIxK3jZGinxRt5/WY0nmzaEwV/Gqu1z98huq7m+QzzdaXRm/6m6Lt+2aI
X1Q0ttgfRaua7FsBHwtXNdqHJj6HP4u5GXO0r+J/5L9sbrZO43Wi6zXPu1nf
+Annw4328XqD0qxvsm8I/EucomcPsA7lrDYx3sr+orcXjdd3p+hRBc9tVivN
/zRaDwp/zsdFO6e9d26yvwz8ZkxVWuuV5m2i39R5TbNc4ReEXd/RjNXMscHV
S9m/AX4O8F/AeSo8/g7OStwOzkzss3JwtIerxA/K2HcoacCPEP9gztg9J2Sc
xtBI87TEmEyr1V5OD56w6TnjPR2Tse9N4qFfs6zW+Kv4OL1D37BRz+5kzpy4
/51HXx1zVOaqn8RclznvnxOPI++IlsYajbXay4nHiFdEp+h+ncKvI+06rzPn
6l03oYvAWpuzd92PUPiXKre7dL9F4XcTr2Dbkz8rfHPB+2j7i78qsd3jFYmx
/sH8P0LPb8j5XI+9rIMUXi++r+hlVcbX5gxnr4zXFawR8BuB/4j+hZ3rDc5/
+jOesg/baP8wScZn8IcrfHfxhyXGi4U/Ns6bSJezJ/B7aFesz66tsk8I/EGA
n53N2A81+p9vg9mNPU7BtgVn9TSWEdhPYBPx/M8hA30n+JlN1vGdJvmj0x7P
OI+YkvP5So735bw/wlnPDVX2P4TvoS+rPNYy9tGP0J9MVv3vRl2hZ5q2nw3K
7auUsbzB9N5btF3GuORgkuMLqHPG/oD20LMPJTNCZdUrMVY5mOW7JcbWBmN7
TJX9CXG2yTwDbCZwmVin7hprVfK1NfKG/17OoxlvF+lbns55njct5lTMrbZU
eY7I/HBP5h/MNwoeu7vGWE9fu0uMI/sktqPZK/HaD569x/+CzwpmFj4zEvvD
fbLReSFPzEm2FoyFMFpl3hJlMbDg9/Be3oWOcbson0+q3Gey74fecdsIR59l
Qsa2uX11vcd7VQedle5d+CMWnZgYp+oO0YdqzRMGhhX7b2BucSbFGRXnsM+x
Ds76/qjE2FG/1j/yAc9r7G8ePDBwwbqmTAmHB4MQLMKe8V/sHW14XMYY65x5
4T/9xxn70L4ycf4vT4x/DQ72WMIS+3Se12SfT5xHTmoI26qMdR0Z0xjb8PEL
PTt4MCUuyBiDAr8I+Ed4o+B8k1dwzPB7P14yX/Jf1Fie+rgk8b7wuyq3LY2e
AzMXZh32b8XdwBkAurFVPl+bUfAclbnqfpJ5scr+bPBL1+r3paefo3sDHhiY
YbTV/4s2+2yNeebL8LRl4vOvosuN3x185byn8l/Mf6zrXaVzOPVcZb89C9Bv
0nWd4qYSt4Fy0UzRPjEWi18M1gR5EM3r/gXR7QV/H7pSq8tdb4RTd/3SbnO0
N/4J/o3DUtY3hmfP+Yv4XwhfVmN5MFTBheJd6L2XiH5aZX9TxN0Y8oOyjnOW
+AV5n5tyZjq9nb6xk/3rPaGweezvl/m8lDbKWepNasM9JPObOmP90mafT/m8
nbbG+Tt9L/0u63r8QLC2wXfusfrebmnjkT6R9jyoe9qYCOAllHb0Pja46q37
23n7PD60ve3XeM/2jpYjHB/H6M+jO08a+HE5Kb3z+YkRl/ROSNvX9r3K92T0
bhrcV7EPx5y/IvYIuX9UMlNYo9T5GWGbunifj31B9vrOVznMkMzSOvsJf0Zh
30jmPt1frvD766wzjt4BuuXoIKCjwP0Heneicv13g/fLXkjZp8yktMvzK+X/
8rSfgdk1oswyD3R0OZMW5cue27KIWxr5ypbZjoC12slRBidHOXB2xZk2+iHY
E2NXjN10roP5W9qb/ix4KL528DXzUcrjE2MTel2tZ89KZwN2ZLoujjNiwjkX
Zl6ELyjmQgWVxRzOfLDpyTpNbJkvqLA9PPif+EAamLYfJfAZwB3jPaRBOLrZ
vGdw1OPPI5+k8/O8nxGObgP6EOg5gLMCvsqZcd8a3tH38Og/VEr+lLTxRdk/
BasL+9xa1e+lqsffK++Hljo++mP49jot5FlTnBnpbJDcy5Lbs8H2JpvC3p8z
ddJfWmK92VP/J+zUSIe9fdLEt9cypTNT6Syvc33S3nLgUur+RoWfq3XKfF33
qx86vcF4i/hHwffHq8rz8+wNK/x18UvF/1f0BsmPlfxHolvwdaGf9Osa23Th
Uw48/PH6t1eIX6V8vqg4TyjuZqXTV//Ewez/6vpl4vXoMaKrsn4n+uBniG9J
e036SNrpFJVmTaNtyAYUHbYy0ke/lnTR3QXncb+0sTovjPe+rW9dL/4b8Xc2
WPftwqz9wUHBkwdXfl2pKZhM+Ix7IMIubrJPwDubrDNH/ANF02n3P/gmOQ/d
Tc4IRMcrn5fR5/T0+prv4Lz+SpXXuaIf1PvsnbN8zt/xhUa/sLGL98Ke0vWv
Li4DzveQW9/VZYY/975RfnwvZck9elnLU/Yxg13VnLT9ouybdnzS4dxwjMoi
q3duUzn8C5sKhV/cRnWTdvyGqDvS4X4a+n6S/1LyRfHfqgynNLgd/Sna0puV
9tnH3v5z+rZ5+salogfUuo3R1k5R2X1I+2j2WQCypDFQMneiG1LvvLwR+UFP
AB6dgdnsZ2GL0GA9F84+0WGhDPpFmdwRZ53ouuD3vl/1Tl01dNd2tJGDIrxf
tEN4bFWOiz7hmEaX/4hm+895i3miymmftPPXP8psdfA9Wnx+VCW6dzeHU65v
RFzyT1ukHi5lf75oHPIHRN9M+9349Z6pb1uNfUKDfaT9Mm08me4xrq3q4HU7
PH6UdmEfU9f9ivMtZ4mK0yPCoPjE+ia7M+xu8iha08UUHzfz9L2vl9pXOn7S
wVkFn5U55HzJ14ie18U49lUhz3hSl/aY8pbKqlb8hY32tU46+LgnHuFTVQ7V
ad/D10Ra1V08Jx2Tdlq8D4xYMBB6Bf94ic/YOWvnzJ2rOW09k3LaqfhLSjzv
3T3inl7q+MQFVwEee0z+v5b4Dxjf8I/FOMiZEn6yuAeTvzK+kffw3qvaWj8K
vAOwDghLIpz2R5rd27uM+E4wISiDXJTDLrGXQxmDfdOf8U7p9+1gPhOUZ9hn
gdGyIXBahgVFHpsg5sjYVe2pf+lazpwb3L5ol7TDPRQ+UeHrFb6brh8pL081
2Ifdryscf0C8izSxMWL+Tfg8xqi01xpgMfC9NSmH9Y3wQ+P94NhhpwVP2LhG
y9yr+edQvecnaeMRgk0BVsU4vWt+2uG0WzCA8aOEP6VJKZcbbYNyyke5YU9O
u8eW/C/6rqdVfn+tcxqHRDqkyZzv4LT9ixEOXjG6Fsx3meuSD56THnoXB0X4
vjEnBs//zShD/lfukRnexmeoT0Y//FjR+N5fiKboX9NugxXK04Eq8+kN9m2B
rzX8XHCO8GrO++/MU9mDB3MM32vIXJOyH4zxIU85MU8Au49nhOeZ56bsi6JX
yvjj+NHBbw70/ODxU4EMfjHAD/xRpIM/1HHpnWmMCxnOWzlrRfcDe13SAlcG
fZ4J+Z16o+jnoNeDDS/2pWDp4RMUenfM15hTMTejPdCPnV/isF9GOPsL6F+g
S8x/zv+OX2Do2ODJB+8Bewd/JBek/X98lPWZHnrx2BbzveSXvRvC0GVC9sJo
z2dWmCcN/qkLInwE9anrJPGXV/keHv+b4yp837vac1nmsegwjY78oIeInha6
iKzNWZeDHwWGFthZZ0dcxhjGlyTGGcblWzRmPaXyWqM28rDCmnRVgCuQc9/V
s73DZ+pqTNuP2KgKzxnR2SNsU5n9yRTFLyl3GsVIZ8c9suhBnR15Xd3W+W/F
z6x2GN+Gn0x0TdAzQTcFfnxHY0GCjXVMB+vL4IuTOrsEXe20MT6HRRmCvQkd
FmWIjiV9Jf0hOGIjo3wol1HBkxfKFLwR9L7Q10YfDB0DvpW5Mc/PC5nfhjzl
PzLS2V/vbSp67YwP2xs1V7iIMwfRKbouFP95g/eo2Ndin2q8yn1/hQ/U88vE
DxA/TPxDetYpbUz+iVnzYMruofqaIDo1ZPBPsANPGgr+6nOV3itmbojOLGND
+0ivNNK8RO86hLl0vffZJuWcnyG676PwE+vdt6Jvi944etft4x/ZT3m4Ar8c
krk+5tjMtVnPH0Bfge1zzrpsK5mTFO1bCr9V6LXtHz710N9Fr3Zye+vRsY/F
PbpwxJ3LFm09ys6adzY4bF2k2VP5b6vwGj3vjs6B+Anir4i5K3NYdLPZS+R8
Cl1ZcP8LHayTyT36omtF/56yHvXIMocjw9nWUsUtS/usi7Opsg7Wb2Q+zVz6
MaX/ODqBys+rCtuquIPVVh9Puxzw0/dBzuFzJL9C39AGG98G476TH/RCoV/E
e4dn7YsTPVbmF4w/zBPQ20L/Cr0t/I6g+4jeI2lvi/TfjTNo/Dpehi2J6mOd
wkZknS57oeyLQtGPHaAySsAgr7f+Ke9EB3WR8rce3T18ssT38+18F74Df6xr
rZ7VgMfX4DNBZPBhyh5HOvI4KO/4xEVHnnpAN572QRpXKP5+IQPOFetGvoV1
8eis54O7RNiX8Y3Y3/AMrFTqDT146u50tYddsa9tcN/fJvr//vq2nnrnEfVu
X+wD44NgStr38Ngz9ok+kT6SvpI+lrDeEX686vEPedu2YL8wJ28d2tmdbFuO
XflotcP1yvsZdfbbxN4BdgR3K3yR8vBivW0iNqRs44C9BXv52FygW0Oa2EQM
7ua9aPYf8DFC+tht4SeKvQjS5ZyXuNhnbEz5LBGMbmxQyCf2LOhsz87b3hmd
zfl562yzv8U+12jJHJczz34X11z66KDIHa8013X1ftnzYRsBz3fhO4w00VPp
Ff9CS97vpc+lv50d9/D4v5gd/KMRjj45fTP36KITn/9qAeNgV/P8X33Chye2
Epvje/uoLPfq5nt4dF4e7mG9lyvDx+hp+E9PmWe9g80YtmPbRMvUVtqii9pg
/bN3Y03HmQf3+Di4tZ15wul/1ka/tFzvG6X8Letk/V/24mlPq5RWR33HK6K9
E59jHJC4HfWJ8Xtslf2a4d8M7LW10f8sUPuYofp5qMHnL3+NPJBfdOS4p+18
Gu0His/YITX+ftpBb9G+am+3KJ0Z9caZ3xht47OIu7fCrmM9K5mtelcPrSGn
qG3V9bQv2s9ChvZHHtkTGyT51bo/vs5+kvCX1EF9zPaise6bFfd1ve8lzvfq
HZ+8Yl/8pu5XKHx1vf9J/mlwY1hPMjcHa/r7jHXG0B07Vnk6Q/UyUHT/Ruu9
fK/034i9nRK993vxH+u/2a40vxP/kfjPSZ82lvJ/hI4H+h342RuitEYp7KQG
40X8LfAl7uNMJuVzyVmxfj9X39ij1msT1ii/72BZ2uFc1rwq76e62HaHOQo2
RyOqvJfBns7L5X7nrDKvfVifn9re/teZr3+A/zWl20+0t+hD+uZHle69Kdt1
oTuJjRj6k5XZnTqV6EHy7O+BeQFOBna/2P+e0GI9JdYCvON4pTuUPlj05tCd
Q4eOdxCPbxqkONMU53jRpiaX294q50LKZQ5eJeUOj/5Rk8rkesX7pMF5AGMF
zI2vi8bXBWf3qFKXx3T9L+2bjQELFizjYe8YEwfov3k8ZZyDdSqrPmljDGRC
jxQdVfQN0VWkX+SsgLjML74vGm8W3FneQ/kzP2RtODfttPCVi79l6mhB0Vi3
uygvc1N+7/wS9yXEpT/hu2dFm5kq+ZHMT9TufqF6vkPh2zvbtoCxn3k9tsh9
ck4P20vOag8W/VfBOH8Tiu7LyTtjBP6B79L1nfL1cqXP3Ofrfhr7U3p+V4Pt
F0ib9QL/Ad9Pnv4f/aJd9w==
         "]], PolygonBox[CompressedData["
1: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
GL8V4Jfo+8JaHSMbjvxv4PEg9L6kspRdSJndIdsYZWsczpzcRt3a0hlXs0/t
XuQ5Ift1oe8YumvE9fum7AfUTwJfQP0fqH9Odxz5QpO3Mcc+T/J9GgBeMdcy
SbauCd9d1J+roN1CXm+ddRmz5tC+JgWhVaN/T9P34zrDyddH/kTyRaFObfjV
BY8CPwL9eIH1F7K1yCdVvqmd4XECXv+wpp7jtzWW88DnQfscybYhG0fppG24
untOAV8jWXVmle6a9E/Ev1H9Vl+Tzh36T8gwL8cySbZOSduuZEPprPqk6cBh
7geFnHX3weOKDM+B5uKiiNv6XjoE6n9O+UNlbJOQbWKibFaM/eOkRinfiSWf
bM6rkrbpybanO/n/ij2HmssC5DkFv0nInyb/SfJyKH8jeY9lWSch3cQc6H8z
1lXANyasU5FuRTaNI+CvgVcttP9cnYRtOrJVyGZxXPMp/zLgJ2ivCvgK+Uxk
2QdTvphvUD+/0P6A9RP2gZEvTDPySiXtgypf1GXM2XcJ+5TIt+R66P/o/Bv5
z5YB/eIajllQ7MII+J8DXpe0rf0nxnyt1jJjVIOxuohUHviClO9S8tkuAfwo
8zu/nM+Ic7U3ac8q9B1bd+04ZV6gf3fLnyJlG6lspaqzvshnep3tdQbXWbxq
zLqLLmqT8nlqP90+gvnAPaEvk71B9syYbXiy5SnGQ7Eec1iPg4AHkxqC1yY9
ANyVVAu4N3XmUb4bqZd0k1G31Zl0IfQ7o/a96kiqAX5Md7I8x5QotqQX+L2s
jbe0fzFX2ZS/ON063q7FtsHKFqs77WPgexnDVYxnF+nIwTckfDfVHfUR3RX1
+4D/I4oZob17dSeDVpf1PVm+b+Ip3TB4Sr5occdSBCh/FNrpqM+2t1DmTuma
g6bpjKuzbkdSK+BP5ZdfbB96+dI3Ia8V+LPSyTAWA6lzFe0flU8Kc1HIb/rb
sH3M5Wsun5i60P/RmTTPPmzyZdOa0Nq4mFQhZZ2NdDebSbfC+9aodVWVoP9V
bB9e+fLKJnUeeFbYsSKF9CkHfj2of0mez+A6i0vnKt1rTfLKSXePPPl5lkGy
ZJAXKWsfg8rAQ6RzyrMPiHxBpFOTrks6r7qUb1hkXlrTWtu//Od/u4/1Xw/4
34j3ppLQf1X7pLLAZ9Vn+ePBr0eebSiXgk+I2HYuH5OqKcfgKBanP+ly+Z5E
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
BLwcaUKmYzKeTvoNIL0FpLx0aK3kE1dgG/+/2h+Sfpuzu2K+kvaplG/lrZS5
I2YfG/nabCVdK3tvzLGCGrNRMftwyJdDPnzy5dM3Vt/a13V/jPlNUr1Nqvg6
vQ2pNxL1VsNzih8AL4q5rGIexyX9xpDeGppGXi60YMxve85FnrXSF8VMU8zv
GMrXD1tXLB1VSt9G8j7O8hlfZ/2vU9a9ygdevvA/6P6cbx2MdDGKoVMsnd7o
1Fud8pmU7+Sj4HtTjtFUrKbq7AFfIx04v9WlzGejIr95p7fvekHfDX1XyrBs
PLL1KEZHsTr6Rupb2TJq3rrTtEvZB06+cBN1HoeWGzLvZoxxTshvhurtUMWI
D4u6jMq+Qv22Kb/JqrdZFfN5THeFuN9C1BuqektVPhHyjVBMpWIrW0VtWy7g
N7SLuiehv5frGEfFOtaLO/ZGMQiKRchEhlPlHIOiWJS3qF+msmNKFVs6JOm7
o2I+FfvZN2LesmnLtq03WvRWy9vQ/9S3P2xbt+jX6Ldf5NhQxZQqtvSM7hzA
2+TLrPuDzpS5jiH9/1jSlM+6+kbqW1k1alujYioVWykdn3R90in1le0cmS9U
rIveKKthnap0q7LJyjYbJC8C7VfaW6e7utZgFb9hV5C0D5x84VRGZU/G/ZbL
KtorCV5AClX3N/H+Ir+RordS9GaN3q5Rm2pbZ1KdTe+TTNVdR3Wlc5LuSW+m
6e00xaQrNl1v2Oktu0FxxzLozTe9/fZNyLGoillR7Mq3RZZFMTClatiHV768
smHUKrKOX7p+3Zl1d04k/faqfCDlCymfcvmWP0+ZI9D3hO1bIJtMd+p/EDVN
OhPpTt5K+W6hNzD0FoZiohUbvU/2xIjv7Lq7K+b255TPhDob6o2Lp4G/T9iW
qZgSxZaMoL9bSztmVrGzlUJ+q0UxvIrlzQj5LQzF0CqWVm+C6m3QGPO1Hdrp
lNeW1ozWzndh+1bpN6rfqt481tvH+qa8FrPNUbZH+RTIt0AxRIolUsxRXrF9
zuR79qbe2006CX5Dv5GQk2DpmKRr2gH9oXJ+405v3SnGQLEGg0hbwM8wJisL
HdOl2K6vko41HKoYNODnpZ/Ntc1Dto/d2mNznSeafMqkS/gZvA9t/wa/0wV+
M0FvJ8iGIFuCYt4KKPtc0LZt+Sh0DjnGTbFuiiEsV+w3SPUWqXSa98oeX+xY
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

         "]]}]}, 
     {RGBColor[0.49993918944321214`, 0.4794035490056017, 0.5251795180269936], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnXW4VkXXxs8BDpwEAQmDp+M8B1RMkFAMRAUREBVMQLCTULADO0BMbAU7
EVuxMVDEVhA7EKVBTOS7f9zL6/3+2NfMnr1mZk2vmrXTI04adGKjsrKyW2rK
yhorbN20rOyA2rKyvBJ3qCoru6qyrOxjpU2qdLyzYE5S+G6zsrI39VwomNkK
M00EU11WNlXvb+u9kcJXFf5CoSr7ROV5Te+jFG8vuDmKf54vK7u0oqzsM4U1
acNVpV3ea1FmTaas7B3FBybLyt5q5rI3LnN+3hsp/wt6hineW+l7Cf6E5mVl
T6jMbmrHKKWP1POr4r/o6aQ6ftLzo54t9KwULk8Lt+GCWaK6pyhsSJSV7Vzj
9iWEw+VNjcMJFW77W4FDSjjtr3j3+rKynVT2xfqWFPzcvNP5Tp9dGf12icJL
A+YxlX+vYJqUl5Xdp/B+PdsJ5otUWdkHwmnzgr/fF+lL04bZQbi1LRgG2PaK
n9ihrKydwpPU9pUq90XBThTOrwj+YOFc2VBW1krwRcE/orSH9eyhMgeWuw7K
30z5N1I5mxY8Vv0qPX6M83t6jq5w+y75r43xjX4YV+P0YwTzR53hqjV/pqu+
5YIZoX5YoD75WOMyX2GtcJmn9NGCv0bxTapd3oToq3s0Zx6rcxrlV9Yabl7M
uXcDn1MqPLbnCp+XKj3WY5T2YqXfiX+p5ynFb2rkOUKcefKG8LigdVnZNPXn
XuqvIWrDMLX9VaVfqTwvK5yjZ4pg3laYrPPcAOcewucfwZ8NLvp2nWA6qI09
a/3tHHBSuR8I9nV936jSaV30/lre6X/Uuw7qOlywLyjeVP3/hsop19oZJ/jG
+rZM5S3Vs3WN4YBfqrxjwEXPJLXraj2nKF4sc9opkV6l+fAsY60yj2f+6rlY
6S+qrvHCebbS16uuhVX+dlwzwwFDv9KP9G0y5jnzmjXEevmvL5+Ovr2bOa8y
pyscqrT5ehqUfl2146cK7wmakz2Vb73ie7QtK6tQe09oobHOez4v1Hw5spnH
cbjyPqP0joKpUrsvEY4LVE5thb8zvuCYbOY8wD/Nmhf8NWn3+wfR39cmXGeN
yj9Jz86C/zfl8aPNSdZmI8dp+xV1/kZ6U/X1wlbCW+WsEA67K30zlXWf3oeo
vdUq5wHFD1f8foXr9b6LYNop86I619VG8Mv1Pky4Pany/qx23zI/G2ttttEk
X5P3uI2NcZyn90vUX/8KvlLjeIfSt2cc9f6hyjlO4Yl6hrVXH+XKyk5WfITi
2yq+VvB7CeaPUlnZ4jbCTem3tdQcU/6b1YYh6o9xqv/WKu8DrdS+owSzQDC3
CbfblH6TcHtbZe2ib28p7FTpvGcp/VjVdYjgj1F4ssq6R2mHqd0vCG4HwT+v
8D3V9bDgxwqHVxWfzpwW7BmVjrMf/qv19onwu1ThoyrrQOVdqLxP6tla8cvU
jr+U/xO15SqVcaFgzlK9ExWeFPWerrG+TzDTtD4uVnyG8i4U/GMK31aeWo1n
B8G+rPij6s9hCk9V/uNVzjiFRwufa4TPP8Ln9qT3+lMVVqv+bQXTR32SFtwb
G2lOZJWmebusnfZdjXdbpS9RfKHw3Fjx+zcXrmrLSg3ghdrrDlL6JkpfAbzC
WXFW9VddPwm/I1XHjwrbs86qvGe/pHGeqHha6+414dFM8FsJ/y56tlK8qdrY
TWM0STDd9N5IOL6p9o5WfV+qrENU5qWC/VzxtlpbXwrnbOBPO4r1hi8orFK/
JRRfJdgnVPcS9k49j6neySr/UYXbCG4j1bE1YbnxZ/8Ebla0panwr6j0ez+V
eZX6YYHa/ozK3Vb4PK1wnMo4Tc/n6s+PVNfVzAPt8z+qnimVTltR7f1qgMo5
vtIwmlZlI6FJ9FzOWKpvxwvnZ1R+rrnTO7JeVMeequuYrPNNibzPJk2TPKPw
ALWhr3DYX+FH+vi66nuH9av+mq46T1BYpv1tlnB4Qc/ixg5/Vvi75tfaGp+f
h5f7DKU/fmvqtQn+jzbzd9YU+SiHcSR8KeJ7Jx3fQ3UdkjD980u91+Kjkbc6
47O7b9K0ETDA9q82HcbaeT/2B/aJnkq/UfnHczap/99T/1yqMo4T7PVVnjc7
qd0763lXc2I71bdA4TD11X4Jn6OD1Q9V2q8q9eyqdrYWzGDB/KFyJqnMH9S3
u6quRMJrirX1tfJdp/Kr1Q8dhcNNip+ptCeSrnd3wc7VuOyhvHtnTbtNDTz7
q/x3hec+CvdTnw/S84zSV6iuIcKzWmX8qr1hP8XP1JxZrvQBin8Qe9fYSu9R
hwruB5V7kMI9BPO+ynxHOO9U7T4FtofyzeVsVXveSrqvnlL4sXDrL9yaqsyC
2p3XM01lFuu8VzAnGqmc8mqft/8o7F/pM/b3pk7jnL1fc/IS4bqV1v4BnBMq
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
f3vR/j7w+3FL0TZIG4eP4h1Dx4EMuW3KNvDtFNYL/nz17WTBt1a8o/JepvjV
nAeK36D44UnX/5Hq6qv0nkq/vmh70qUxD7nTyN3GY1L2T4E/h1HwNEX7JMCv
ML5s8GmzR735MPRY8GLIsogj/zkhYx+rh6uef9nboaVzXutLwtaEPYJ6sdG4
hL1VZV6qcGre/nw+Vr4JefOz4/P2HYMPmdMVnlG0ngJ9xTXCp53i5xYtg2oe
9zVuCjke8xC8mgdu8HLwdNxN4T4k9yLbKvyoaN93+MAr6Xlea7lBYceifbTi
qxWeHRkvvuhbZE37lbKWqbQOfTl+WvGPU1C4edH/qeF/NQk9ExRPKmxIWhfS
WPVurLb1F/y9Rf8Xgf8jNCpap4JuBR9g36fsWxgfw53Dz21HLb1fU/ahmi6a
l0EOhh6nVchKiSN/aB2+k7iruCbkGOhCsFPB/wn/C+G/IV9yXineWfEvCr7f
nAufutSZi3ofSljH8KbqPyrpfzTUMiYp/3+hpeLva2wmqb2vZ0xXrAnZ2X9l
IcPZVHAPC34zhcdhn6p4VbRxq7jjjczkt5CbXBMyWfb5a4Tflzpbr1XYWP22
F759FV+csz/hrwr+lwv/D2C88N2GD7ePkv6fAOnYmNZrTj/A3p7xfRds37GH
RybMP2C4RwF8Mcrh3iz32k4tWXeQj/SXY+9sHnqAXKRTBzDYsu6Q9N0G/uWF
HR76/Js1B2Ymfe9uasr6gZcC/ju1YXe15XuFpyvPc/hvKdrHNPNhXdG2dNjU
LSv4XsSKkGmvyNkP9tcF+3/F5wU+KP5S+qEq54eCZecrQn7+kfrwAuzTCqa5
0c1gZ4X9InaMawvWp7eJ/rlL8Kfgu7ZgfNcGzvw7hH+IlAu3xknrL/9QuyCa
0GuuVrxJ0rrLP1P2u83Z+oyQ/jFl+86foCW1rn7S+N5S8P9y8E0xCxzUD1cJ
vhX8HHIKjUUftalGTwW+MQumJfgXI3rgH+CllfeZgnn8dJxH+H3G//Oz7FHI
FASzsN60RvfY5z9XngK+eRW2F1wz/AMXrFsDjvuqyAwyUSa+PakXHzipqIv5
MEs47yycX1DYq9ZwwAxN247nIIWFgvka+Bt0G42DbumUsT9P/HqWEr5j3zVt
uqZx+ClgfTeL/Qffo/ggfV3wb+g5WfE3FR6i8Rqt+Gf1xhEcsLXDvyR+Jrsq
7J/wvzn3T5sGhTZGHnqXvt3Kfa6i+Rrqws7tyKz9f+IH9MCgh/FJzP8P+Q8i
PEMu+oJ+OEFtfE39fKLCr1PW9X+TMj+yOuSi/KeE/5WcqnCUnmcUP7Lg/5FA
S0NTwwusDJ3OVXqfr/RJCjsKn77gqfjt2PEo/Q6F9+lZpvj9Co9Tf24jmCMU
f1jPSqU/UrB9wsqQFU/X+y9Kv7vg/yHhE+Yhhd+mbE/8ncLxep+j9AkF06Wr
Q4/FPKC90GncGacvkOPyLyV8680rmJboHrpafD70iL7iv0r4S3xXMOMUb8e/
hApeV+wn6A2/UhvXqt4nlf6onlWKP1bw/3v4j88fBeu2VoV+izmYiblxob59
KJiLFJ6r5z3Fz2Nv0fMO9qwF+99YFTqODln/w+5UtXdu2nLFdxV+mzY99k3a
dioPhb3n4ox94H2CbjRjW/ifFc7N2BclPik/wFZRNOc9zV3PPlFXi6R9HePz
uJHqHab4c5pTxxR875L7ly/n7LPwq3q3rX+M15YNtml8DJ1R2v8KfUfh4bX+
TwA60H8y3ufZ7/G3sU/sk/OhoZU+OGtf7fgpHy7Yv5CZKP6F2tdDTx/Wc8b2
athWYWN1ZehfsAXDHwd+Oa7L2fZ4ZNgfnwLfobwnc74IZg90Uop/lPG/1fjH
2jjF7xbMorTrBoff8/bNgZ5lEHxDwTQVtNX3af9r5AeF7Yv+VxH/LLpd77cI
5o56y6SgT6BT+K8afAJ04/YdvKb4Xylyc+Tn3D3lbIY+QLaADyN82nydte4d
HTy0Mmf4AUE/cD73DL01vjXQy7Jvob9AboZu4sSS8QGvjYMehyapCtnXI3nL
ypGZH69+263e/jbxu7lZ8AXwB0PU9q2Ed6ZomT6y/QMEv6/id3A/WuXvn7M/
uXPVP7m87Tqw74A2gkbC3/z7CfsruSxtWpo+gW9C5nFAzMM2Jf+/a0rG/v97
Bs2zV973Rrk/in9z/JzvlLHfCPS67B+bBN2CzhhfKtxH4F4C8il4Oni75inz
Sv2y9s+Cnxb+XdkoZbvK7dBHFHyXZ4ui/zuCL8BP8rYzw96socG2YtiM7Zy1
vzb8tk3K2d4Lu68eCr/P2I4de3bWS5+Y882T9j81PW25M7zMn0X/b4D/DlyR
sQwaWXSuYL/b+O/MFyz/RQ7MnT/+8cm/Pmdx/ia9Nlmjs0KnSn2sP9Yh8i/s
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
         "]], 
        PolygonBox[CompressedData["
1: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
         "]]}]}, 
     {RGBColor[0.7941231813226062, 0.5827908943945261, 0.3522406857400654], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
Zv6fuw==
         "]], PolygonBox[CompressedData["
1:eJwlk8tL1GEUhk+mTnMpLKPByvl+A7Wwi0RCkeSqRqjIqaA7bQyTIHIV1EJp
E9EfUFFBtuhqTM7aW9GyKUoXiUEXy6Ko0V03SHsO7+LAe77znvv5su1d+05X
mFkOqUQ6M2a34mZNCbO9kdnRYPY5ZlaPPpY1W4GeQ+9FCuhlpDVl1lNltgXb
W2QY//fwp/G/g34Rfa4aLrH/1Zu1kKdhgdkFbLPondhPIRXYR4m3KKWcL8HP
4ByfZ3Yefgn8kLc8sV8Trw/8CZ8JfDfztp98/XDWU0sH/CL4F1Ku1ttP8Dtk
JK4cr/AfRi9gv+E+xJpC3sQV8y+27XB2J82GkBlsV3k7i20j+fZEyum5vUfv
tYj+JaaY/eBKfFpjmtnyoJn6bM/Bv4Y+Tfwd1NJE/ma417PKVUJS2Jfydgbu
FFKFby32lfhPEu+g+wfNdhyZgHsfzm3wR+wPIvm4r/fsva+NlKuIfR14hLfe
uHr23geDdrMBzgD4UdAsfWcF8KGMdu05htB/B3HTxPvjs0ZKxOqmxka44xnt
yt8uU/uLoF3W4fMc/CQrbh/+zehrIuFG7A3glqBaL+H/FG4OaUtqJ74bvxm/
nRlkYaSd+G68pxPYJoNm7Tf0AXzFd0r+dvQ09sXESCR1s367PnOfvf+Bx+Cv
QVzf+TfvNaNaasixKtKN+613ILXYNmVUu/8J/xtbg27Ld+y7/hHp75TJMYhu
8E/GdSN+KwNZ2bxH77Umq117jUvAR4L+ot/YMfDhoF37TRwAr45U203e7qH3
RKrN/0A3eBb5ntAf6gLvjHQ7/gd3gdsi7dJvLg+uI8Y29Dylzs8opsf2t7vg
NLIsqZhz8EeDduszHgP/BwqVpGo=
         "]]}]}, 
     {RGBColor[0.9300810180833866, 0.6952025452084665, 0.3832511560584984], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJw1lUtsTVEUhrdWr957ewUTScXZ99S4EoMylHgENWhJMDdAKYYmnp2ZIao0
oSYdeQ3VvUViQtCBxwAh0TAg8RobiP/zL4Odvc7ae73+9a99yr1Hdx7pSCld
1+rUulNNaU0tpfmulNY2UnpbSWml5INlSs8kj2gfrqe0Q2uJ9NOFdNIflb43
60w+Fko3o3VR+hPSryrtp0/7Gfk8rdUr21F9z0l/SPurwv4PSG5qvZFcls7j
tuSr2i9UrMf2XrdiaC1bkNIe8lQ+HYvsmxj1Luvehf5wxbXhD1/XtBbLtiUf
/Tqf0veQ7tZkOyB5R9O6/crrZtX2bX1/VY2P9f0lO5eRyGeX7v+U/En3dzec
E3Hf1P29VHeOVW1LPeM9tiOHfuWwWmu9sLsf+VDXqcgJnLlLbdyf1Z1V8tPu
Niac1bqMO/inwjWeDhzmqvb/suIciA8OAw1jiH9iErtzkf1/qFkGj3pgcqs0
nitU+3TgQY5l9Ot9dpz+iDWhGi/1GJfzpTmzRfu+wvgPN11DX9UcO66zy7pz
V+eDdcvEvat9MuTNpfNqlbYDB7ACY3yBMzv+kGfCP3eQ4Q05/+fB1mScrkYv
yBFOgsm2uvX/uURP6eeBmAVmgvizwUP2+yGPNXwHW7DkDD60CtdysnSNYEuc
VuSGLb1ohYwOGS42muZIR+F8yIV+k0Nf8OFJ0/kzW2ez5475Yw6Zx3uFuTwf
tcNDegV/bsjHhpr7Su7UAL8/y+aX9gfZszUWvALj0UrgXPV84Zu6qKke+IM3
eJI3+f9ZmdKjquP941G3+wc+cAJuTGTHhDv0hRzhFXmOxYyPxLtALGqZzr7P
LP4Oe3Infjvq5Z3CLmvfrnv9qncwMLsYfed9Gwq+fS/sE9/0f3dwgJnCFr7z
TjJL2D/M7l9PDi6Hn7eFbX5kz9RQ5AzO2wMr8joTbyMcGQ5bzgfjDnwZDD01
gTd+Xmbj/0L7lWy+8IZxvxYcYxYnot+88cfiPfyY3Y957Ztivpiz8Zhf7q9r
uE5qZF8X/4aB0MMFuMNbSV4/C/vZFLzjHthiMxr/lI2lazun/Xm27Vw2ZwbC
J1z4FRyA4zMx22BEfrX4F0zFW8T8zcY71i49e9+a/sfQ49eFsQATcMMODmLb
E72bLN1zaicu7+W1eC+WF8btUryBN6LeZ9ny02y78bClz6eCe9Q3EzNCju14
E4ai1+DzFzhT9Og=
         "]], PolygonBox[CompressedData["
1:eJwlkssrhVEUxZfX5bqMFfnO/e5QUUaGiqKY4E8wICWGDGSKGZLHHTAy8pp5
FmVCHgOvckWRFOU1NpDftger1j77nH3WXnvH3YNdA/mSakAheA3SUVIaAhWR
dEe8DV8FZ/B98J2QFoukHvKTsdSekk45uyLeATPwc3Cclka531QqrfD+FD4P
1hP+xxt8DNSVSLXcaef+O3iA5xdLn9S6IL+RdA2mpS/2v/rAMvkscS13C8AX
cRNxW8o1NcNng/dST81heIazHG8byqXKjPTCmy3uzoMRcjfEl+TnyqS8jGsw
LXfk18i3gk54B2iBVwXP5cAq8SjIprzmf+3Ia5sm03YduTdWY4o4xN7LLUjD
x6nXn3CNE/BPcJ50TabN/rC/OphVJblnzr4SPpMf4ixYhi8xnwV4b+TcPDog
/q2WGuWem/fmiXljHl/C74NrmQabvG1L+2xMQy5yT8wb+/Mjcg/MC+t5N3JP
zVvbgW3i3dhnYzPdg58E34VD8Gi9Bd8t2xHblafgOevBepkLvmu2M7Y7f/J9
cBM=
         "]]}]}, 
     {RGBColor[0.9770752659874431, 0.8126881649686079, 0.5289333245610737], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFUz1Pk1EUPmjSBG+Z3hLB4S2Xue1CW5hLAnHEramTm5DI1GoT02JLgm6Q
l5J0xMTJiGAIqHHQzR1GVn8A/8DnyXmaDifn455znvN144vdZ68emFkT9BD0
Nprd58z+pWanoArkz+DtvNkbUBV6V3ITgfPB7DHoKWI/wq+G92/gdbwnsG/P
mF2k7nsJXggeQ3++FyQvRbcXwRfBF0BbsJfnvJ4EedbxlkFuRK+rA4xyzmth
TcTenvV4xl4B7xf0u6LZIHgu5mEvHdXPeOq0M09b9j3VVhLOa9n/Lpn9eWT2
I/W+mZ/1/4atlXNc1k6dMm3PQTszzqmvgIbw+Qoa5dyXOWk/0HyI3dIb7WvA
X837POuSWfv31PGeLHudbdmZvzLnfV9q/l/Az7RT7pZz5UxG4hXJzF0XFndE
uaSbYEwvOkZP82FcWVhV9cuaM+jHwXsnp16TnT70HQfvnX1+KPr+3oN/Sn0H
L4F1ojw11cZZsIej6DO8Tb2GoebZ1p1yp/3gdfJuJvWt6GZqqoHvZfnXNb+S
sIhDnftI1O8N5wj5MPpddOTHPvaD5ycfhumuB5In/ROXs8yEyx2OdTc/U+9j
I3rfI82wqh4S3VImO3fP+OXoMYzdBD9PfXZd/ZtemM7knXphH/0wfe/L3lDM
tfZwoJtk3J58/gNrx3fS
         "]], PolygonBox[CompressedData["
1:eJwlkK9Lw1EUxa8ign6tQ4fwtqt9TbAb1m2rJv1uuKgDf40JYlN0wqpgEje1
6GTFZt/i/gGjVYufww0fuIf33nnnXN9pbu/PmtkqzMFrMtuYN2stmf25mcNy
ZlaAMvMx9JhX4J27Exgwd6DO2RD9uRh3dHeA7jLfwiH6BH7w78IHZ1foPmc3
6C0PD3mdQ8MDzfL8Kps10RfoM3jg/S/6gKwV3vfRVQ9vZbpmbsFdFp3uU3RS
txqlX9C76NMsMozRax7dirDOPC2ZjRZiB9rFnsffbciZv2ETv3yGdyk6qqv+
fEaXPHanzMouT3nneF7i/Zgiuzzk9ZQimzqpm/7QX8qorG8pdqUdHqH/AT2z
QHM=
         "]]}]}, 
     {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
      GraphicsGroupBox[{
        PolygonBox[{{7704, 1662, 8681}, {1669, 1740, 711}, {1149, 987, 82}, {
         7842, 1742, 8569}, {8681, 1662, 7851}, {1740, 1662, 711}, {7856, 
         1670, 8568}, {1670, 1742, 817}, {987, 1107, 82}, {987, 1149, 817}, {
         1107, 987, 711}, {1673, 1669, 987}, {8698, 1669, 7853}, {8699, 1671, 
         7858}, {1671, 1673, 987}, {1671, 987, 817}, {1742, 1671, 817}, {7854,
          1669, 8698}, {8568, 1670, 7855}, {7857, 1671, 8699}, {987, 1669, 
         711}}], PolygonBox[{{7858, 1671, 1742, 7842}, {7853, 1669, 1673, 
         7860}, {7841, 1740, 1669, 7854}, {8569, 1742, 1670, 7856}, {7851, 
         1662, 1740, 7841}, {7860, 1673, 1671, 7857}}]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
        LineBox[{7704, 8681, 7851, 7841, 7854, 8698, 7853, 7860, 7857, 8699, 
         7858, 7842, 8569, 7856, 8568, 7855}]},
       "20000"],
      Annotation[#, 20000, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
        LineBox[{7862, 8156, 8481, 8480, 8479, 8559, 7845, 8553, 8554, 8552, 
         7891, 8592, 8515, 8514, 7863, 8572, 7909, 8574, 7866, 8518, 8519, 
         8593, 7892, 8555, 8556, 8392, 7865, 8573, 7864, 8730, 8482, 8483, 
         8073, 8072}]},
       "15000"],
      Annotation[#, 15000, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
        LineBox[{7680, 7684, 7962, 8620, 7963, 8621, 7918, 8428, 8635, 8634, 
         8517, 8516, 7919, 8602, 7948, 8127, 7783, 8273, 8089, 8090, 8161, 
         8160, 8138, 8139, 8062, 8141, 8140, 8154, 8145, 8146, 8056, 8086, 
         7703, 8168, 8169, 8088, 8087, 8272, 7782, 8126, 7908, 8186, 7907, 
         8277, 8101, 7917, 8705, 7893, 8174, 7897, 8266, 8267, 8071, 7678, 
         7682, 8205}]},
       "10000"],
      Annotation[#, 10000, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwVzzkvhGEUhuEzEZ0CI0FhGaGwRDQkZtBrSBR2jaWSmFIhdPwC/oI1mNoS
yx+wNDQU+lEyCsb1FXfu5zzveed7J7OYn1hLRcQSyk0RFc0RjS0RDVhtjdjn
A3TI7ehzfp+JGNbd8Qj36LuRdfapG9Itywu6Fb42n8sFzMtVbc54Fs/25/iB
n/CId3Ol3Tp3d+VxeQwl84+5hEH5gi+xjm38en9KfyqfYQOF5Nvo13/xNz7k
Tb+3hXTyZn7T1/h2LaoxZU7zJM9gGkf2DnGVzO6NyjvJW1C0O6Dr1HUhp7vR
ZfmWe50V5T35Jflf/MrHfIK8O38oo97eP1I7P2g=
         "]]},
       "5000"],
      Annotation[#, 5000, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], CapForm["Butt"], 
        LineBox[{7687, 9702, 7688, 9583, 9584, 9743, 8885, 9585, 8886, 
         10085}], 
        LineBox[{7690, 9805, 9806, 9505, 9507, 9506, 8560, 9793, 9490, 9546, 
         8562, 9727, 8561, 10032, 9726, 7839, 8743, 10697, 8744, 8829, 9438, 
         8828, 9555}], LineBox[{7691, 9163, 9164, 9070, 9283}], 
        LineBox[CompressedData["
1:eJwV1XfUl3MYx/G7gXYq7T1U2lMltId2T5Nop0KDVEc4RjSeSoiT9p78o0Gh
oaQ9aHFoaj51TgspKq/rj/f5XJ/ruu7v/fvd31Wy77CUoemSJHkyfZKUKJYk
u3C3ZJLspuPRqESSjKOHiifJG+Lc4rHquWgFOhqjsJwfQodip76N/LviDXQT
umGZ/F9yk8TP02N84VJJcpxW56vhhPgkvsF3+BaN9Pegjelqv2OGuJY4I61J
23iuNf4Wz6UP6cmLKXw/PR/Qw/xW8ct0Kt9Y3ATD+ex+wzBaXL4Zzcw3p2WR
zngP069oQf0N9cyj8zEXHeSbyeX1zBX+tniS/lQM5G/xj4ozqdemK7AcXdW6
4a74DgqI8yE/mvI/GLcJ3UZ/x2+4xJcyXpq4srgSiulPlftTbkiML74lXhnz
gcfUh9I+apvRGy/x9eR7io/o7UUP0sM4hKPIqecPeganMVJPC880xzS1vbgn
v4eexzlsU5tJJ9DDyOk/l+OPiMvScXQ8UjzXCR2xkC9C8+ltr6eoeIF3tUJz
vqp6NTzF/6i2A9tRWO2EXBE6i76GFH3v8wfFI+g1fdvoRPk1GCO+IZcqPoM8
3llR7qz4HKZgMiZhtvxaXNJfhh415nQ6QO0t8a/4BaPl6suNirWmty/6R43O
oXNj7pHBuzLTS/qmq6XRdJ5rQxfQTrEm5LshRa6WXMfYj7EXY09hb3zv2Cd6
q+OyuIKezuIu9D6+hjgjXY91KGmczmqLaV+163Kvxnrly8T6xhW5lnL3x3em
V/n08lVQQ1wT19XuRY0m8jfoHT6HWnv+Tz67OFvsE/k9/F7swn7swyD5L2Pd
6Xku1h1W8YPlf6YHsRs/4QAKyf9Nb8a5gQze80/sGfnb9D7+Gs1Ib9HaxquF
qvwDaK3vAflW8d/4f2Pu8AW/Pb55fDu6SG1xrCF+R+x1fB3nHdZjHdqq1dTb
jnbxjs7oID9NrrJcKVpf7jHUi28W6xFZzXtHOh/zMAo31T/zTEvPzIjzgp+M
iTjAp8aZE+cGnRG9sZb4D/WfxwWk4SIqyU+NMw5L8LTeZ9AdS/ketKuej8Qf
Y5X3N+A7xX4Qz44zhN9Ji9Is+rMiM9rG/MfZjBZq7fiF0R//nV8U/5m25dth
Fv+g/5sbuVA+zgL5R2hdWid6xAPpBXoR+5Do3U8/QVZjZIuz0HuW6VsRdwse
VBskd0x8HEsixy+l2Wk/9BH3Ro6YT7raON+Lh3u2p3gYHSP/Oh7HE3hBfUKc
O+rlYt7lytPKtEqsJVzm89MCyIQWsb5iz9DCsU7jDIv9wScxB+iOlfznuBpn
VMwhZuNI3H/qb6ud5d+h5+LulNsiHqneS/xm3ANxb6GqXOm4C/U1RINY6/Jt
kMX3a01L6nmF5uBH0GZxl8S8xz6KfR/j8UfoR3L9xR/S/2Ivx5mHORirnt4Y
N9Ve4ofEnpGrE/vIOHXpzDhT5ZqKn427lG6O740N2ISNOIXTcS7jvRg7zli9
W+Je8nzBOMtRKNZJvDfOtDgvaSm6mhbxW0qL14jXoiLyGmNr3Bv0U7XB6M8P
wFi5hvE++qL8CblTOIlcfJ6Yv1inNA3/A2lWVk0=
         "]], 
        LineBox[{7776, 10443, 10442, 9519, 10637, 10638, 10636, 8709, 9520, 
         8708, 9521, 9960}], 
        LineBox[{7779, 9627, 7777, 9626, 7778, 10550, 10552, 10551, 8998, 
         10632, 10631, 8997, 9242}], 
        LineBox[{7809, 10297, 7810, 10726, 10296, 10295, 9058, 10722, 9057, 
         9095}], LineBox[{7846, 9444, 9443, 9597, 9596, 8931, 10618, 9024}], 
        LineBox[{7879, 10782, 10781, 9997}], 
        LineBox[{7898, 10358, 10357, 10359, 9303, 9470, 9374, 9494, 8609}], 
        LineBox[{7901, 10641, 7902, 10301, 10303, 10302, 9067, 10545, 10546}],
         LineBox[{7903, 10186, 10187, 9062, 10285, 9063, 9269}], 
        LineBox[{7967, 9677, 7968, 10299, 10300, 10728, 10727, 9066, 10543, 
         10544}], LineBox[{8076, 10195, 10196, 8577, 10363, 9387, 9388}], 
        LineBox[{8078, 10746, 10376, 10375, 10377, 9065, 9423, 9108, 10095, 
         8955}], LineBox[{8081, 9709, 8080, 10202, 8082}], 
        LineBox[{8117, 10640, 10639, 9538, 9537, 9539, 9848, 9849, 9981}], 
        LineBox[{8133, 9662, 9661, 9808, 9882, 9883, 9988}], 
        LineBox[{8134, 9660, 9659}], 
        LineBox[{8135, 10416, 10415, 9436, 10480, 10481, 7793, 10653, 10482, 
         10483}], LineBox[{8142, 10612, 8143, 10573}], 
        LineBox[{8162, 10597, 10596, 9119, 10739, 9315, 9316, 9560}], 
        LineBox[{8163, 10575, 10574, 8967, 10710, 9098, 9099, 9559}], 
        LineBox[{8166, 10665, 8167, 10784, 10783, 10598, 10600, 10599, 9120, 
         10740, 9317, 9318, 9389}], LineBox[{8179, 9124, 9309}], 
        LineBox[{8200, 10577, 10576, 8972, 9104}], 
        LineBox[{8201, 10741, 9125, 9312, 9313, 9828}], 
        LineBox[{8202, 9640, 9639, 7905, 9779}], 
        LineBox[{8209, 10752, 10426, 10425, 10427, 10428}], 
        LineBox[{8212, 10387, 10386, 10388, 10389}], 
        LineBox[{8238, 10759, 8237, 10758, 10209, 8911, 10370, 8910, 8948, 
         8909, 10286, 8947, 10287}], 
        LineBox[{8252, 10579, 10578, 8977, 9105, 9106, 9833}], 
        LineBox[{8254, 8253, 10762, 8255, 8666}], 
        LineBox[{8290, 8288, 8289, 8965}], LineBox[{8297, 8066, 8298}], 
        LineBox[{8308, 10219, 8307, 9748, 8309}], 
        LineBox[{8313, 10445, 10444, 10446, 9475, 9958, 9476, 10100, 9477, 
         8994, 8995, 8993, 9418, 9419, 9415, 9417, 9416, 9903, 9904}], 
        LineBox[{8315, 8314, 9339, 9367, 10006, 9366}], 
        LineBox[{8320, 10220, 10221, 8800}], 
        LineBox[{8363, 10738, 9150, 9346, 9220, 8918, 9588, 9589, 9435, 10139,
          9434, 9991, 9751, 9752, 10163, 9753, 9706, 9705}], 
        LineBox[{8365, 9642, 9641, 9784, 9643}], 
        LineBox[{8374, 10516, 8373, 10590, 10592, 10591, 9153, 9787, 9152}], 
        LineBox[{8404, 9629, 9628}], 
        LineBox[{8408, 10750, 10393, 10392, 10394, 9363, 9943, 9364, 10099, 
         9365, 8991, 8992, 8990, 9889, 9890, 9701, 9888, 9887, 10325, 10326}],
         LineBox[{8419, 10236, 10235, 10237}], 
        LineBox[{8427, 10017, 10672, 10016, 10673, 8322, 10349, 8321, 10348, 
         10347}], LineBox[{8429, 10707, 10619, 10620, 10622, 10621}], 
        LineBox[{8463, 10581, 10580, 9004, 10715, 8784, 9173, 9907}], 
        LineBox[{8469, 8468, 8470, 9144, 10004}], 
        LineBox[{8492, 10027, 10028, 8810}], 
        LineBox[{8527, 9674, 9673, 9825}], LineBox[{8575, 7867, 8891}], 
        LineBox[{8576, 7868, 9007}], LineBox[{8581, 10150, 10149, 10152}], 
        LineBox[{8583, 10664, 8582, 9651, 9729, 9728}], 
        LineBox[{8591, 10678, 7890, 9082, 10108, 10747, 10107}], 
        LineBox[{8594, 9655, 8595, 9568}], 
        LineBox[{8608, 10437, 10436, 10438, 9429, 9947, 9430, 10272, 9431, 
         9031, 9032, 9030, 9033, 10687, 10686, 10685, 8486, 10585, 10587, 
         10586, 9160, 10732, 9159}], LineBox[{8610, 10037}], 
        LineBox[{8623, 9665, 8624, 10403}], 
        LineBox[{8625, 9738, 9737, 10042}], 
        LineBox[{8654, 10589, 10588, 9043, 10720, 8788, 9176, 9908}], 
        LineBox[{8665, 9044, 9297, 9298}], 
        LineBox[{8735, 9803, 10010, 10011, 9235, 10122}], 
        LineBox[{8736, 8231, 10760, 7991, 8951, 8232, 9277}], 
        LineBox[{8738, 9804, 10009, 9200, 8846, 9209, 9210, 9053, 10282, 9052,
          10169, 10168}], LineBox[{8740, 10057, 9291, 10134, 9361, 10135}], 
        LineBox[{8759, 8940, 8758, 8760, 8834, 9998, 10079}], 
        LineBox[{8764, 10701, 8763, 10525, 10526, 8752, 9734, 10053, 10695, 
         10052, 10696, 8701, 10694, 10145}], 
        LineBox[{8771, 8769, 8770, 8838}], 
        LineBox[{8780, 9809, 10050, 10051}], 
        LineBox[{8781, 9810, 10025, 10026}], 
        LineBox[{8782, 8176, 10277, 10279, 10278}], 
        LineBox[{8785, 10724, 8206, 9036, 9812, 10041}], 
        LineBox[{8786, 10725, 8207, 10233, 10234, 8622, 9675, 9676, 7965, 
         9829, 9830}], LineBox[{8799, 9544, 9952, 9543}], 
        LineBox[{8802, 9721, 8801, 9719, 10020, 10681, 10019, 10125}], 
        LineBox[{8804, 10222, 8803, 9720, 10022, 10021, 10023}], 
        LineBox[{8806, 8448, 9525, 9817, 10063, 9961, 9523, 9524, 7875, 9736, 
         9735, 10448, 7874, 10449}], 
        LineBox[{8811, 9827, 10033, 9252, 9025, 9251}], 
        LineBox[{8812, 8590, 10778, 8589, 9645, 9716, 10755, 8155, 10756, 
         10757, 10434, 10433, 10435, 9064, 9103, 7992, 9823}], 
        LineBox[{8814, 8626, 9039, 9831, 10044}], 
        LineBox[{8815, 8638, 10779, 8637, 9126, 9498, 9789, 9497}], 
        LineBox[{8817, 8816, 8818}], 
        LineBox[{8821, 8679, 9503, 9504, 9501, 9502, 10164, 10166, 10165, 
         7773, 10167}], 
        LineBox[{8824, 8680, 9513, 9514, 9511, 9512, 10475, 10476, 7771, 
         10474, 7772, 9687, 9688, 9843}], 
        LineBox[{8835, 8762, 10702, 8761, 10703, 8765, 8766, 8836, 10003}], 
        LineBox[{8837, 8768, 10761, 8767, 9117, 9118, 9274, 10133}], 
        LineBox[{8839, 8724, 8737, 7740, 9013, 10238, 10461, 9587, 8913, 
         9970}], LineBox[{8841, 10556, 10330, 10329, 8489, 10786, 10787, 
         10691, 10690, 10069, 10067, 10179, 10068}], 
        LineBox[{8845, 10211, 10210, 8245, 9278, 8246, 9129, 9323, 9128}], 
        LineBox[{8852, 10666, 8851, 9508, 10060, 10241, 9950, 9449, 9450, 
         7880, 9557, 9558}], LineBox[{8856, 8855, 9378, 9379, 9931, 10049}], 
        LineBox[{8868, 8883, 8869, 10332, 10333, 10735, 7889, 10334, 10335, 
         9850, 9851, 9692, 9853, 9852, 8729, 8902}], 
        LineBox[{8871, 9197, 8872, 9076, 7715, 8873, 10084, 10154, 10155, 
         9564, 10455}], LineBox[{8877, 10253, 10355, 9286, 9073, 10324}], 
        LineBox[{8878, 8896, 8879, 10558, 10559, 10557, 7921, 9635, 9637, 
         9636, 9777, 9638}], 
        LineBox[{8887, 8210, 10064, 8211, 10001, 10658, 10000, 10659, 7969, 
         10080}], 
        LineBox[{8888, 10013, 10012, 8230, 9399, 9400, 9398, 9567, 9566}], 
        LineBox[{8898, 10257, 10429, 9491, 9373, 10382}], 
        LineBox[{8901, 10704, 8900, 10002}], 
        LineBox[{8907, 10566, 10338, 10337, 8344, 10785, 8343, 10676, 10677, 
         10117}], 
        LineBox[{8908, 10568, 10567, 8522, 9672, 8521, 9824, 10030}], 
        LineBox[{8916, 9625, 8917, 9696, 9697, 9877, 9698, 9876, 9875, 9885, 
         9886}], LineBox[{8921, 10572, 8922, 10605}], 
        LineBox[{8943, 9601, 7951, 8880, 10798, 8881, 8945, 9781, 8944, 
         9873}], LineBox[{8949, 10092, 10093, 9410, 10162, 9409, 9934, 9333, 
         10374, 10372, 10373, 10371, 8195, 10207, 10206, 7900, 9730, 8755, 
         10061, 10103}], 
        LineBox[{8950, 10744, 10742, 10743, 9581, 9582, 9427, 9428, 7686, 
         9606}], LineBox[{8960, 10096, 9107, 10112, 9422, 10408}], 
        LineBox[{8963, 10097, 9411, 9932, 9332, 9933, 10212}], 
        LineBox[{8971, 10502, 10501}], 
        LineBox[{8973, 10623, 8223, 8974, 9171, 9607, 9905}], 
        LineBox[{8976, 10604, 8224, 8975, 9001, 9413, 9420}], 
        LineBox[{8999, 9609, 9448, 9949, 9447, 10420}], LineBox[{9002, 9610}],
         LineBox[{9003, 9891}], 
        LineBox[{9010, 9009, 8956, 10792, 8957, 8919, 8920, 7786, 8980, 7787, 
         9993, 9992, 10083, 10082, 8847, 9837, 9838, 9683, 9980}], 
        LineBox[{9015, 10794, 9014, 10268, 10270, 10269}], 
        LineBox[{9019, 9018, 9020, 8897, 9288, 9157, 9158, 9005, 9245}], 
        LineBox[{9023, 9021, 9022, 9006, 9611, 9483, 9484, 9246, 9926}], 
        LineBox[{9028, 9027, 9029, 9026, 9253}], 
        LineBox[{9035, 8778, 10770, 8776, 9652, 8777, 9937, 9653, 9796, 8636, 
         10432}], LineBox[{9042, 9040, 9041, 9257, 10045}], 
        LineBox[{9069, 10318, 10317}], 
        LineBox[{9084, 10503, 9085, 9086, 10273, 10275}], 
        LineBox[{9087, 9046, 10721, 9047, 10319, 10320, 10734, 10733, 8488, 
         9500, 9561}], 
        LineBox[{9089, 10539, 9048, 10538, 9049, 10322, 10323, 10321, 8340, 
         9576, 9577}], 
        LineBox[{9122, 9194, 9123, 10594, 10595, 10593, 8178, 10613, 10615, 
         10614, 9307, 10797, 9306, 9308, 9928}], 
        LineBox[{9130, 9330, 9131, 8248, 9279, 8247, 10014, 10015, 9749, 8366,
          10223, 8773, 10362, 9327, 9328}], 
        LineBox[{9133, 10723, 9132, 7817, 9437, 9948}], 
        LineBox[{9134, 8268, 8979, 10343, 10344, 8079, 10345, 10346}], 
        LineBox[{9135, 8269, 9880, 9881, 9644, 9786, 8083, 9922}], 
        LineBox[{9138, 9137, 7805, 9096, 9268, 10284, 9267, 10352}], 
        LineBox[{9141, 9140, 10271, 8793, 10215, 8304, 9747, 8305, 10258, 
         10336}], 
        LineBox[{9147, 9146, 9111, 9112, 9055, 9093, 9054, 7794, 10484, 10485,
          10487, 10486, 9056, 10292, 10293, 7876, 10294}], 
        LineBox[{9148, 9109, 9110, 9051, 9092, 7742, 9136, 7741, 9091, 9050, 
         9264}], LineBox[{9165, 10655, 10654, 7800, 10547, 10549, 10548}], 
        LineBox[{9169, 8996, 8987, 8988, 9241, 9790, 9240, 9925}], 
        LineBox[{9175, 9174, 7693, 9088, 9260, 10276, 9259, 10350}], 
        LineBox[{9177, 8789, 10111, 8790, 10110, 10788, 10109}], 
        LineBox[{9178, 8791, 9863, 8792, 9695, 9694}], 
        LineBox[{9180, 9179, 7729, 10765, 9090, 9263, 10131, 9261, 10230}], 
        LineBox[{9190, 8859, 8858, 10242, 10243, 8751, 9740, 10076, 7881, 
         10077, 10078}], 
        LineBox[{9199, 10705, 9198, 10529, 10530, 10528, 10527, 8882, 10766, 
         10767, 9208, 10768, 8890, 9213, 9406}], 
        LineBox[{9204, 8857, 9856, 9857, 9693, 9855, 9854, 9901, 9902}], 
        LineBox[{9205, 8866, 9894, 9895, 9703, 9893, 9892, 10342, 10341, 7946,
          10736, 10340, 10339}], 
        LineBox[{9207, 8876, 9617, 9618, 9614, 9616, 9615, 9920, 9600, 7947, 
         9408, 10462, 10464, 10463}], 
        LineBox[{9216, 9369, 9368, 9154, 8390, 9280}], 
        LineBox[{9217, 9343, 9342, 9121, 8177, 9275}], 
        LineBox[{9221, 8935, 8936, 9189, 9778, 9188, 9912, 10161}], 
        LineBox[{9223, 10274, 9222, 9237, 10541, 10542, 9060, 10540, 9061, 
         10737}], LineBox[{9228, 8953, 8954, 9621, 9623, 9622, 7692, 9760}], 
        LineBox[{9229, 8958, 8959, 10478, 10479, 7774, 10477, 7775, 9664, 
         9666, 9813}], 
        LineBox[{9230, 8961, 8962, 10170, 10172, 10171, 7803, 10173}], 
        LineBox[{9232, 9231, 8144, 8964, 9094, 9412, 9762, 9763}], 
        LineBox[{9234, 10626, 8966, 9233, 9788, 9954, 9955, 9718}], 
        LineBox[{9236, 10671, 10670, 9145, 10731, 10730, 8797, 9184, 9764, 
         10327}], LineBox[{9244, 10534, 10533}], 
        LineBox[{9249, 10537, 10536, 10535, 9016, 9183, 9619, 9182, 9909}], 
        LineBox[{9254, 10043, 9255, 9037, 9038, 10489, 10490, 7807, 10488, 
         9667, 9668, 7808, 9814}], LineBox[{9256, 10128}], 
        LineBox[{9258, 9045, 10309}], 
        LineBox[{9265, 8362, 9149, 9344, 9345, 9219, 9921}], 
        LineBox[{9266, 8364, 9151, 9324, 10312, 10398, 10399}], 
        LineBox[{9281, 8407, 9155, 9302, 10316, 10450, 10451}], 
        LineBox[{9284, 9071, 9167, 9166, 8580, 9493, 9492, 10151}], 
        LineBox[{9285, 9072, 9168, 10684, 10683, 10682, 8485, 10582, 10584, 
         10583, 9008, 9186, 9613, 9911, 9612}], 
        LineBox[{9287, 9170, 9075, 9074, 8540, 10601, 10603, 10602}], 
        LineBox[{9295, 8783, 8194, 9012, 9811, 10029}], 
        LineBox[{9300, 10495, 7859, 10494, 9679, 9680, 9682, 9681, 8747, 
         10240, 8867, 10440, 9769, 9770}], 
        LineBox[{9301, 8832, 8700, 10410, 10411, 8750, 9708, 8749, 10058, 
         9994, 10181, 7847, 10180}], LineBox[{9321, 7999, 9390}], 
        LineBox[{9326, 9325, 10298, 8772, 10205, 10748, 10204}], 
        LineBox[{9331, 10509, 8044, 10304, 10305}], 
        LineBox[{9340, 9341, 9227, 9923}], 
        LineBox[{9352, 9292, 9704, 9293, 10366, 10367, 7844, 10368, 10390}], 
        LineBox[{9354, 9353, 7730, 9294, 9927}], 
        LineBox[{9359, 9357, 9358, 9335, 10365, 10199, 9935, 9334, 9936, 
         10005}], LineBox[{9360, 10769, 9289, 10369}], 
        LineBox[{9383, 9384, 9386, 9785, 9385, 10138}], 
        LineBox[{9393, 9392, 10364, 8748, 10198, 10197, 8077, 10414}], 
        LineBox[{9405, 9403, 9404, 9402, 9575, 9401, 9079, 8889, 10256, 9202, 
         10459, 9201, 9915}], 
        LineBox[{9424, 8296, 9139, 9336, 9337, 9214, 10460}], 
        LineBox[{9432, 9181, 8906, 10564, 10565, 10563, 8342, 10674, 8341, 
         10675, 9156, 9068, 9282, 9792}], 
        LineBox[{9464, 10625, 9296, 9463, 9355, 10417, 9356, 10214, 8282, 
         9715, 10008, 10662, 10007, 10663, 8113, 10120, 10121}], 
        LineBox[{9466, 9956}], 
        LineBox[{9467, 9458, 10505, 10506, 8000, 10504, 10507, 10508}], 
        LineBox[{9468, 9957}], 
        LineBox[{9469, 9459, 10189, 10190, 8002, 9630, 10191, 10192, 8001, 
         10447}], LineBox[{9473, 8306, 9362, 9394, 9710, 9774, 9775, 10153}], 
        LineBox[{9478, 9372, 8983, 9414, 9370, 9371, 9218, 9586, 8912, 9969}],
         LineBox[{9479, 9243, 10714, 10713, 10711, 9000, 10712, 8798, 9185, 
         9299, 9910}], 
        LineBox[{9509, 10493, 10492, 10491, 7830, 9699, 7829, 9879}], 
        LineBox[{9518, 7922, 9517, 7923, 10553, 10555, 10554, 9011, 9248, 
         10126, 9247, 10127}], LineBox[{9530, 9531, 9962}], 
        LineBox[{9535, 7931, 9739, 7932, 10306, 10307, 10729, 8981, 10308}], 
        LineBox[{9540, 9536, 7689, 9656, 9658, 9657, 9807, 8710, 10054}], 
        LineBox[{9545, 9187, 8809, 10717, 9017, 10716, 10718, 10719, 9250, 
         10031}], 
        LineBox[{9547, 7966, 9457, 9456, 9951, 10062, 9541, 9522, 8208, 10280,
          8787, 10281}], LineBox[{9550, 9549, 9551, 9548, 9553, 9552}], 
        LineBox[{9554, 8825, 10439, 8826, 10239, 8739, 9669, 9670, 7843, 
         9815}], LineBox[{9556, 8830, 9439, 8831, 8746, 10698, 8745, 10699, 
         7840, 10231, 10232, 8564, 9649, 8565, 9826, 9650, 9795, 8563, 9794}],
         LineBox[{9570, 9569, 9445, 9446, 9195, 9914}], 
        LineBox[{9571, 9966, 9964, 9965, 9565, 10456}], 
        LineBox[{9579, 7685, 9426, 9425, 9563, 9562, 8840, 8893, 8892, 8484, 
         9486, 9485, 10148, 10146, 10147, 9723, 8598, 10034, 9722, 7899, 8756,
          10700, 8757, 8833, 9304, 9396, 10188, 9395, 10405}], 
        LineBox[{9592, 9593, 9590, 9591, 10646, 10647, 10645, 10627, 10628, 
         10630, 10629, 9347, 9380, 9713, 9782, 9712}], 
        LineBox[{9603, 9602, 8021, 9462, 9461, 9599, 9598, 9102, 10263, 10265,
          10264, 10266}], 
        LineBox[{9608, 7770, 8984, 8985, 9239, 10123, 9238, 10124}], 
        LineBox[{9678, 10790, 10791, 10789}], 
        LineBox[{9754, 9755, 9757, 9756, 8411, 9750, 8412, 9648, 9975}], 
        LineBox[{9771, 7872, 9632, 9633, 9631, 8487, 10229, 10689, 10688, 
         8807, 9724, 8808, 10101, 10381}], 
        LineBox[{9783, 9322, 10609, 10611, 10610}], 
        LineBox[{9791, 9542, 8989, 8310, 10225, 8794, 10244, 10226, 10315}], 
        LineBox[{9820, 9818, 9819, 9671, 9822, 9821}], 
        LineBox[{9832, 7979, 9319, 9320, 10383, 10384, 10385}], 
        LineBox[{9835, 9834, 9799, 9800, 9654, 9802, 9801, 7925, 8734, 8733, 
         8822, 8823, 8754, 9959, 8753, 9510, 9765, 10441}], 
        LineBox[{9842, 8068, 9115, 9116, 9273, 10203, 9271, 10353}], 
        LineBox[{9845, 9844, 9846, 9691, 9847, 9690, 9689, 8854, 9741, 8853, 
         9203, 9465, 9916}], 
        LineBox[{9858, 8510, 9489, 9488, 9580, 8894, 9487, 10763, 10764, 8895,
          10532, 10531, 8843, 9270, 9100, 9101, 8875, 9206, 10328}], 
        LineBox[{9867, 9766, 8925, 8860, 8862, 9080, 8861, 9081, 10254, 10255,
          8923, 10457, 10458}], 
        LineBox[{9869, 9773, 10776, 7873, 9772, 9634, 9978}], 
        LineBox[{9871, 9870, 7694, 9761, 9624, 9862, 9861, 8905, 8933, 10708, 
         8932, 10709, 8937, 9744, 8938, 9745, 8930, 9594, 10777, 9595, 9442, 
         10409, 10178, 9917, 9215, 9918, 9919}], 
        LineBox[{9872, 8934, 9860, 8904, 9859, 8903, 9976}], 
        LineBox[{9878, 9866, 9864, 9865, 9982}], LineBox[{9896, 9897, 9990}], 
        LineBox[{9900, 9898, 9899, 9989}], 
        LineBox[{9906, 9578, 9172, 8779, 10706, 8899, 10561, 10562, 10560, 
         8611, 9731, 9732, 10036, 9733, 8813, 9311, 10245, 10361}], 
        LineBox[{9913, 9191, 9780, 9192, 8942, 8941, 9224, 10035}], 
        LineBox[{9924, 8187, 9471, 8188, 10513, 10514, 10515, 9351, 9942, 
         10213}], 
        LineBox[{9930, 9314, 9377, 10651, 10652, 8038, 10780, 8037, 10648, 
         10650, 10649, 9451, 10496, 10498, 10497}], 
        LineBox[{9938, 9338, 9350, 10793, 9348, 9472, 9349, 10378}], 
        LineBox[{9939, 8865, 9441, 8863, 10775, 8864, 10617, 10616, 8844, 
         9742, 8884, 10160}], 
        LineBox[{9940, 8927, 9440, 8926, 10771, 8928, 8915, 10259, 8952, 
         10267}], 
        LineBox[{9945, 9944, 8842, 9397, 9776, 9572, 8870, 9967, 9968}], 
        LineBox[{9946, 9034, 9421, 10176, 10177}], 
        LineBox[{9953, 9529, 9528, 9573, 10753, 9574, 10754, 9496, 10430, 
         10431}], LineBox[{9963, 9534, 9532, 9533, 10246}], 
        LineBox[{9971, 9605, 9604, 8968, 8970, 8969, 9646, 9647, 8175, 10421, 
         10423, 10422, 10424, 9305, 9382, 9711, 7924, 10137}], 
        LineBox[{9973, 9972, 9974}], 
        LineBox[{9979, 9836, 8849, 9211, 9212, 9078, 10283, 9077, 10175, 
         10174, 7804, 10406}], LineBox[{9984, 9983, 9985}], 
        LineBox[{9986, 9700, 9987}], 
        LineBox[{9999, 9193, 7964, 8946, 9226, 9874, 9225, 10119}], 
        LineBox[{10018, 9816, 8986, 10667, 10668, 10669, 10217, 10216, 
         10218}], 
        LineBox[{10024, 9797, 9798, 9620, 9759, 7676, 9758, 9290, 10356}], 
        LineBox[{10039, 10038, 10040, 10116}], 
        LineBox[{10048, 10046, 10047, 10129}], 
        LineBox[{10073, 10072, 8827, 8696, 8742, 8741, 7838, 9113, 9114, 9272,
          10132}], 
        LineBox[{10075, 10074, 7878, 10657, 9995, 10656, 9996, 8039, 10059, 
         8850, 10517, 10519, 10518}], 
        LineBox[{10081, 8805, 10056, 10055, 8728, 9499, 8727, 9746, 9433, 
         10470, 10471, 7769, 10469, 10472, 10473}], 
        LineBox[{10087, 10086, 10088}], 
        LineBox[{10089, 9868, 8929, 9977, 9767, 9768, 8982, 9884, 10159}], 
        LineBox[{10090, 8939, 10091, 10118}], 
        LineBox[{10094, 8165, 9714, 8164, 10660, 10661, 10201, 10745, 10200}],
         LineBox[{10102, 8796, 9725, 8795, 10642, 10644, 10643, 9474, 10523, 
         10524, 8311, 10418, 8312, 10419}], 
        LineBox[{10105, 10104, 10106, 10065, 10066, 8774, 9663, 8775, 8820, 
         9329, 8819, 9391, 10404}], LineBox[{10113, 9143, 10310}], 
        LineBox[{10114, 10115}], 
        LineBox[{10130, 9262, 9162, 10795, 9161, 8520, 10395, 10397, 10396}], 
        LineBox[{10140, 9455, 10141, 9495, 10144}], 
        LineBox[{10143, 10142, 9480, 9527, 10751, 9526, 9481, 9482, 9460, 
         10412, 10413}], 
        LineBox[{10158, 10156, 10157, 9707, 8848, 9684, 9685, 9841, 9686, 
         9840, 9839, 10313, 10314}], LineBox[{10185, 10184}], 
        LineBox[{10194, 10193, 10070, 10071, 10692, 10693}], 
        LineBox[{10227, 10749, 10228, 10680, 10679, 8409, 9717, 8410, 10098, 
         10407}], 
        LineBox[{10250, 10248, 10249, 10247, 7806, 9097, 9059, 10291, 10289, 
         10290, 10288, 7904, 10500, 10499, 9452, 10634, 10635, 10633, 8180, 
         10796, 8181, 10773, 10774, 9375, 10772, 9376, 9310, 9929, 10360}], 
        LineBox[{10252, 10251, 10182, 10183, 9196, 10331}], 
        LineBox[{10260, 9941, 9407, 8376, 9083, 8375, 10224, 8377, 10351}], 
        LineBox[{10261, 8924, 10262}], 
        LineBox[{10311, 9142, 10136, 9381, 10391}], 
        LineBox[{10354, 10208, 9276, 9127, 10510, 10512, 10511}], 
        LineBox[{10379, 10380}], 
        LineBox[{10401, 10402, 10400, 8607, 10606, 10608, 10607}], 
        LineBox[{10454, 7916, 10453, 10452, 9454, 9453, 9516, 9515, 8874, 
         10520, 10522, 10521}], LineBox[{10467, 8978, 10466, 10465, 10468}], 
        LineBox[{10570, 10571, 10569, 8914, 10624}]},
       "0"],
      Annotation[#, 0, "Tooltip"]& ], {}, {}}}],
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-10, 10}, {-10, 10}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output"]
}, Open  ]],

Cell["\<\
So we know we are safe in this region. Do we know that if we are outside this \
region we are certain to have ideal points? To find out, think about the \
derivatives w\[CloseCurlyQuote][0] and w\[CloseCurlyQuote][1]. We know their \
values are 3(w1-1) and 3(1-w2), respectively. If w\[CloseCurlyQuote][0] < 0 \
(i.e., w1 < 1) or w\[CloseCurlyQuote][1] > 0 (i.e., w2 < 1), then the \
polynomial dips below 1 for some part of [0,1]. Since it has to go back to 1, \
we know the local minimum of the cubic happens for t in [0,1]. If, in \
addition, the discriminant is positive we must have three real roots. Two of \
these roots must happen around the local minimum. Since the local minimum is \
in [0,1], so must be these two roots. This completes the proof. And here is \
the plot.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"d", " ", "=", " ", "50"}], "}"}], ",", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", "=", 
       RowBox[{"ContourPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "-", 
           RowBox[{"4", " ", 
            SuperscriptBox["w1", "3"]}], "+", 
           RowBox[{"6", " ", "w1", " ", "w2"}], "+", 
           RowBox[{"3", " ", 
            SuperscriptBox["w1", "2"], " ", 
            SuperscriptBox["w2", "2"]}], "-", 
           RowBox[{"4", " ", 
            SuperscriptBox["w2", "3"]}]}], "\[Equal]", "0"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"w1", ",", " ", 
           RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"w2", ",", " ", 
           RowBox[{"-", "d"}], ",", " ", "d"}], "}"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
         RowBox[{"RegionFunction", "\[Rule]", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"w1", ",", " ", "w2"}], "}"}], ",", 
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{"w1", ",", "w2"}], "]"}], " ", "<", " ", "0"}]}], 
           "]"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "4000"}], ",", "22600"}], "}"}]}]}], "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Row", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"p", ",", "\[IndentingNewLine]", 
          RowBox[{"Spacer", "[", "100", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"1", "-", "t"}], ")"}], "^", "3"}], " ", "+", " ", 
               RowBox[{"3", " ", "t", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "-", "t"}], ")"}], "^", "2"}], " ", 
                RowBox[{"pt", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
               RowBox[{"3", " ", 
                RowBox[{"t", "^", "2"}], " ", 
                RowBox[{"(", 
                 RowBox[{"1", "-", "t"}], ")"}], " ", 
                RowBox[{"pt", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], " ", "+", " ", 
               RowBox[{"t", "^", "3"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"t", ",", " ", 
                RowBox[{"-", "1"}], ",", " ", "2"}], "}"}], ",", " ", 
              RowBox[{"PlotRange", "\[Rule]", "10"}], ",", 
              RowBox[{"AspectRatio", "\[Rule]", "0.9"}], ",", " ", 
              RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Opacity", "[", "0.25", "]"}], ",", 
               RowBox[{"Rectangle", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
           "]"}]}], "}"}], "]"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"pt", ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "5"}], "}"}]}], "}"}], ",", "Locator"}], 
        "}"}]}], "]"}]}], "]"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {0, 5}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {0, 5}}, Automatic}}, Typeset`size$$ = {
    1252., {280., 286.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`pt$$ = {0, 5}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Row[{
         Graphics[
          GraphicsComplex[CompressedData["
1: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
bLs0lw==
           "], {{{}, {}, 
             Tooltip[{
               Directive[
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[1.6]], 
               Line[CompressedData["
1:eJwl1cMWIAgQA8Cxbdu2bdu2bdu2bdu2bds2VzVvD5X+gqQTNmpfqV3AAAEC
/BZ/biACE4SgBCM4IQhJKEIThrCEIzwRiEgkIhOFqEQjOjGISSxiE4e4xCM+
CUhIIhKThKQkIzkpSEkqUpOGtKQjPRnISCYyk4WsZCM7OchJLnKTh7zkIz8F
KEghClOEohSjOCUoSSlKU4aylKM8FahIJSpThapUozo1qEktalOHutSjPg1o
SCMa04SmNKM5LWhJK1rThra0oz0d6EgnOtOFrnSjOz3oSS9604e+9KM/AxjI
IAYzhKEMYzgjGMkoRjOGsYxjPBOYyCQmM4WpTGM6M5jJLGYzh7nMYz4LWMgi
FrOEpSxjOStYySpWs4a1rGM9G9jIJjazha1sYzs72MkudrOHvexjPwc4yCEO
c4SjHOM4JzjJKU5zhrOc4zwXuMglLnOFq1zjOje4yS1uc4e73OM+D3jIIx7z
hKc84zkveMkrXvOGt7zjPR/4yCc+84WvfOM7P/jJL37zF3/zD//yp/wBCURg
ghCUYAQnBCEJRWjCEJZwhCcCEYlEZKIQlWhEJwYxiUVs4hCXeMQnAQlJRGKS
kJRkJCcFKUlFatKQlnSkJwMZyURmspCVbGQnBznJRW7ykJd85KcABSlEYYpQ
lGIUpwQlKUVpylCWcpSnAhWpRGWqUJVqVKcGNalFbepQl3rUpwENaURjmtCU
ZjSnBS1pRWva0JY/492eDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQ
hjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKW
sZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5x
nBOc5BSnOcNZznGeC1zkEpe5wlWucZ0b3OQWt7nDXe5xnwc85BGPecJTnvGc
F7zkFa95w1ve8Z4PfOQTn/nCV77xnR/85FfA/3/9f/+a/rY=
                "]]}, -1 - 
               4 $CellContext`w1^3 + 6 $CellContext`w1 $CellContext`w2 + 
               3 $CellContext`w1^2 $CellContext`w2^2 - 4 $CellContext`w2^3 == 
              0]}}], {DisplayFunction -> Identity, AspectRatio -> 1, 
           DisplayFunction :> Identity, Frame -> True, 
           FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
           GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], ImageSize -> Large, 
           Method -> {"DefaultBoundaryStyle" -> Automatic}, 
           PlotRange -> {{-50, 50}, {-50, 50}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {{
              Scaled[0.02], 
              Scaled[0.02]}, {0, 0}}, Ticks -> {Automatic, Automatic}}], 
         Spacer[100], 
         Show[
          
          Plot[(1 - $CellContext`t)^3 + 
           3 $CellContext`t (1 - $CellContext`t)^2 Part[$CellContext`pt$$, 1] + 
           3 $CellContext`t^2 (1 - $CellContext`t) 
            Part[$CellContext`pt$$, 
              2] + $CellContext`t^3, {$CellContext`t, -1, 2}, PlotRange -> 10,
            AspectRatio -> 0.9, ImageSize -> Large], 
          Graphics[{
            Opacity[0.25], 
            Rectangle[{0, 0}, {1, 1}]}]]}], 
      "Specifications" :> {{{$CellContext`pt$$, {0, 5}}, Automatic, 
         ControlType -> Locator}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{1305., {312., 319.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
How can we find the complement of the canonical arc? Just use \[Alpha]->Pi-\
\[Alpha], exchange first and last endpoints, and flip the sign of x and y.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    TagBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
         RowBox[{"-", 
          RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", 
         RowBox[{"Cos", "[", "\[Alpha]", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], "}"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], " ", "/.", " ", 
    RowBox[{"\[Alpha]", "\[Rule]", " ", 
     RowBox[{"Pi", " ", "-", " ", "\[Alpha]"}]}]}], ")"}], ".", 
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1"}], "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
  " "}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Alpha]", "]"}]}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", 
     RowBox[{"-", 
      RowBox[{"Cos", "[", "\[Alpha]", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Alpha]", "]"}], ",", 
     RowBox[{"Sin", "[", "\[Alpha]", "]"}], ",", "1"}], "}"}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The effect is to simply multiply the coordinates of the central control point \
by -1! \
\>", "Text"],

Cell["\<\
Although this makes sense for the arc, what about the hyperbola? There must \
be a more general way to do this. The trick is to use a different projective \
transformation of the parameter so that a while u/v varies between [0, 1], \
t/s varies from 1 all the way to \[Infinity], then from -\[Infinity] to 0. We \
already know that the transformation has to have the form  {t -> u, s -> (1-\
\[Lambda]) u + \[Lambda] v} if it is to preserve the endpoints. If we pick \
\[Lambda] = 1, nothing happens. If we pick \[Lambda]=-1, we keep the curve in \
canonical form but t/s now behaves as we wanted. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"b2p", "[", "2", "]"}], ".", 
    RowBox[{"projectivereparametrization", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "-", "\[Lambda]"}], ",", "\[Lambda]"}], "}"}]}], "}"}],
       ",", " ", "2"}], "]"}], ".", 
    RowBox[{"p2b", "[", "2", "]"}]}], " ", "/.", " ", 
   RowBox[{"\[Lambda]", "\[Rule]", 
    RowBox[{"-", "1"}]}]}], " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", 
      RowBox[{"-", "1"}], "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ppoints", "[", "2", "]"}], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1", "0", "0"},
       {"0", 
        RowBox[{"-", "1"}], "0"},
       {"0", "0", "1"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], " ", "//", " ", "MatrixForm"}]], "Input"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"x0", 
      RowBox[{"-", "y0"}], "w0"},
     {"x1", 
      RowBox[{"-", "y1"}], "w1"},
     {"x2", 
      RowBox[{"-", "y2"}], "w2"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
 "So this works for any rational quadratic. \n\nTo understand what the \
projection is doing, let us use the interval [-1, 1] instead (it is easier to \
do because it is more symmetric). This is similar to a ",
 StyleBox["stereographic",
  FontSlant->"Italic"],
 " projection, but using a parabola instead of a circle. Form a ray from the \
vertex of the parabola y = 1-",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]]],
 " at (0,1) to the point (x,1-",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]]],
 ") in the parabola. Now find the intersection u = 1/x between the ray and x \
axis. When x varies from [-1,1], it is easy to see that the intersect u will \
move from -1 to -\[Infinity], then to \[Infinity] and back to 1. This is an \
example of a M\[ODoubleDot]bius transformation."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], ",", " ", 
       RowBox[{"p", "=", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", 
          RowBox[{"1", "-", 
           RowBox[{"t", "^", "2"}]}]}], "}"}]}], ",", " ", 
       RowBox[{"q", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "/", "t"}], ",", "0"}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"1", "-", 
          RowBox[{"x", "^", "2"}]}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "3"}], ",", " ", "3"}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.1"}], ",", "1.1"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "Thick"}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{"1.2", "/", "6"}], ")"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"Black", ",", "Dashed", ",", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{"p", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"p", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "0"}], "}"}]}], "}"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Dashing", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", "Red", ",", "Thick", 
          ",", " ", 
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{"c", ",", "q"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
          RowBox[{"Point", "[", 
           RowBox[{"{", 
            RowBox[{"p", ",", "q"}], "}"}], "]"}], ",", "\[IndentingNewLine]",
           "Black", ",", 
          RowBox[{"Point", "[", "c", "]"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"Text", "[", 
           RowBox[{"\"\<x\>\"", ",", 
            RowBox[{"p", "+", 
             RowBox[{"{", 
              RowBox[{"0", ",", ".1"}], "}"}]}]}], "]"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Text", "[", 
           RowBox[{"\"\<u\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"q", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", ".1"}], "}"}]}], "]"}]}], 
         "}"}], "]"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "0.5"}], "}"}], ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0.5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`t$$], 0.5}, -1, 1}}, Typeset`size$$ = {
    576., {56., 63.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`t$3144$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0.5}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$3144$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`c = {0, 
          1}, $CellContext`p = {$CellContext`t$$, 
           1 - $CellContext`t$$^2}, $CellContext`q = {1/$CellContext`t$$, 0}}, 
        Show[
         Plot[
         1 - $CellContext`x^2, {$CellContext`x, -1, 1}, 
          PlotRange -> {{-3, 3}, {-0.1, 1.1}}, PlotStyle -> Thick, 
          AspectRatio -> 1.2/6, ImageSize -> Large], 
         Graphics[{Black, Dashed, 
           Line[{$CellContext`p, {
              Part[$CellContext`p, 1], 0}}], 
           Dashing[{1, 0}], Red, Thick, 
           Line[{$CellContext`c, $CellContext`q}], 
           PointSize[Large], Red, 
           Point[{$CellContext`p, $CellContext`q}], Black, 
           Point[$CellContext`c], 
           Text["x", $CellContext`p + {0, 0.1}], 
           Text["u", {
             Part[$CellContext`q, 1], 0.1}]}]]], 
      "Specifications" :> {{{$CellContext`t$$, 0.5}, -1, 1}}, "Options" :> {},
       "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{623., {100., 107.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["We can write the function that complements the curve as ", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"complement", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p0", ":", 
      RowBox[{"{", 
       RowBox[{"x0_", ",", "y0_", ",", "w0_"}], "}"}]}], ",", 
     RowBox[{"p1", ":", 
      RowBox[{"{", 
       RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}]}], ",", 
     RowBox[{"p2", ":", 
      RowBox[{"{", 
       RowBox[{"x2_", ",", "y2_", ",", "w2_"}], "}"}]}]}], "}"}], "]"}], " ", 
  ":=", " ", 
  RowBox[{"{", 
   RowBox[{"p0", ",", 
    RowBox[{"-", "p1"}], ",", "p2"}], "}"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
We can check if the parametrization is good or bad by plotting points at \
uniformly spaced parameters.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"c1", " ", "=", 
        RowBox[{"canonicalarc", "[", "cos\[Alpha]", "]"}]}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"c2", " ", "=", " ", 
        RowBox[{"complement", "[", 
         RowBox[{"canonicalarc", "[", "cos\[Alpha]", "]"}], "]"}]}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Graphics", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
          RowBox[{"Point", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", "0.05"}], 
              "}"}]}], "]"}], "]"}], ",", " ", "\[IndentingNewLine]", "Blue", 
          ",", " ", 
          RowBox[{"Point", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}], "]"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.05"}], 
              "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PlotRange", "->", " ", 
        RowBox[{"-", "1.1"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cos\[Alpha]", ",", " ", 
       RowBox[{
        RowBox[{"Sqrt", "[", "2", "]"}], "/", "2"}], ",", 
       "\"\<Cos[\[Alpha]]\>\""}], "}"}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"1", "/", "10000"}]}], ",", 
     RowBox[{"1", "-", 
      RowBox[{"1", "/", "10000"}]}]}], "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cos\[Alpha]$$ = 2^Rational[-1, 2], 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`cos\[Alpha]$$], 2^Rational[-1, 2], "Cos[\[Alpha]]"}, 
      
      Rational[-9999, 10000], 
      Rational[9999, 10000]}}, Typeset`size$$ = {576., {285., 291.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`cos\[Alpha]$3210$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cos\[Alpha]$$ = 2^Rational[-1, 2]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`cos\[Alpha]$$, $CellContext`cos\[Alpha]$3210$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`c1 = $CellContext`canonicalarc[$CellContext`cos\
\[Alpha]$$], $CellContext`c2 = $CellContext`complement[
           $CellContext`canonicalarc[$CellContext`cos\[Alpha]$$]]}, 
        Show[
         Graphics[{
           PointSize[Large], Red, 
           Point[
            Table[
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`t], $CellContext`c1]], \
{$CellContext`t, 0, 1, 0.05}]], Blue, 
           Point[
            Table[
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`t], $CellContext`c2]], \
{$CellContext`t, 0, 1, 0.05}]]}], PlotRange -> -1.1, ImageSize -> Large]], 
      "Specifications" :> {{{$CellContext`cos\[Alpha]$$, 2^Rational[-1, 2], 
          "Cos[\[Alpha]]"}, 
         Rational[-9999, 10000], 
         Rational[9999, 10000]}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{623., {328., 335.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalarc[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[1 - $CellContext`c^2]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`complement[{
          Pattern[$CellContext`p0, {
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 
            Pattern[$CellContext`w0, 
             Blank[]]}], 
          Pattern[$CellContext`p1, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}], 
          Pattern[$CellContext`p2, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 
            Pattern[$CellContext`w2, 
             
             Blank[]]}]}] := {$CellContext`p0, -$CellContext`p1, \
$CellContext`p2}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
We can see that it is becomes a poor parametrization when the arc covers much \
more than Pi/2. This means that we should detect and split arcs that cover \
large angles. There is another reason to avoid this trick is that the curve \
will stop respecting the convex-hull property!\
\>", "Text"],

Cell["Let' s look at a cool geometric property.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", " ", "=", " ", 
       RowBox[{
        RowBox[{"canonicalarc", "[", "cos\[Alpha]", "]"}], ".", 
        RowBox[{"scale", "[", 
         RowBox[{"{", 
          RowBox[{"sx", ",", " ", "sy"}], "}"}], "]"}], ".", 
        RowBox[{"rotation", "[", "\[Beta]", "]"}], ".", 
        RowBox[{"translation", "[", "z", "]"}]}]}], "}"}], ",", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c2", " ", "=", " ", 
         RowBox[{"complement", "[", "c1", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"p1", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
           RowBox[{"p2", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", " ", 
           RowBox[{"p3", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ParametricPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "v", "]"}], ".", "c1"}], "]"}], ",", " ", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "v", "]"}], ".", "c2"}], "]"}]}], "}"}], 
             ",", " ", 
             RowBox[{"{", 
              RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
             RowBox[{"PlotRange", "\[Rule]", "4"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Directive", "[", 
                 RowBox[{"Thick", ",", " ", "Red"}], "]"}], ",", " ", 
                RowBox[{"Directive", "[", 
                 RowBox[{"Thick", ",", "Blue"}], "]"}]}], "}"}]}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"PointSize", "[", "Large", "]"}], ",", " ", "Thick", 
              ",", "Black", ",", 
              RowBox[{"Point", "[", 
               RowBox[{"{", 
                RowBox[{"p1", ",", " ", "p2", ",", " ", "p3"}], "}"}], "]"}], 
              ",", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{"p1", ",", " ", "p2", ",", " ", "p3"}], "}"}], "]"}], 
              ",", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"p2e", "[", 
                  RowBox[{
                   RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], ",", 
                 "p2", ",", 
                 RowBox[{"p2e", "[", 
                  RowBox[{
                   RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", "Red", ",", 
              RowBox[{"Point", "[", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], "]"}], 
              ",", " ", "Blue", ",", " ", 
              RowBox[{"Point", "[", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}], "]"}], "]"}]}], 
             "}"}], "]"}]}], " ", "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sx", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sy", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cos\[Alpha]", ",", " ", 
       RowBox[{
        RowBox[{"Sqrt", "[", "2", "]"}], "/", "2"}], ",", 
       "\"\<Cos[\[Alpha]]\>\""}], "}"}], ",", 
     RowBox[{"1", "/", "10000"}], ",", 
     RowBox[{"1", "-", 
      RowBox[{"1", "/", "10000"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{"-", "Pi"}], "/", "2"}], ",", 
     RowBox[{"Pi", "/", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "0"}], "}"}], ",", " ", "0", ",", " ", "1"}], "}"}], 
   ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", " ", "Locator"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cos\[Alpha]$$ = 2^
    Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
    1, $CellContext`t$$ = 0, $CellContext`z$$ = {0, 
    0}, $CellContext`\[Beta]$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`sx$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`sy$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`cos\[Alpha]$$], 2^Rational[-1, 2], "Cos[\[Alpha]]"}, 
      
      Rational[1, 10000], 
      Rational[9999, 10000]}, {{
       Hold[$CellContext`\[Beta]$$], 0}, Rational[-1, 2] Pi, Rational[1, 2] 
      Pi}, {{
       Hold[$CellContext`t$$], 0}, 0, 1}, {{
       Hold[$CellContext`z$$], {0, 0}}, Automatic}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`sx$3237$$ = 
    0, $CellContext`sy$3238$$ = 0, $CellContext`cos\[Alpha]$3239$$ = 
    0, $CellContext`\[Beta]$3240$$ = 0, $CellContext`t$3241$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cos\[Alpha]$$ = 
        2^Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
        1, $CellContext`t$$ = 
        0, $CellContext`z$$ = {0, 0}, $CellContext`\[Beta]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`sx$$, $CellContext`sx$3237$$, 0], 
        Hold[$CellContext`sy$$, $CellContext`sy$3238$$, 0], 
        Hold[$CellContext`cos\[Alpha]$$, $CellContext`cos\[Alpha]$3239$$, 0], 
        
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$3240$$, 0], 
        Hold[$CellContext`t$$, $CellContext`t$3241$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`c1$ = Dot[
           $CellContext`canonicalarc[$CellContext`cos\[Alpha]$$], 
           $CellContext`scale[{$CellContext`sx$$, $CellContext`sy$$}], 
           $CellContext`rotation[$CellContext`\[Beta]$$], 
           $CellContext`translation[$CellContext`z$$]]}, 
        Module[{$CellContext`c2$ = $CellContext`complement[$CellContext`c1$]}, 
         Module[{$CellContext`p1$ = $CellContext`p2e[
             Part[$CellContext`c1$, 1]], $CellContext`p2$ = $CellContext`p2e[
             Part[$CellContext`c1$, 2]], $CellContext`p3$ = $CellContext`p2e[
             Part[$CellContext`c1$, 3]]}, 
          Show[
           ParametricPlot[{
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`v], $CellContext`c1$]], 
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`v], $CellContext`c2$]]}, \
{$CellContext`v, 0, 1}, ImageSize -> Large, PlotRange -> 4, PlotStyle -> {
              Directive[Thick, Red], 
              Directive[Thick, Blue]}], 
           Graphics[{
             PointSize[Large], Thick, Black, 
             Point[{$CellContext`p1$, $CellContext`p2$, $CellContext`p3$}], 
             Line[{$CellContext`p1$, $CellContext`p2$, $CellContext`p3$}], 
             Line[{
               $CellContext`p2e[
                Dot[
                 $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]], \
$CellContext`p2$, 
               $CellContext`p2e[
                Dot[
                 $CellContext`bb2[$CellContext`t$$], $CellContext`c2$]]}], 
             Red, 
             Point[
              $CellContext`p2e[
               Dot[
                $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]]], Blue, 
             Point[
              $CellContext`p2e[
               Dot[
                $CellContext`bb2[$CellContext`t$$], $CellContext`c2$]]]}]]]]],
       "Specifications" :> {{{$CellContext`sx$$, 1}, 
         Rational[1, 10], 5}, {{$CellContext`sy$$, 1}, 
         Rational[1, 10], 
         5}, {{$CellContext`cos\[Alpha]$$, 2^Rational[-1, 2], 
          "Cos[\[Alpha]]"}, 
         Rational[1, 10000], 
         Rational[9999, 10000]}, {{$CellContext`\[Beta]$$, 0}, 
         Rational[-1, 2] Pi, Rational[1, 2] Pi}, {{$CellContext`t$$, 0}, 0, 
         1}, {{$CellContext`z$$, {0, 0}}, Automatic, ControlType -> Locator}},
       "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {381., 388.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalarc[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[1 - $CellContext`c^2]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`scale[{
          Pattern[$CellContext`sx, 
           Blank[]], 
          Pattern[$CellContext`sy, 
           Blank[]]}] := {{$CellContext`sx, 0, 0}, {0, $CellContext`sy, 0}, {
         0, 0, 1}}, $CellContext`rotation[
         Pattern[$CellContext`\[Beta], 
          Blank[]]] := {{
          Cos[$CellContext`\[Beta]], 
          Sin[$CellContext`\[Beta]], 0}, {-Sin[$CellContext`\[Beta]], 
          Cos[$CellContext`\[Beta]], 0}, {0, 0, 1}}, $CellContext`translation[{
          Pattern[$CellContext`tx, 
           Blank[]], 
          Pattern[$CellContext`ty, 
           Blank[]]}] := {{1, 0, 0}, {0, 1, 
         0}, {$CellContext`tx, $CellContext`ty, 1}}, $CellContext`complement[{
         
          Pattern[$CellContext`p0, {
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 
            Pattern[$CellContext`w0, 
             Blank[]]}], 
          Pattern[$CellContext`p1, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}], 
          Pattern[$CellContext`p2, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 
            Pattern[$CellContext`w2, 
             
             Blank[]]}]}] := {$CellContext`p0, -$CellContext`p1, \
$CellContext`p2}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", " ", "=", " ", 
       RowBox[{
        RowBox[{"canonicalhyperbola", "[", "cosh\[Alpha]", "]"}], ".", 
        RowBox[{"scale", "[", 
         RowBox[{"{", 
          RowBox[{"sx", ",", " ", "sy"}], "}"}], "]"}], ".", 
        RowBox[{"rotation", "[", "\[Beta]", "]"}], ".", 
        RowBox[{"translation", "[", "z", "]"}]}]}], "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c2", " ", "=", " ", 
         RowBox[{"complement", "[", "c1", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"p1", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
           RowBox[{"p2", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", " ", 
           RowBox[{"p3", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{"c1", "[", 
              RowBox[{"[", "3", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ParametricPlot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "v", "]"}], ".", "c1"}], "]"}], ",", " ", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "v", "]"}], ".", "c2"}], "]"}]}], "}"}], 
             ",", " ", 
             RowBox[{"{", 
              RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
             RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
             RowBox[{"RegionFunction", "\[Rule]", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", "y", ",", "u"}], "}"}], ",", 
                RowBox[{
                 RowBox[{"x", " ", "<", " ", "6"}], " ", "&&", " ", 
                 RowBox[{"x", " ", ">", " ", 
                  RowBox[{"-", "6"}]}], " ", "&&", " ", 
                 RowBox[{"y", " ", "<", " ", "6"}], " ", "&&", " ", 
                 RowBox[{"y", " ", ">", " ", 
                  RowBox[{"-", "6"}]}]}]}], "]"}]}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "4"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Directive", "[", 
                 RowBox[{"Thick", ",", " ", "Red"}], "]"}], ",", " ", 
                RowBox[{"Directive", "[", 
                 RowBox[{"Thick", ",", "Blue"}], "]"}]}], "}"}]}]}], "]"}], 
           ",", " ", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"PointSize", "[", "Large", "]"}], ",", " ", "Black", 
              ",", 
              RowBox[{"Point", "[", 
               RowBox[{"{", 
                RowBox[{"p1", ",", " ", "p2", ",", " ", "p3"}], "}"}], "]"}], 
              ",", "\[IndentingNewLine]", "Thick", ",", " ", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{"p1", ",", " ", "p2", ",", " ", "p3"}], "}"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"p2e", "[", 
                  RowBox[{
                   RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], ",", 
                 "p2", ",", 
                 RowBox[{"p2e", "[", 
                  RowBox[{
                   RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", "Red", ",", 
              RowBox[{"Point", "[", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], "]"}], "]"}], 
              ",", " ", "\[IndentingNewLine]", "Blue", ",", " ", 
              RowBox[{"Point", "[", 
               RowBox[{"p2e", "[", 
                RowBox[{
                 RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}], "]"}], "]"}]}], 
             "}"}], "]"}]}], " ", "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sx", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sy", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cosh\[Alpha]", ",", "1.5", ",", "\"\<Cosh[\[Alpha]]\>\""}], 
      "}"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"1", "/", "10000"}]}], ",", "3"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{"-", "Pi"}], "/", "2"}], ",", 
     RowBox[{"Pi", "/", "2"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "0"}], "}"}], ",", " ", "0", ",", " ", "1"}], "}"}], 
   ",", " ", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", " ", "Locator"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cosh\[Alpha]$$ = 1.5, $CellContext`sx$$ = 
    1, $CellContext`sy$$ = 1, $CellContext`t$$ = 0, $CellContext`z$$ = {0, 
    0}, $CellContext`\[Beta]$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`sx$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`sy$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`cosh\[Alpha]$$], 1.5, "Cosh[\[Alpha]]"}, 
      Rational[10001, 10000], 3}, {{
       Hold[$CellContext`\[Beta]$$], 0}, Rational[-1, 2] Pi, Rational[1, 2] 
      Pi}, {{
       Hold[$CellContext`t$$], 0}, 0, 1}, {{
       Hold[$CellContext`z$$], {0, 0}}, Automatic}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`sx$3314$$ = 
    0, $CellContext`sy$3315$$ = 0, $CellContext`cosh\[Alpha]$3316$$ = 
    0, $CellContext`\[Beta]$3317$$ = 0, $CellContext`t$3318$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cosh\[Alpha]$$ = 1.5, $CellContext`sx$$ = 
        1, $CellContext`sy$$ = 1, $CellContext`t$$ = 
        0, $CellContext`z$$ = {0, 0}, $CellContext`\[Beta]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`sx$$, $CellContext`sx$3314$$, 0], 
        Hold[$CellContext`sy$$, $CellContext`sy$3315$$, 0], 
        Hold[$CellContext`cosh\[Alpha]$$, $CellContext`cosh\[Alpha]$3316$$, 
         0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$3317$$, 0], 
        Hold[$CellContext`t$$, $CellContext`t$3318$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`c1$ = Dot[
           $CellContext`canonicalhyperbola[$CellContext`cosh\[Alpha]$$], 
           $CellContext`scale[{$CellContext`sx$$, $CellContext`sy$$}], 
           $CellContext`rotation[$CellContext`\[Beta]$$], 
           $CellContext`translation[$CellContext`z$$]]}, 
        Module[{$CellContext`c2$ = $CellContext`complement[$CellContext`c1$]}, 
         Module[{$CellContext`p1$ = $CellContext`p2e[
             Part[$CellContext`c1$, 1]], $CellContext`p2$ = $CellContext`p2e[
             Part[$CellContext`c1$, 2]], $CellContext`p3$ = $CellContext`p2e[
             Part[$CellContext`c1$, 3]]}, 
          Show[
           ParametricPlot[{
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`v], $CellContext`c1$]], 
             $CellContext`p2e[
              Dot[
               $CellContext`bb2[$CellContext`v], $CellContext`c2$]]}, \
{$CellContext`v, 0, 1}, ImageSize -> Large, RegionFunction -> 
            Function[{$CellContext`x, $CellContext`y, $CellContext`u}, 
              
              And[$CellContext`x < 6, $CellContext`x > -6, $CellContext`y < 
               6, $CellContext`y > -6]], PlotRange -> 4, PlotStyle -> {
              Directive[Thick, Red], 
              Directive[Thick, Blue]}], 
           Graphics[{
             PointSize[Large], Black, 
             Point[{$CellContext`p1$, $CellContext`p2$, $CellContext`p3$}], 
             Thick, 
             Line[{$CellContext`p1$, $CellContext`p2$, $CellContext`p3$}], 
             Line[{
               $CellContext`p2e[
                Dot[
                 $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]], \
$CellContext`p2$, 
               $CellContext`p2e[
                Dot[
                 $CellContext`bb2[$CellContext`t$$], $CellContext`c2$]]}], 
             Red, 
             Point[
              $CellContext`p2e[
               Dot[
                $CellContext`bb2[$CellContext`t$$], $CellContext`c1$]]], Blue, 
             Point[
              $CellContext`p2e[
               Dot[
                $CellContext`bb2[$CellContext`t$$], $CellContext`c2$]]]}]]]]],
       "Specifications" :> {{{$CellContext`sx$$, 1}, 
         Rational[1, 10], 5}, {{$CellContext`sy$$, 1}, 
         Rational[1, 10], 
         5}, {{$CellContext`cosh\[Alpha]$$, 1.5, "Cosh[\[Alpha]]"}, 
         Rational[10001, 10000], 3}, {{$CellContext`\[Beta]$$, 0}, 
         Rational[-1, 2] Pi, Rational[1, 2] Pi}, {{$CellContext`t$$, 0}, 0, 
         1}, {{$CellContext`z$$, {0, 0}}, Automatic, ControlType -> Locator}},
       "Options" :> {}, "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {381., 388.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalhyperbola[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[$CellContext`c^2 - 1]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`scale[{
          Pattern[$CellContext`sx, 
           Blank[]], 
          Pattern[$CellContext`sy, 
           Blank[]]}] := {{$CellContext`sx, 0, 0}, {0, $CellContext`sy, 0}, {
         0, 0, 1}}, $CellContext`rotation[
         Pattern[$CellContext`\[Beta], 
          Blank[]]] := {{
          Cos[$CellContext`\[Beta]], 
          Sin[$CellContext`\[Beta]], 0}, {-Sin[$CellContext`\[Beta]], 
          Cos[$CellContext`\[Beta]], 0}, {0, 0, 1}}, $CellContext`translation[{
          Pattern[$CellContext`tx, 
           Blank[]], 
          Pattern[$CellContext`ty, 
           Blank[]]}] := {{1, 0, 0}, {0, 1, 
         0}, {$CellContext`tx, $CellContext`ty, 1}}, $CellContext`complement[{
         
          Pattern[$CellContext`p0, {
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 
            Pattern[$CellContext`w0, 
             Blank[]]}], 
          Pattern[$CellContext`p1, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}], 
          Pattern[$CellContext`p2, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 
            Pattern[$CellContext`w2, 
             
             Blank[]]}]}] := {$CellContext`p0, -$CellContext`p1, \
$CellContext`p2}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
It seems that the intersection of the endpoint tangents (the normalized \
central control point), and the points of the curve and its complement at a \
given parameter are colinear. Let' s prove this.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"c1", " ", "=", " ", 
       RowBox[{"canonicalarc", "[", "c", "]"}]}], ",", " ", 
      RowBox[{"c2", " ", "=", " ", 
       RowBox[{"complement", "[", 
        RowBox[{"canonicalarc", "[", "c", "]"}], "]"}]}]}], "}"}], ",", " ", 
    RowBox[{"Det", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
       RowBox[{
        RowBox[{"bb2", "[", "t", "]"}], ".", "c1"}], ",", " ", 
       RowBox[{
        RowBox[{"bb2", "[", "t", "]"}], ".", "c2"}]}], "}"}], "]"}]}], "]"}], 
  " ", "//", " ", "Simplify"}]], "Input"],

Cell[BoxData["0"], "Output"]
}, Open  ]],

Cell["\<\
All conic sections are related by projective transformations. We will find \
the transformation that maps our canonical circle to a given rational \
quadratic Bezier. Let T be the matrix that represents this transformation, R \
the matrix with control points for the rational quadratic Bezier, and C the \
canonical circle. We have that  R = C.T. So, T = Inverse[C].R.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"canonicalarc", "[", "w1", "]"}], "]"}], ".", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], " ", "x1"}], "+", 
       RowBox[{"w1", " ", 
        RowBox[{"(", 
         RowBox[{"x0", "+", "x2"}], ")"}]}]}], 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}], ")"}]}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], " ", "y1"}], "+", 
       RowBox[{"w1", " ", 
        RowBox[{"(", 
         RowBox[{"y0", "+", "y2"}], ")"}]}]}], 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}], ")"}]}]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "x0"}], "+", "x2"}], 
      RowBox[{"2", " ", 
       SqrtBox[
        RowBox[{"1", "-", 
         SuperscriptBox["w1", "2"]}]]}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "y0"}], "+", "y2"}], 
      RowBox[{"2", " ", 
       SqrtBox[
        RowBox[{"1", "-", 
         SuperscriptBox["w1", "2"]}]]}]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"x0", "-", 
       RowBox[{"2", " ", "w1", " ", "x1"}], "+", "x2"}], 
      RowBox[{"2", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["w1", "2"]}]}]], ",", 
     FractionBox[
      RowBox[{"y0", "-", 
       RowBox[{"2", " ", "w1", " ", "y1"}], "+", "y2"}], 
      RowBox[{"2", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["w1", "2"]}]}]], ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"%", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["w1", "2"]}], ")"}]}], ")"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "x1"}], "+", 
      RowBox[{"w1", " ", 
       RowBox[{"(", 
        RowBox[{"x0", "+", "x2"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "y1"}], "+", 
      RowBox[{"w1", " ", 
       RowBox[{"(", 
        RowBox[{"y0", "+", "y2"}], ")"}]}]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SqrtBox[
       RowBox[{"1", "-", 
        SuperscriptBox["w1", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"x0", "-", "x2"}], ")"}]}], ",", 
     RowBox[{
      SqrtBox[
       RowBox[{"1", "-", 
        SuperscriptBox["w1", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"y0", "-", "y2"}], ")"}]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x0"}], "+", 
      RowBox[{"2", " ", "w1", " ", "x1"}], "-", "x2"}], ",", 
     RowBox[{
      RowBox[{"-", "y0"}], "+", 
      RowBox[{"2", " ", "w1", " ", "y1"}], "-", "y2"}], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["w1", "2"]}], ")"}]}]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"canonicalhyperbola", "[", "w1", "]"}], "]"}], ".", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}], " ", "//", " ", 
  "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], " ", "x1"}], "+", 
       RowBox[{"w1", " ", 
        RowBox[{"(", 
         RowBox[{"x0", "+", "x2"}], ")"}]}]}], 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}], ")"}]}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], " ", "y1"}], "+", 
       RowBox[{"w1", " ", 
        RowBox[{"(", 
         RowBox[{"y0", "+", "y2"}], ")"}]}]}], 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}], ")"}]}]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "x0"}], "+", "x2"}], 
      RowBox[{"2", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}]]}]], ",", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "y0"}], "+", "y2"}], 
      RowBox[{"2", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["w1", "2"]}]]}]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"x0", "-", 
       RowBox[{"2", " ", "w1", " ", "x1"}], "+", "x2"}], 
      RowBox[{"2", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["w1", "2"]}]}]], ",", 
     FractionBox[
      RowBox[{"y0", "-", 
       RowBox[{"2", " ", "w1", " ", "y1"}], "+", "y2"}], 
      RowBox[{"2", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["w1", "2"]}]}]], ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"%", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["w1", "2"]}], ")"}]}], ")"}]}], " ", "//", " ", 
  "Simplify", " "}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "x1"}], "+", 
      RowBox[{"w1", " ", 
       RowBox[{"(", 
        RowBox[{"x0", "+", "x2"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "y1"}], "+", 
      RowBox[{"w1", " ", 
       RowBox[{"(", 
        RowBox[{"y0", "+", "y2"}], ")"}]}]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SqrtBox[
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["w1", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x0"}], "+", "x2"}], ")"}]}], ",", 
     RowBox[{
      SqrtBox[
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["w1", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "y0"}], "+", "y2"}], ")"}]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x0"}], "+", 
      RowBox[{"2", " ", "w1", " ", "x1"}], "-", "x2"}], ",", 
     RowBox[{
      RowBox[{"-", "y0"}], "+", 
      RowBox[{"2", " ", "w1", " ", "y1"}], "-", "y2"}], ",", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["w1", "2"]}], ")"}]}]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The only difference between the two is that the sign inside the square root \
is flipped (so that the result is positive). We can write a single function \
that works for both arcs and hyperbolas like this:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x0_", ",", "x1_", ",", "x2_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y0_", ",", "y1_", ",", "y2_"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "w1_", ",", "1"}], "}"}]}], "}"}], "//", 
  "Transpose"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x0_", ",", "y0_", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x2_", ",", "y2_", ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"unitcircleto", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0_", ",", "y0_", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2_", ",", "y2_", ",", "1"}], "}"}]}], "}"}], "]"}], " ", ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", " ", "=", " ", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"Abs", "[", 
        RowBox[{"1", "-", 
         RowBox[{"w1", "^", "2"}]}], "]"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", "x1"}], "+", 
         RowBox[{"w1", " ", 
          RowBox[{"(", 
           RowBox[{"x0", "+", "x2"}], ")"}]}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", "y1"}], "+", 
         RowBox[{"w1", " ", 
          RowBox[{"(", 
           RowBox[{"y0", "+", "y2"}], ")"}]}]}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"s", " ", 
         RowBox[{"(", 
          RowBox[{"x0", "-", "x2"}], ")"}]}], ",", 
        RowBox[{"s", " ", 
         RowBox[{"(", 
          RowBox[{"y0", "-", "y2"}], ")"}]}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "x0"}], "+", 
         RowBox[{"2", " ", "w1", " ", "x1"}], "-", "x2"}], ",", 
        RowBox[{
         RowBox[{"-", "y0"}], "+", 
         RowBox[{"2", " ", "w1", " ", "y1"}], "-", "y2"}], ",", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["w1", "2"]}], ")"}]}]}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Can we find the center of the ellipse or hyperbola from the control points? \
Yes, of course. Our canonical arcs and hyperbolas are centered at zero. So \
the center is where the zero vector {0,0,1} is mapped by the transformation. \
I.e., the last row. \
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"center", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0_", ",", "x1_", ",", "x2_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0_", ",", "y1_", ",", "y2_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "w1_", ",", "1"}], "}"}]}], "}"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "x0"}], "+", 
     RowBox[{"2", " ", "w1", " ", "x1"}], "-", "x2"}], ",", 
    RowBox[{
     RowBox[{"-", "y0"}], "+", 
     RowBox[{"2", " ", "w1", " ", "y1"}], "-", "y2"}], ",", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["w1", "2"]}], ")"}]}]}], "}"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
What happens when w1 == 1? This is the case of the parabola. It has no center \
in the affine plane. So the formula gives an ideal point. (What does the \
corresponding direction in the affine plane points to?)\
\>", "Text"],

Cell["\<\
Monotonization is also simple. We find the parameters t that are zeros of the \
derivatives of x(t)/w(t) and y(t)/w(t)\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"m", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x0", ",", "y0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x1", ",", "y1", ",", "w1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x2", ",", "y2", ",", "1"}], "}"}]}], "}"}]}], ",", " ", 
      "t"}], "}"}], ",", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"p2e", "[", 
       RowBox[{
        RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], ",", "t"}], 
     "]"}]}], "]"}], " ", "//", " ", "Simplify"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"w1", " ", "x0"}], "-", "x1", "+", 
        RowBox[{
         SuperscriptBox["t", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"x0", "-", "x2"}], ")"}]}], "+", 
        RowBox[{"t", " ", 
         RowBox[{"(", 
          RowBox[{"x0", "-", 
           RowBox[{"2", " ", "w1", " ", "x0"}], "+", 
           RowBox[{"2", " ", "x1"}], "-", "x2"}], ")"}]}]}], ")"}]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "t", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["t", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}]}]}], ")"}], "2"]]}], ",", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"w1", " ", "y0"}], "-", "y1", "+", 
        RowBox[{
         SuperscriptBox["t", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"y0", "-", "y2"}], ")"}]}], "+", 
        RowBox[{"t", " ", 
         RowBox[{"(", 
          RowBox[{"y0", "-", 
           RowBox[{"2", " ", "w1", " ", "y0"}], "+", 
           RowBox[{"2", " ", "y1"}], "-", "y2"}], ")"}]}]}], ")"}]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "t", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}]}], "-", 
        RowBox[{"2", " ", 
         SuperscriptBox["t", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "w1"}], ")"}]}]}], ")"}], "2"]]}]}], 
  "}"}]], "Output"]
}, Open  ]],

Cell["\<\
The roots of these polynomials give the parameter values corresponding to the \
extremes in each axis. These are quadratic equations in one variable: easy to \
solve.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extremexpoly", "[", 
   RowBox[{
    RowBox[{"m", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x0_", ",", "y0_", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x2_", ",", "y2_", ",", "1"}], "}"}]}], "}"}]}], ",", " ", 
    "t_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"w1", " ", "x0"}], "-", "x1", "+", 
   RowBox[{
    SuperscriptBox["t", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "w1"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"x0", "-", "x2"}], ")"}]}], "+", 
   RowBox[{"t", " ", 
    RowBox[{"(", 
     RowBox[{"x0", "-", 
      RowBox[{"2", " ", "w1", " ", "x0"}], "+", 
      RowBox[{"2", " ", "x1"}], "-", "x2"}], ")"}]}]}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"extremeypoly", "[", 
   RowBox[{
    RowBox[{"m", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x0_", ",", "y0_", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x2_", ",", "y2_", ",", "1"}], "}"}]}], "}"}]}], ",", " ", 
    "t_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"w1", " ", "y0"}], "-", "y1", "+", 
   RowBox[{
    SuperscriptBox["t", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "w1"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"y0", "-", "y2"}], ")"}]}], "+", 
   RowBox[{"t", " ", 
    RowBox[{"(", 
     RowBox[{"y0", "-", 
      RowBox[{"2", " ", "w1", " ", "y0"}], "+", 
      RowBox[{"2", " ", "y1"}], "-", "y2"}], ")"}]}]}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Here we group the parameter values for all extremes within [0, 1] and sort \
them (including the endpoints themselves)\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extremes", "[", 
   RowBox[{"m", ":", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x0_", ",", "y0_", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2_", ",", "y2_", ",", "1"}], "}"}]}], "}"}]}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "t", "}"}], ",", 
    RowBox[{"Prepend", "[", 
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Select", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"t", " ", "/.", " ", "#"}], "&"}], ",", 
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"extremexpoly", "[", 
                    RowBox[{"m", ",", "t"}], "]"}], " ", "\[Equal]", " ", 
                    "0"}], ",", " ", "t", ",", " ", "Reals"}], "]"}]}], "]"}],
                ",", " ", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"t", " ", "/.", " ", "#"}], "&"}], ",", 
                 RowBox[{"Solve", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"extremeypoly", "[", 
                    RowBox[{"m", ",", "t"}], "]"}], " ", "\[Equal]", " ", 
                    "0"}], ",", " ", "t", ",", " ", "Reals"}], "]"}]}], 
                "]"}]}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#", " ", ">", " ", "0"}], " ", "&&", " ", 
               RowBox[{"#", " ", "<", " ", "1"}]}], "&"}]}], "]"}], "]"}], 
          ",", 
          RowBox[{
           RowBox[{"#1", " ", "<", " ", "#2"}], "&"}]}], "]"}], ",", "1"}], 
       "]"}], ",", "0"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"extremes", "[", 
   RowBox[{"m", ":", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x0_", ",", "y0_", ",", "w0_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2_", ",", "y2_", ",", "w2_"}], "}"}]}], "}"}]}], "]"}], " ", 
  ":=", " ", 
  RowBox[{"extremes", "[", 
   RowBox[{"canonize", "[", "m", "]"}], "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Here we plot the extreme points along with the curve. Notice there can be up \
to 4 of them.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c1", " ", "=", " ", 
       RowBox[{
        RowBox[{"canonicalarc", "[", "cos\[Alpha]", "]"}], ".", 
        RowBox[{"scale", "[", 
         RowBox[{"{", 
          RowBox[{"sx", ",", " ", "sy"}], "}"}], "]"}], ".", 
        RowBox[{"rotation", "[", "\[Beta]", "]"}], ".", 
        RowBox[{"translation", "[", "z", "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s", " ", "=", " ", 
         RowBox[{"extremes", "[", "c1", "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ParametricPlot", "[", 
          RowBox[{
           RowBox[{"p2e", "[", 
            RowBox[{
             RowBox[{"bb2", "[", "v", "]"}], ".", "c1"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"v", ",", " ", "0", ",", " ", "1"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
           RowBox[{"PlotRange", "\[Rule]", "4"}], ",", " ", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Thick", ",", " ", "Red"}], "]"}]}]}], "]"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"p2e", "[", 
                 RowBox[{
                  RowBox[{"bb2", "[", "#", "]"}], ".", "c1"}], "]"}], "&"}], 
               ",", "s"}], "]"}], "]"}]}], "}"}], "]"}]}], "]"}]}], "]"}]}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sx", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sy", ",", "1"}], "}"}], ",", 
     RowBox[{"1", "/", "10"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cos\[Alpha]", ",", " ", 
       RowBox[{
        RowBox[{"Sqrt", "[", "2", "]"}], "/", "2"}], ",", 
       "\"\<Cos[\[Alpha]]\>\""}], "}"}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"1", "/", "10000"}]}], ",", 
     RowBox[{"1", "-", 
      RowBox[{"1", "/", "10000"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", " ", "Locator"}], 
    "}"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`cos\[Alpha]$$ = 2^
    Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
    1, $CellContext`z$$ = {0, 0}, $CellContext`\[Beta]$$ = 0, Typeset`show$$ =
     True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`sx$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`sy$$], 1}, 
      Rational[1, 10], 5}, {{
       Hold[$CellContext`cos\[Alpha]$$], 2^Rational[-1, 2], "Cos[\[Alpha]]"}, 
      
      Rational[-9999, 10000], 
      Rational[9999, 10000]}, {{
       Hold[$CellContext`\[Beta]$$], 0}, -Pi, Pi}, {{
       Hold[$CellContext`z$$], {0, 0}}, Automatic}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`sx$3392$$ = 
    0, $CellContext`sy$3393$$ = 0, $CellContext`cos\[Alpha]$3394$$ = 
    0, $CellContext`\[Beta]$3395$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`cos\[Alpha]$$ = 
        2^Rational[-1, 2], $CellContext`sx$$ = 1, $CellContext`sy$$ = 
        1, $CellContext`z$$ = {0, 0}, $CellContext`\[Beta]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`sx$$, $CellContext`sx$3392$$, 0], 
        Hold[$CellContext`sy$$, $CellContext`sy$3393$$, 0], 
        Hold[$CellContext`cos\[Alpha]$$, $CellContext`cos\[Alpha]$3394$$, 0], 
        
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$3395$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`c1 = Dot[
           $CellContext`canonicalarc[$CellContext`cos\[Alpha]$$], 
           $CellContext`scale[{$CellContext`sx$$, $CellContext`sy$$}], 
           $CellContext`rotation[$CellContext`\[Beta]$$], 
           $CellContext`translation[$CellContext`z$$]]}, 
        Module[{$CellContext`s = $CellContext`extremes[$CellContext`c1]}, 
         Show[
          ParametricPlot[
           $CellContext`p2e[
            Dot[
             $CellContext`bb2[$CellContext`v], $CellContext`c1]], \
{$CellContext`v, 0, 1}, ImageSize -> Large, PlotRange -> 4, PlotStyle -> 
           Directive[Thick, Red]], 
          Graphics[{
            PointSize[Large], Blue, 
            Point[
             Map[$CellContext`p2e[
               Dot[
                $CellContext`bb2[#], $CellContext`c1]]& , \
$CellContext`s]]}]]]], "Specifications" :> {{{$CellContext`sx$$, 1}, 
         Rational[1, 10], 5}, {{$CellContext`sy$$, 1}, 
         Rational[1, 10], 
         5}, {{$CellContext`cos\[Alpha]$$, 2^Rational[-1, 2], 
          "Cos[\[Alpha]]"}, 
         Rational[-9999, 10000], 
         Rational[9999, 10000]}, {{$CellContext`\[Beta]$$, 0}, -Pi, 
         Pi}, {{$CellContext`z$$, {0, 0}}, Automatic, ControlType -> 
         Locator}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {369., 376.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`canonicalarc[
         Pattern[$CellContext`c, 
          Blank[]]] := 
       Module[{$CellContext`s = 
          Sqrt[1 - $CellContext`c^2]}, {{$CellContext`c, -$CellContext`s, 
           1}, {1, 0, $CellContext`c}, {$CellContext`c, $CellContext`s, 
           1}}], $CellContext`scale[{
          Pattern[$CellContext`sx, 
           Blank[]], 
          Pattern[$CellContext`sy, 
           Blank[]]}] := {{$CellContext`sx, 0, 0}, {0, $CellContext`sy, 0}, {
         0, 0, 1}}, $CellContext`rotation[
         Pattern[$CellContext`\[Beta], 
          Blank[]]] := {{
          Cos[$CellContext`\[Beta]], 
          Sin[$CellContext`\[Beta]], 0}, {-Sin[$CellContext`\[Beta]], 
          Cos[$CellContext`\[Beta]], 0}, {0, 0, 1}}, $CellContext`translation[{
          Pattern[$CellContext`tx, 
           Blank[]], 
          Pattern[$CellContext`ty, 
           Blank[]]}] := {{1, 0, 0}, {0, 1, 
         0}, {$CellContext`tx, $CellContext`ty, 1}}, $CellContext`extremes[
         Pattern[$CellContext`m, {{
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 1}, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 1}}]] := Module[{$CellContext`t}, 
         Prepend[
          Append[
           Sort[
            DeleteDuplicates[
             Select[
              Join[
               Map[ReplaceAll[$CellContext`t, #]& , 
                
                Solve[$CellContext`extremexpoly[$CellContext`m, \
$CellContext`t] == 0, $CellContext`t, Reals]], 
               Map[ReplaceAll[$CellContext`t, #]& , 
                
                Solve[$CellContext`extremeypoly[$CellContext`m, \
$CellContext`t] == 0, $CellContext`t, Reals]]], 
              And[# > 0, # < 1]& ]], # < #2& ], 1], 0]], $CellContext`extremes[
         Pattern[$CellContext`m, {{
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 
            Pattern[$CellContext`w0, 
             Blank[]]}, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 
            Pattern[$CellContext`w2, 
             Blank[]]}}]] := $CellContext`extremes[
         $CellContext`canonize[$CellContext`m]], $CellContext`extremexpoly[
         Pattern[$CellContext`m, {{
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 1}, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 1}}], 
         Pattern[$CellContext`t, 
          
          Blank[]]] := $CellContext`w1 $CellContext`x0 - $CellContext`x1 + \
$CellContext`t^2 (-1 + $CellContext`w1) ($CellContext`x0 - $CellContext`x2) + \
$CellContext`t ($CellContext`x0 - 2 $CellContext`w1 $CellContext`x0 + 
          2 $CellContext`x1 - $CellContext`x2), $CellContext`extremeypoly[
         Pattern[$CellContext`m, {{
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]], 1}, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]], 
            Pattern[$CellContext`w1, 
             Blank[]]}, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]], 1}}], 
         Pattern[$CellContext`t, 
          
          Blank[]]] := $CellContext`w1 $CellContext`y0 - $CellContext`y1 + \
$CellContext`t^2 (-1 + $CellContext`w1) ($CellContext`y0 - $CellContext`y2) + \
$CellContext`t ($CellContext`y0 - 2 $CellContext`w1 $CellContext`y0 + 
          2 $CellContext`y1 - $CellContext`y2), $CellContext`canonize[{{
           Pattern[$CellContext`x0, 
            Blank[]], 
           Pattern[$CellContext`y0, 
            Blank[]], 
           Pattern[$CellContext`w0, 
            Blank[]]}, {
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`y1, 
            Blank[]], 
           Pattern[$CellContext`w1, 
            Blank[]]}, {
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`y2, 
            Blank[]], 
           Pattern[$CellContext`w2, 
            Blank[]]}}] := 
       Module[{$CellContext`s = 
          1/Sqrt[$CellContext`w0 $CellContext`w2]}, \
{{$CellContext`x0/$CellContext`w0, $CellContext`y0/$CellContext`w0, 
           1}, {$CellContext`s $CellContext`x1, $CellContext`s \
$CellContext`y1, $CellContext`s $CellContext`w1}, \
{$CellContext`x2/$CellContext`w2, $CellContext`y2/$CellContext`w2, 
           1}}], $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s now turn to flattening, so we can work on strokes \
later on. Ideally, we would start from monotonic pieces with no inflections \
or double-points. Later during the course we will teach you how to do this \
(we will need for other purposes). We might as well assume it\
\[CloseCurlyQuote]s done within flattening because it allows us to use a much \
simpler heuristic. We will test distance from control polygon \
central-vertices to the baseline, and the angles of the first and last \
control polygon segments with the baseline.\
\>", "Text"],

Cell["\<\
Here are the control points that result from cutting a piece of a \
B\[EAcute]zier curve.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"brutecut", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "6"}], ",", 
       RowBox[{"-", "3"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["21", "4"]}], ",", 
       RowBox[{"-", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["9", "2"]}], ",", 
       RowBox[{"-", 
        FractionBox["5", "4"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["1", "2"]}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "6"}], ",", 
     RowBox[{"-", "3"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["45", "8"]}], ",", 
     RowBox[{"-", 
      FractionBox["5", "2"]}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["21", "4"]}], ",", 
     RowBox[{"-", 
      FractionBox["33", "16"]}], ",", "1"}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"affinereparametrization", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", " ", "b_"}], "}"}], ",", " ", "n_"}], "]"}], " ", ":=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", "s"}], "}"}], ",", "  ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Coefficient", "[", " ", 
          RowBox[{"#", ",", " ", 
           RowBox[{"pb", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"t", ",", "s"}], "}"}], ",", "n"}], "]"}]}], "]"}], 
         "&"}], ",", " ", 
        RowBox[{"pb", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"a", " ", "t"}], " ", "+", " ", 
             RowBox[{"b", " ", "s"}]}], ",", "s"}], "}"}], ",", "n"}], 
         "]"}]}], "]"}]}], "]"}], "]"}]}],
  InitializationCell->True]], "Input",
 InitializationCell->True],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{"brutecut", "[", 
    RowBox[{"m_", ",", 
     RowBox[{"{", " ", 
      RowBox[{"p_", ",", " ", "q_"}], "}"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", "=", 
       RowBox[{
        RowBox[{"Length", "[", "m", "]"}], "-", "1"}]}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"b2p", "[", "n", "]"}], ".", 
      RowBox[{"affinereparametrization", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"q", "-", "p"}], ",", "p"}], "}"}], ",", "n"}], "]"}], ".", 
      
      RowBox[{"p2b", "[", "n", "]"}], ".", "m"}]}], "]"}]}],
  InitializationCell->True]], "Input",
 InitializationCell->True],

Cell["\<\
Here is a function that, given the cosine of the largest angle acceptable and \
the largest absolute deviation from the baseline, decides if the segment \
should be subdivided. Note that we avoid divisions, as usual.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subdivQ", "[", 
   RowBox[{
    RowBox[{"m_", "/;", 
     RowBox[{"m", " ", "\[Element]", 
      RowBox[{"Matrices", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}], "]"}]}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"ctol_", ",", "ptol_"}], "}"}]}], "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"p0", " ", "=", " ", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", 
          RowBox[{"1", ";;", "2"}]}], "]"}], "]"}]}], ",", 
      RowBox[{"p1", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", 
          RowBox[{"1", ";;", "2"}]}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"p2", " ", "=", " ", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"3", ",", 
          RowBox[{"1", ";;", "2"}]}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"w0", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "3"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"w1", " ", "=", " ", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "3"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"w2", " ", "=", " ", 
       RowBox[{"m", "[", 
        RowBox[{"[", 
         RowBox[{"3", ",", "3"}], "]"}], "]"}]}]}], "}"}], ",", "  ", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p10", " ", "=", " ", 
         RowBox[{"w2", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"w0", " ", "p1"}], "-", 
            RowBox[{"w1", " ", "p0"}]}], ")"}]}]}], ",", " ", 
        RowBox[{"p21", "=", 
         RowBox[{"w0", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"w1", " ", "p2"}], "-", 
            RowBox[{"w2", " ", "p1"}]}], ")"}]}]}], ",", " ", 
        RowBox[{"p20", " ", "=", " ", 
         RowBox[{"w1", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"w0", " ", "p2"}], "-", 
            RowBox[{"w2", " ", "p0"}]}], ")"}]}]}]}], "}"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Dot", "[", 
          RowBox[{"p10", ",", " ", "p20"}], "]"}], "^", "2"}], " ", "<", " ", 
        
        RowBox[{
         RowBox[{"ctol", "^", "2"}], " ", 
         RowBox[{"Dot", "[", 
          RowBox[{"p10", ",", "p10"}], "]"}], " ", 
         RowBox[{"Dot", "[", 
          RowBox[{"p20", ",", "p20"}], "]"}]}]}], " ", "||", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dot", "[", 
          RowBox[{"p21", ",", " ", "p20"}], "]"}], "^", "2"}], " ", "<", " ", 
        
        RowBox[{
         RowBox[{"ctol", "^", "2"}], " ", 
         RowBox[{"Dot", "[", 
          RowBox[{"p21", ",", "p21"}], "]"}], " ", 
         RowBox[{"Dot", "[", 
          RowBox[{"p20", ",", "p20"}], "]"}]}]}], " ", "||", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Dot", "[", 
          RowBox[{
           RowBox[{"Cross", "[", "p20", "]"}], ",", "p10"}], "]"}], "^", 
         "2"}], " ", "\[GreaterEqual]", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"ptol", " ", "w0", " ", "w1", " ", "w2"}], ")"}], "^", 
          "2"}], " ", 
         RowBox[{"Dot", "[", 
          RowBox[{"p20", ",", "p20"}], "]"}]}]}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Here is the function that recursively subdivides the segment until it passes \
the precision criteria. It returns a list of line segments.\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"subdiv", "[", 
   RowBox[{
    RowBox[{"m_", " ", "/;", " ", 
     RowBox[{"m", " ", "\[Element]", 
      RowBox[{"Matrices", "[", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}], "]"}]}]}], ",", " ", 
    RowBox[{"tol", ":", 
     RowBox[{"{", 
      RowBox[{"ctol_", ",", "ptol_"}], "}"}]}]}], "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"subdivQ", "[", 
     RowBox[{"m", ",", "tol"}], "]"}], ",", " ", 
    RowBox[{
     RowBox[{"subdiv", "[", 
      RowBox[{
       RowBox[{"brutecut", "[", 
        RowBox[{"m", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"1", "/", "2"}]}], "}"}]}], "]"}], " ", ",", "tol"}], 
      "]"}], " ", "~", " ", "Join", " ", "~", " ", 
     RowBox[{"subdiv", "[", 
      RowBox[{
       RowBox[{"brutecut", "[", 
        RowBox[{"m", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "/", "2"}], ",", "1"}], "}"}]}], "]"}], ",", "tol"}], 
      "]"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"p2e", "[", 
        RowBox[{"m", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
       RowBox[{"p2e", "[", 
        RowBox[{"m", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}], "}"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["Now we can show the demo for rational quadratic.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"viewport", " ", "=", " ", "512"}], ",", " ", 
     RowBox[{"window", " ", "=", " ", "20"}], ",", " ", 
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "6"}], ",", " ", 
          RowBox[{"-", "3"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"6", ",", " ", 
          RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws", " ", "=", " ", "1"}]}], "}"}], ",", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"px", "=", 
        RowBox[{"window", " ", "/", " ", "viewport"}]}], ",", " ", 
       RowBox[{"deg", " ", "=", " ", 
        RowBox[{"Pi", "/", "180"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"m", " ", "=", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"e2p", "[", 
               RowBox[{"pt", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
              RowBox[{"e2p", "[", 
               RowBox[{
                RowBox[{"pt", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "w"}], "]"}], ",", " ", 
              
              RowBox[{"e2p", "[", 
               RowBox[{"pt", "[", 
                RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"tol", " ", "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", 
               RowBox[{"atol", " ", "deg"}], "]"}], ",", " ", 
              RowBox[{"ptol", " ", "px"}]}], "}"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"flat", " ", "=", 
             RowBox[{"subdiv", "[", 
              RowBox[{"m", ",", "tol"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Show", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Graphics", "[", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{"v", ",", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{"Line", ",", " ", "flat"}], "]"}], " ", "~", " ", 
                  "Join", " ", "~", 
                  RowBox[{"{", "Red", "}"}], " ", "~", " ", "Join", " ", "~", 
                  " ", 
                  RowBox[{"Map", "[", 
                   RowBox[{"Point", ",", "flat"}], "]"}]}], ",", " ", 
                 RowBox[{"Map", "[", 
                  RowBox[{"Line", ",", " ", "flat"}], "]"}]}], "]"}], ",", 
               RowBox[{"PlotRange", "\[Rule]", 
                RowBox[{"window", "/", "2"}]}], " ", ",", 
               RowBox[{"ImageSize", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"viewport", ",", "viewport"}], "}"}]}]}], "]"}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"Graphics", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"Text", "[", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{
                    RowBox[{"Subscript", "[", 
                    RowBox[{
                    RowBox[{"Symbol", "[", "\"\<p\>\"", "]"}], ",", 
                    RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"pt", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "+", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", 
                  RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}],
              ",", "\[IndentingNewLine]", 
             RowBox[{"Graphics", "[", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", "flat", "]"}], ",", "Large"}], "]"}],
                 ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", 
                  RowBox[{"-", "5"}]}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
          "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"pt", ",", "pts"}], "}"}], ",", " ", "Locator"}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "ptol", ",", " ", "3", ",", " ", "\"\<Pixel tolerance\>\""}], "}"}],
          ",", "0.1", ",", " ", "15"}], "}"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"atol", ",", "10", ",", "  ", "\"\<Angular tolerance\>\""}],
           "}"}], ",", "1", ",", "15"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", ",", " ", "True", ",", " ", "\"\<Show vertices\>\""}], 
          "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"True", ",", " ", "False"}], "}"}]}], "}"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", " ", "ws"}], "}"}], ",", "0", ",", " ", "10"}], 
        "}"}]}], "]"}]}], "]"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`atol$$ = 
    10, $CellContext`pt$$ = {{-6, -3}, {0, 5}, {6, -3}}, $CellContext`ptol$$ =
     3, $CellContext`v$$ = True, $CellContext`w$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-6, -3}, {0, 5}, {6, -3}}}, Automatic}, {{
       Hold[$CellContext`ptol$$], 3, "Pixel tolerance"}, 0.1, 15}, {{
       Hold[$CellContext`atol$$], 10, "Angular tolerance"}, 1, 15}, {{
       Hold[$CellContext`v$$], True, "Show vertices"}, {True, False}}, {{
       Hold[$CellContext`w$$], 1}, 0, 10}}, Typeset`size$$ = {
    512., {253., 259.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ptol$3466$$ = 
    0, $CellContext`atol$3467$$ = 0, $CellContext`v$3468$$ = 
    False, $CellContext`w$3469$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`atol$$ = 
        10, $CellContext`pt$$ = {{-6, -3}, {0, 5}, {
         6, -3}}, $CellContext`ptol$$ = 3, $CellContext`v$$ = 
        True, $CellContext`w$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`ptol$$, $CellContext`ptol$3466$$, 0], 
        Hold[$CellContext`atol$$, $CellContext`atol$3467$$, 0], 
        Hold[$CellContext`v$$, $CellContext`v$3468$$, False], 
        Hold[$CellContext`w$$, $CellContext`w$3469$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3]]}, $CellContext`tol$ = {
           
           Cos[$CellContext`atol$$ (Rational[1, 180] 
             Pi)], $CellContext`ptol$$ Rational[5, 128]}}, 
        Module[{$CellContext`flat$ = $CellContext`subdiv[$CellContext`m$, \
$CellContext`tol$]}, 
         Show[
          Graphics[
           If[$CellContext`v$$, 
            Join[
             Join[
              Map[Line, $CellContext`flat$], {Red}], 
             Map[Point, $CellContext`flat$]], 
            Map[Line, $CellContext`flat$]], PlotRange -> 20/2, 
           ImageSize -> {512, 512}], 
          Graphics[
           Table[
            Text[
             Style[
              Subscript[
               Symbol["p"], $CellContext`i - 1], Large], 
             Part[$CellContext`pt$$, $CellContext`i] + {0, 
              1}], {$CellContext`i, 1, 
             Length[$CellContext`pt$$]}]], 
          Graphics[
           Text[
            Style[
             Length[$CellContext`flat$], Large], {0, -5}]]]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-6, -3}, {0, 5}, {6, -3}}}, 
         Automatic, ControlType -> 
         Locator}, {{$CellContext`ptol$$, 3, "Pixel tolerance"}, 0.1, 
         15}, {{$CellContext`atol$$, 10, "Angular tolerance"}, 1, 
         15}, {{$CellContext`v$$, True, "Show vertices"}, {
         True, False}}, {{$CellContext`w$$, 1}, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{565., {333., 340.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[$CellContext`m$] = {Temporary}, $CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, Attributes[$CellContext`tol$] = {Temporary}, 
       Attributes[$CellContext`flat$] = {Temporary}, $CellContext`subdiv[
         Condition[
          Pattern[$CellContext`m, 
           Blank[]], 
          Element[$CellContext`m, 
           Matrices[{3, 3}]]], 
         Pattern[$CellContext`tol, {
           Pattern[$CellContext`ctol, 
            Blank[]], 
           Pattern[$CellContext`ptol, 
            Blank[]]}]] := If[
         $CellContext`subdivQ[$CellContext`m, $CellContext`tol], 
         Join[
          $CellContext`subdiv[
           $CellContext`brutecut[$CellContext`m, {0, 1/2}], $CellContext`tol], 
          $CellContext`subdiv[
           $CellContext`brutecut[$CellContext`m, {
            1/2, 1}], $CellContext`tol]], {{
           $CellContext`p2e[
            Part[$CellContext`m, 1]], 
           $CellContext`p2e[
            Part[$CellContext`m, -1]]}}], $CellContext`subdivQ[
         Condition[
          Pattern[$CellContext`m, 
           Blank[]], 
          Element[$CellContext`m, 
           Matrices[{3, 3}]]], {
          Pattern[$CellContext`ctol, 
           Blank[]], 
          Pattern[$CellContext`ptol, 
           Blank[]]}] := Module[{$CellContext`p0 = Part[$CellContext`m, 1, 
            Span[1, 2]], $CellContext`p1 = Part[$CellContext`m, 2, 
            Span[1, 2]], $CellContext`p2 = Part[$CellContext`m, 3, 
            Span[1, 2]], $CellContext`w0 = 
          Part[$CellContext`m, 1, 3], $CellContext`w1 = 
          Part[$CellContext`m, 2, 3], $CellContext`w2 = 
          Part[$CellContext`m, 3, 3]}, 
         Module[{$CellContext`p10 = $CellContext`w2 ($CellContext`w0 \
$CellContext`p1 - $CellContext`w1 $CellContext`p0), $CellContext`p21 = \
$CellContext`w0 ($CellContext`w1 $CellContext`p2 - $CellContext`w2 \
$CellContext`p1), $CellContext`p20 = $CellContext`w1 ($CellContext`w0 \
$CellContext`p2 - $CellContext`w2 $CellContext`p0)}, 
          Or[
          Dot[$CellContext`p10, $CellContext`p20]^2 < $CellContext`ctol^2 
            Dot[$CellContext`p10, $CellContext`p10] 
            Dot[$CellContext`p20, $CellContext`p20], 
           Dot[$CellContext`p21, $CellContext`p20]^2 < $CellContext`ctol^2 
            Dot[$CellContext`p21, $CellContext`p21] 
            Dot[$CellContext`p20, $CellContext`p20], Dot[
              
              Cross[$CellContext`p20], $CellContext`p10]^2 >= \
($CellContext`ptol $CellContext`w0 $CellContext`w1 $CellContext`w2)^2 
            Dot[$CellContext`p20, $CellContext`p20]]]], $CellContext`brutecut[
        
         Pattern[$CellContext`m, 
          Blank[]], {
          Pattern[$CellContext`p, 
           Blank[]], 
          Pattern[$CellContext`q, 
           Blank[]]}] := Module[{$CellContext`n = Length[$CellContext`m] - 1}, 
         Dot[
          $CellContext`b2p[$CellContext`n], 
          $CellContext`affinereparametrization[{$CellContext`q - \
$CellContext`p, $CellContext`p}, $CellContext`n], 
          $CellContext`p2b[$CellContext`n], $CellContext`m]], $CellContext`b2p[
         Pattern[$CellContext`n, 
          Blank[]]] := Inverse[
         $CellContext`p2b[$CellContext`n]], $CellContext`p2b[
         Pattern[$CellContext`n, 
          Blank[]]] := Transpose[
         Module[{$CellContext`s, $CellContext`t}, 
          Map[Coefficient[#, 
            $CellContext`pb[{$CellContext`s, $CellContext`t}, \
$CellContext`n]]& , 
           $CellContext`bb[{$CellContext`s, $CellContext`t}, \
$CellContext`n]]]], $CellContext`pb[{
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`t, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Module[{$CellContext`u, $CellContext`v}, 
         ReplaceAll[
          
          Table[$CellContext`v^($CellContext`n - $CellContext`k) \
$CellContext`u^$CellContext`k, {$CellContext`k, 
            0, $CellContext`n}], {$CellContext`u -> $CellContext`s, \
$CellContext`v -> $CellContext`t}]], $CellContext`bb[{
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`t, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Module[{$CellContext`u, $CellContext`v}, 
         ReplaceAll[
          Table[
          Binomial[$CellContext`n, $CellContext`k] ($CellContext`v - \
$CellContext`u)^($CellContext`n - $CellContext`k) \
$CellContext`u^$CellContext`k, {$CellContext`k, 
            0, $CellContext`n}], {$CellContext`u -> $CellContext`s, \
$CellContext`v -> $CellContext`t}]], $CellContext`affinereparametrization[{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Transpose[
         Module[{$CellContext`t, $CellContext`s}, 
          Map[Coefficient[#, 
            $CellContext`pb[{$CellContext`t, $CellContext`s}, \
$CellContext`n]]& , 
           $CellContext`pb[{$CellContext`a $CellContext`t + $CellContext`b \
$CellContext`s, $CellContext`s}, $CellContext`n]]]], $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, Attributes[Subscript] = {NHoldRest}}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"initialtangent", "[", 
   RowBox[{"m_", ",", 
    RowBox[{"i_:", "2"}]}], " ", "]"}], " ", ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"i", " ", ">", " ", 
     RowBox[{"Length", "[", "m", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", "0"}], "}"}], ",", "\[IndentingNewLine]", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x0", " ", "=", " ", 
         RowBox[{"m", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"y0", " ", "=", " ", 
         RowBox[{"m", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"w0", " ", "=", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "m", "]"}], ">", "2"}], ",", 
           RowBox[{"m", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "3"}], "]"}], "]"}], ",", " ", "1"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"xi", " ", "=", " ", 
         RowBox[{"m", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "1"}], "]"}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"yi", "=", " ", 
         RowBox[{"m", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "2"}], "]"}], "]"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"wi", " ", "=", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "m", "]"}], ">", "2"}], ",", 
           RowBox[{"m", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", "3"}], "]"}], "]"}], ",", " ", "1"}], 
          "]"}]}]}], "}"}], ",", "   ", "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"dx", " ", "=", " ", 
           RowBox[{
            RowBox[{"w0", "*", "xi"}], "-", 
            RowBox[{"wi", "*", "x0"}]}]}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"dy", " ", "=", " ", 
           RowBox[{
            RowBox[{"w0", "*", "yi"}], "-", 
            RowBox[{"wi", "*", "y0"}]}]}]}], "}"}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Norm", "[", 
            RowBox[{"{", 
             RowBox[{"dx", ",", " ", "dy"}], "}"}], "]"}], ">", " ", "0.01"}],
           ",", 
          RowBox[{"{", 
           RowBox[{"dx", ",", " ", "dy"}], "}"}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"tangent", "[", 
           RowBox[{"m", ",", 
            RowBox[{"i", "+", "1"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"tangent", "[", 
   RowBox[{"m_", ",", "t_"}], "]"}], " ", ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"t", " ", "<", " ", 
     RowBox[{"1", "/", "2"}]}], ",", " ", 
    RowBox[{"initialtangent", "[", 
     RowBox[{"brutecut", "[", 
      RowBox[{"m", ",", " ", 
       RowBox[{"{", 
        RowBox[{"t", ",", "1"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"-", 
     RowBox[{"initialtangent", "[", 
      RowBox[{"Reverse", "[", 
       RowBox[{"brutecut", "[", " ", 
        RowBox[{"m", ",", " ", 
         RowBox[{"{", 
          RowBox[{"0", ",", "t"}], "}"}]}], "]"}], "]"}], "]"}]}]}], " ", 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"initialcurvature", "[", 
   RowBox[{"n_", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x0_", ",", "y0_", ",", "w0_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x1_", ",", "y1_", ",", "w1_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x2_", ",", "y2_", ",", "w2_"}], "}"}]}], "}"}]}], "]"}], " ", 
  ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "-", "1"}], ")"}], "*", "w0", "*", "w0", "*", "w0", "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"w0", "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x1", "*", "y2"}], "-", 
          RowBox[{"x2", "*", "y1"}]}], ")"}]}], "+", 
       RowBox[{"w1", "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x2", "*", "y0"}], "-", 
          RowBox[{"x0", "*", "y2"}]}], ")"}]}], "+", 
       RowBox[{"w2", "*", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"x0", "*", "y1"}], "-", 
          RowBox[{"x1", "*", "y0"}]}], ")"}]}]}], ")"}]}], ",", " ", 
    RowBox[{"n", "*", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"w0", "*", "w0", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"x1", "*", "x1"}], "+", 
           RowBox[{"y1", "*", "y1"}]}], ")"}]}], "-", 
        RowBox[{"2", "*", "w0", "*", "w1", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"x0", "*", "x1"}], "+", 
           RowBox[{"y0", "*", "y1"}]}], ")"}]}], "+", 
        RowBox[{"w1", "*", "w1", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"x0", "*", "x0"}], "+", 
           RowBox[{"y0", "*", "y0"}]}], ")"}]}]}], ")"}], "^", "1.5"}]}]}], 
   "}"}], " "}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"initialcurvature", "[", 
   RowBox[{"n_", ",", " ", 
    RowBox[{"m", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x0_", ",", "y0_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x2_", ",", "y2_"}], "}"}]}], "}"}]}]}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"initialcurvature", "[", 
   RowBox[{"n", ",", " ", "\[IndentingNewLine]", 
    RowBox[{"Map", "[", 
     RowBox[{"e2p", ",", " ", "m"}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"flipcurvature", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", " ", "y_"}], "}"}], "]"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "x"}], ",", " ", "y"}], "}"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"curvature", "[", 
   RowBox[{"m_", ",", "t_"}], "]"}], " ", ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", "=", 
      RowBox[{
       RowBox[{"Length", "[", "m", "]"}], "-", "1"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"t", " ", "<", " ", 
       RowBox[{"1", "/", "2"}]}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{"initialcurvature", "[", 
       RowBox[{"n", ",", 
        RowBox[{
         RowBox[{"brutecut", "[", 
          RowBox[{"m", ",", " ", 
           RowBox[{"{", 
            RowBox[{"t", ",", "1"}], "}"}]}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"flipcurvature", "[", "\[IndentingNewLine]", 
       RowBox[{"initialcurvature", "[", 
        RowBox[{"n", ",", 
         RowBox[{"Reverse", "[", 
          RowBox[{
           RowBox[{"brutecut", "[", 
            RowBox[{"m", ",", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", "t"}], "}"}]}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"-", "3"}], ";;", 
             RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}]}], "]"}], "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "6"}], ",", " ", 
          RowBox[{"-", "3"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"6", ",", " ", 
          RowBox[{"-", "3"}]}], "}"}]}], "}"}]}], ",", " ", 
     RowBox[{"ws", " ", "=", "0.9"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{
             RowBox[{"pt", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", "w"}], "]"}], ",", " ", 
           RowBox[{"e2p", "[", 
            RowBox[{"pt", "[", 
             RowBox[{"[", "3", "]"}], "]"}], "]"}]}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"p", " ", "=", " ", 
            RowBox[{"p2e", "[", 
             RowBox[{
              RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}]}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"dp", " ", "=", " ", 
            RowBox[{"tangent", "[", 
             RowBox[{"m", ",", "t"}], "]"}]}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"\[Kappa]", " ", "=", " ", 
            RowBox[{"curvature", "[", 
             RowBox[{"m", ",", "t"}], "]"}]}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ParametricPlot", "[", 
            RowBox[{
             RowBox[{"p2e", "[", 
              RowBox[{
               RowBox[{"bb2", "[", "t", "]"}], ".", "m"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", " ", "0", ",", "1"}], "}"}], ",", " ", 
             RowBox[{"PlotRange", "\[Rule]", "10"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Thick", ",", "Red"}], "]"}]}], ",", " ", 
             RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
             RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}], ",", 
           RowBox[{"Graphics", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Subscript", "[", 
                   RowBox[{
                    RowBox[{"Symbol", "[", "\"\<p\>\"", "]"}], ",", 
                    RowBox[{"i", "-", "1"}]}], "]"}], ",", "Large"}], "]"}], 
                ",", 
                RowBox[{
                 RowBox[{"pt", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "+", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "pt", "]"}]}], "}"}]}], "]"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", 
             RowBox[{"Dashed", ",", 
              RowBox[{"Line", "[", "pt", "]"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"w", ",", "Large"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", 
                  RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"PointSize", "[", "Large", "]"}], ",", "Blue", ",", 
              RowBox[{"Point", "[", "p", "]"}], ",", " ", 
              "\[IndentingNewLine]", "Dotted", ",", 
              RowBox[{"Line", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"p", "-", "dp"}], ",", " ", "p"}], "}"}], "]"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"Dashing", "[", 
               RowBox[{"{", "}"}], "]"}], ",", 
              RowBox[{"Line", "[", 
               RowBox[{"{", " ", 
                RowBox[{"p", ",", " ", 
                 RowBox[{"p", "+", "dp"}]}], "}"}], "]"}]}], "}"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Abs", "[", 
                RowBox[{"\[Kappa]", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "<", " ", 
               RowBox[{
                RowBox[{"Abs", "[", 
                 RowBox[{"\[Kappa]", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", "100"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"r", " ", "=", " ", 
                  RowBox[{
                   RowBox[{"\[Kappa]", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "/", 
                   RowBox[{"\[Kappa]", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"Module", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"c", " ", "=", " ", 
                    RowBox[{"p", "+", " ", 
                    RowBox[{"r", " ", 
                    RowBox[{
                    RowBox[{"Cross", "[", "dp", "]"}], "/", 
                    RowBox[{"Norm", "[", "dp", "]"}]}]}]}]}], "}"}], ",", " ",
                   "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"Thick", ",", " ", "Blue", ",", " ", 
                    RowBox[{"Circle", "[", 
                    RowBox[{"c", ",", 
                    RowBox[{"Abs", "[", "r", "]"}]}], "]"}], ",", " ", 
                    RowBox[{"PointSize", "[", "Large", "]"}], ",", 
                    RowBox[{"Point", "[", "c", "]"}]}], "}"}]}], "]"}]}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"{", "}"}]}], "]"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pt", ",", "pts"}], "}"}], ",", "Locator"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], 
     ",", " ", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"w", ",", " ", "ws"}], "}"}], ",", "0", ",", " ", "10"}], 
      "}"}]}], "]"}]}], "]"}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`pt$$ = {{-6, -3}, {0, 5}, {
    6, -3}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = 0.9, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`pt$$], {{-6, -3}, {0, 5}, {6, -3}}}, Automatic}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`w$$], 0.9}, 0, 10}}, Typeset`size$$ = {
    576., {285., 291.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`t$3836$$ = 
    0, $CellContext`w$3837$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`pt$$ = {{-6, -3}, {0, 5}, {
         6, -3}}, $CellContext`t$$ = 0.5, $CellContext`w$$ = 0.9}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$3836$$, 0], 
        Hold[$CellContext`w$$, $CellContext`w$3837$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Module[{$CellContext`m$ = {
           $CellContext`e2p[
            Part[$CellContext`pt$$, 1]], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 2], $CellContext`w$$], 
           $CellContext`e2p[
            Part[$CellContext`pt$$, 3]]}}, 
        Module[{$CellContext`p$ = $CellContext`p2e[
            Dot[
             $CellContext`bb2[$CellContext`t$$], $CellContext`m$]], \
$CellContext`dp$ = $CellContext`tangent[$CellContext`m$, $CellContext`t$$], \
$CellContext`\[Kappa]$ = $CellContext`curvature[$CellContext`m$, \
$CellContext`t$$]}, 
         Show[
          ParametricPlot[
           $CellContext`p2e[
            Dot[
             $CellContext`bb2[$CellContext`t$$], $CellContext`m$]], \
{$CellContext`t$$, 0, 1}, PlotRange -> 10, PlotStyle -> Directive[Thick, Red],
            ImageSize -> Large, Axes -> False], 
          Graphics[
           Table[
            Text[
             Style[
              Subscript[
               Symbol["p"], $CellContext`i - 1], Large], 
             Part[$CellContext`pt$$, $CellContext`i] + {0, 
              1}], {$CellContext`i, 1, 
             Length[$CellContext`pt$$]}]], 
          Graphics[{Dashed, 
            Line[$CellContext`pt$$]}], 
          Graphics[{
            Text[
             Style[$CellContext`w$$, Large], {0, -1}], 
            PointSize[Large], Blue, 
            Point[$CellContext`p$], Dotted, 
            Line[{$CellContext`p$ - $CellContext`dp$, $CellContext`p$}], 
            Dashing[{}], 
            Line[{$CellContext`p$, $CellContext`p$ + $CellContext`dp$}]}], 
          Graphics[
           If[Abs[
              Part[$CellContext`\[Kappa]$, 2]] < Abs[
               Part[$CellContext`\[Kappa]$, 1]] 100, 
            
            Module[{$CellContext`r$ = 
              Part[$CellContext`\[Kappa]$, 2]/
               Part[$CellContext`\[Kappa]$, 1]}, 
             
             Module[{$CellContext`c$ = $CellContext`p$ + $CellContext`r$ (
                  Cross[$CellContext`dp$]/Norm[$CellContext`dp$])}, {
              Thick, Blue, 
               Circle[$CellContext`c$, 
                Abs[$CellContext`r$]], 
               PointSize[Large], 
               Point[$CellContext`c$]}]], {}]]]]], 
      "Specifications" :> {{{$CellContext`pt$$, {{-6, -3}, {0, 5}, {6, -3}}}, 
         Automatic, ControlType -> Locator}, {{$CellContext`t$$, 0.5}, 0, 
         1}, {{$CellContext`w$$, 0.9}, 0, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {SaveDefinitions -> True}],
     ImageSizeCache->{629., {344., 351.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`e2p[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}, 
         Optional[
          Pattern[$CellContext`w, 
           Blank[]], 
          1]] := {$CellContext`w $CellContext`x, $CellContext`w \
$CellContext`y, $CellContext`w}, $CellContext`p2e[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]], 
          Pattern[$CellContext`w, 
           
           Blank[]]}] := {$CellContext`x/$CellContext`w, \
$CellContext`y/$CellContext`w}, $CellContext`bb2[
         Pattern[$CellContext`t, 
          Blank[]]] := {(1 - $CellContext`t)^2, 
         2 (1 - $CellContext`t) $CellContext`t, $CellContext`t^2}, \
$CellContext`tangent[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`t, 
          Blank[]]] := If[$CellContext`t < 1/2, 
         $CellContext`initialtangent[
          $CellContext`brutecut[$CellContext`m, {$CellContext`t, 
            1}]], -$CellContext`initialtangent[
           Reverse[
            $CellContext`brutecut[$CellContext`m, {
             0, $CellContext`t}]]]], $CellContext`initialtangent[
         Pattern[$CellContext`m, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`i, 
           Blank[]], 2]] := 
       If[$CellContext`i > Length[$CellContext`m], {0, 0}, 
         Module[{$CellContext`x0 = 
           Part[$CellContext`m, 1, 1], $CellContext`y0 = 
           Part[$CellContext`m, 1, 2], $CellContext`w0 = 
           If[Length[$CellContext`m] > 2, 
             Part[$CellContext`m, 1, 3], 1], $CellContext`xi = 
           Part[$CellContext`m, $CellContext`i, 1], $CellContext`yi = 
           Part[$CellContext`m, $CellContext`i, 2], $CellContext`wi = 
           If[Length[$CellContext`m] > 2, 
             Part[$CellContext`m, $CellContext`i, 3], 1]}, 
          
          Module[{$CellContext`dx = $CellContext`w0 $CellContext`xi - \
$CellContext`wi $CellContext`x0, $CellContext`dy = $CellContext`w0 \
$CellContext`yi - $CellContext`wi $CellContext`y0}, 
           If[
           Norm[{$CellContext`dx, $CellContext`dy}] > 
            0.01, {$CellContext`dx, $CellContext`dy}, 
            $CellContext`tangent[$CellContext`m, $CellContext`i + 
             1]]]]], $CellContext`brutecut[
         Pattern[$CellContext`m, 
          Blank[]], {
          Pattern[$CellContext`p, 
           Blank[]], 
          Pattern[$CellContext`q, 
           Blank[]]}] := Module[{$CellContext`n = Length[$CellContext`m] - 1}, 
         Dot[
          $CellContext`b2p[$CellContext`n], 
          $CellContext`affinereparametrization[{$CellContext`q - \
$CellContext`p, $CellContext`p}, $CellContext`n], 
          $CellContext`p2b[$CellContext`n], $CellContext`m]], $CellContext`b2p[
         Pattern[$CellContext`n, 
          Blank[]]] := Inverse[
         $CellContext`p2b[$CellContext`n]], $CellContext`p2b[
         Pattern[$CellContext`n, 
          Blank[]]] := Transpose[
         Module[{$CellContext`s, $CellContext`t}, 
          Map[Coefficient[#, 
            $CellContext`pb[{$CellContext`s, $CellContext`t}, \
$CellContext`n]]& , 
           $CellContext`bb[{$CellContext`s, $CellContext`t}, \
$CellContext`n]]]], $CellContext`pb[{
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`t, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Module[{$CellContext`u, $CellContext`v}, 
         ReplaceAll[
          
          Table[$CellContext`v^($CellContext`n - $CellContext`k) \
$CellContext`u^$CellContext`k, {$CellContext`k, 
            0, $CellContext`n}], {$CellContext`u -> $CellContext`s, \
$CellContext`v -> $CellContext`t}]], $CellContext`bb[{
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`t, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Module[{$CellContext`u, $CellContext`v}, 
         ReplaceAll[
          Table[
          Binomial[$CellContext`n, $CellContext`k] ($CellContext`v - \
$CellContext`u)^($CellContext`n - $CellContext`k) \
$CellContext`u^$CellContext`k, {$CellContext`k, 
            0, $CellContext`n}], {$CellContext`u -> $CellContext`s, \
$CellContext`v -> $CellContext`t}]], $CellContext`affinereparametrization[{
          Pattern[$CellContext`a, 
           Blank[]], 
          Pattern[$CellContext`b, 
           Blank[]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Transpose[
         Module[{$CellContext`t, $CellContext`s}, 
          Map[Coefficient[#, 
            $CellContext`pb[{$CellContext`t, $CellContext`s}, \
$CellContext`n]]& , 
           $CellContext`pb[{$CellContext`a $CellContext`t + $CellContext`b \
$CellContext`s, $CellContext`s}, $CellContext`n]]]], $CellContext`curvature[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`t, 
          Blank[]]] := Module[{$CellContext`n = Length[$CellContext`m] - 1}, 
         If[$CellContext`t < 1/2, 
          $CellContext`initialcurvature[$CellContext`n, 
           Part[
            $CellContext`brutecut[$CellContext`m, {$CellContext`t, 1}], 
            Span[1, 3]]], 
          $CellContext`flipcurvature[
           $CellContext`initialcurvature[$CellContext`n, 
            Reverse[
             Part[
              $CellContext`brutecut[$CellContext`m, {0, $CellContext`t}], 
              Span[-3, -1]]]]]]], $CellContext`initialcurvature[
         Pattern[$CellContext`n, 
          Blank[]], {{
           Pattern[$CellContext`x0, 
            Blank[]], 
           Pattern[$CellContext`y0, 
            Blank[]], 
           Pattern[$CellContext`w0, 
            Blank[]]}, {
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`y1, 
            Blank[]], 
           Pattern[$CellContext`w1, 
            Blank[]]}, {
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`y2, 
            Blank[]], 
           Pattern[$CellContext`w2, 
            Blank[]]}}] := {($CellContext`n - 
          1) $CellContext`w0 $CellContext`w0 $CellContext`w0 ($CellContext`w0 \
($CellContext`x1 $CellContext`y2 - $CellContext`x2 $CellContext`y1) + \
$CellContext`w1 ($CellContext`x2 $CellContext`y0 - $CellContext`x0 \
$CellContext`y2) + $CellContext`w2 ($CellContext`x0 $CellContext`y1 - \
$CellContext`x1 $CellContext`y0)), $CellContext`n ($CellContext`w0 \
$CellContext`w0 ($CellContext`x1 $CellContext`x1 + $CellContext`y1 \
$CellContext`y1) - 
           2 $CellContext`w0 $CellContext`w1 ($CellContext`x0 $CellContext`x1 + \
$CellContext`y0 $CellContext`y1) + $CellContext`w1 $CellContext`w1 \
($CellContext`x0 $CellContext`x0 + $CellContext`y0 $CellContext`y0))^1.5}, \
$CellContext`initialcurvature[
         Pattern[$CellContext`n, 
          Blank[]], 
         Pattern[$CellContext`m, {{
            Pattern[$CellContext`x0, 
             Blank[]], 
            Pattern[$CellContext`y0, 
             Blank[]]}, {
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`y1, 
             Blank[]]}, {
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`y2, 
             Blank[]]}}]] := $CellContext`initialcurvature[$CellContext`n, 
         Map[$CellContext`e2p, $CellContext`m]], $CellContext`flipcurvature[{
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`y, 
           Blank[]]}] := {-$CellContext`x, $CellContext`y}, 
       Attributes[Subscript] = {NHoldRest}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output"]
}, Open  ]]
},
WindowSize->{1449, 1089},
Visible->True,
ScrollingOptions->{"VerticalScrollRange"->Fit},
ShowCellBracket->Automatic,
ShowSelection->True,
CellContext->Notebook,
TrackCellChangeTimes->False,
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[1464, 33, 48, 0, 31, "Text"],
Cell[1515, 35, 196, 6, 32, "Input"],
Cell[1714, 43, 98, 2, 31, "Text"],
Cell[1815, 47, 911, 30, 49, "Input",
 InitializationCell->True],
Cell[2729, 79, 323, 9, 31, "Text"],
Cell[3055, 90, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[3332, 101, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[3609, 112, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[3886, 123, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[4163, 134, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[4440, 145, 274, 9, 49, "Input",
 InitializationCell->True],
Cell[4717, 156, 94, 2, 31, "Text"],
Cell[4814, 160, 774, 26, 49, "Input",
 InitializationCell->True],
Cell[5591, 188, 105, 3, 31, "Text"],
Cell[5699, 193, 711, 23, 49, "Input",
 InitializationCell->True],
Cell[6413, 218, 37, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[6475, 222, 538, 17, 32, "Input"],
Cell[7016, 241, 507, 14, 32, "Output"]
}, Open  ]],
Cell[7538, 258, 62, 0, 31, "Text"],
Cell[7603, 260, 183, 5, 49, "Input",
 InitializationCell->True],
Cell[7789, 267, 87, 2, 31, "Text"],
Cell[7879, 271, 666, 20, 49, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[8570, 295, 103, 2, 32, "Input"],
Cell[8676, 299, 623, 18, 69, "Output"]
}, Open  ]],
Cell[9314, 320, 142, 3, 31, "Text"],
Cell[9459, 325, 611, 18, 49, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[10095, 347, 103, 2, 32, "Input"],
Cell[10201, 351, 626, 18, 69, "Output"]
}, Open  ]],
Cell[10842, 372, 334, 5, 51, "Text"],
Cell[11179, 379, 288, 9, 32, "Input"],
Cell[11470, 390, 91, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[11586, 396, 691, 20, 69, "Input"],
Cell[12280, 418, 108, 3, 40, "Output"]
}, Open  ]],
Cell[12403, 424, 119, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[12547, 431, 788, 22, 69, "Input"],
Cell[13338, 455, 108, 3, 40, "Output"]
}, Open  ]],
Cell[13461, 461, 72, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[13558, 465, 691, 20, 69, "Input"],
Cell[14252, 487, 284, 9, 51, "Output"]
}, Open  ]],
Cell[14551, 499, 315, 5, 51, "Text"],
Cell[14869, 506, 115, 3, 31, "Text"],
Cell[14987, 511, 170, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[15182, 518, 416, 11, 32, "Input"],
Cell[15601, 531, 18895, 321, 591, "Output"]
}, Open  ]],
Cell[34511, 855, 86, 2, 30, "Text"],
Cell[34600, 859, 692, 23, 72, "Input"],
Cell[CellGroupData[{
Cell[35317, 886, 283, 10, 71, "Input"],
Cell[35603, 898, 57, 1, 32, "Output"]
}, Open  ]],
Cell[35675, 902, 777, 26, 76, "Input"],
Cell[CellGroupData[{
Cell[36477, 932, 312, 11, 76, "Input"],
Cell[36792, 945, 57, 1, 32, "Output"]
}, Open  ]],
Cell[36864, 949, 72, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[36961, 953, 845, 26, 76, "Input"],
Cell[37809, 981, 18902, 321, 591, "Output"]
}, Open  ]],
Cell[56726, 1305, 50, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[56801, 1309, 690, 23, 76, "Input"],
Cell[57494, 1334, 298, 11, 59, "Output"]
}, Open  ]],
Cell[57807, 1348, 262, 5, 51, "Text"],
Cell[58072, 1355, 784, 25, 77, "Output"],
Cell[58859, 1382, 98, 2, 31, "Text"],
Cell[58960, 1386, 294, 10, 49, "Input",
 InitializationCell->True],
Cell[59257, 1398, 70, 0, 31, "Text"],
Cell[59330, 1400, 343, 11, 49, "Input",
 InitializationCell->True],
Cell[59676, 1413, 53, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[59754, 1417, 562, 15, 40, "Input"],
Cell[60319, 1434, 5493, 98, 582, "Output"]
}, Open  ]],
Cell[65827, 1535, 143, 3, 31, "Text"],
Cell[65973, 1540, 230, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[66228, 1548, 671, 22, 40, "Input"],
Cell[66902, 1572, 788, 27, 49, "Output"]
}, Open  ]],
Cell[67705, 1602, 125, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[67855, 1609, 1057, 34, 64, "Input"],
Cell[68915, 1645, 897, 26, 40, "Output"]
}, Open  ]],
Cell[69827, 1674, 108, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[69960, 1681, 1735, 47, 67, "Input"],
Cell[71698, 1730, 6160, 109, 582, "Output"]
}, Open  ]],
Cell[77873, 1842, 181, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[78079, 1850, 1446, 40, 67, "Input"],
Cell[79528, 1892, 485, 15, 32, "Output"]
}, Open  ]],
Cell[80028, 1910, 44, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[80097, 1914, 1580, 46, 60, "Input"],
Cell[81680, 1962, 83, 2, 32, "Output"]
}, Open  ]],
Cell[81778, 1967, 135, 3, 31, "Text"],
Cell[81916, 1972, 697, 22, 49, "Input",
 InitializationCell->True],
Cell[82616, 1996, 45, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[82686, 2000, 1941, 53, 168, "Input",
 InitializationCell->True],
Cell[84630, 2055, 3245, 71, 706, "Output"]
}, Open  ]],
Cell[87890, 2129, 251, 4, 51, "Text"],
Cell[CellGroupData[{
Cell[88166, 2137, 678, 20, 32, "Input"],
Cell[88847, 2159, 5989, 106, 591, "Output"]
}, Open  ]],
Cell[94851, 2268, 157, 3, 31, "Text"],
Cell[95011, 2273, 729, 25, 72, "Input"],
Cell[CellGroupData[{
Cell[95765, 2302, 307, 11, 72, "Input"],
Cell[96075, 2315, 58, 1, 32, "Output"]
}, Open  ]],
Cell[96148, 2319, 777, 26, 76, "Input"],
Cell[CellGroupData[{
Cell[96950, 2349, 318, 11, 76, "Input"],
Cell[97271, 2362, 58, 1, 32, "Output"]
}, Open  ]],
Cell[97344, 2366, 69, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[97438, 2370, 1149, 36, 76, "Input"],
Cell[98590, 2408, 5985, 106, 591, "Output"]
}, Open  ]],
Cell[104590, 2517, 51, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[104666, 2521, 705, 23, 76, "Input"],
Cell[105374, 2546, 298, 11, 59, "Output"]
}, Open  ]],
Cell[105687, 2560, 74, 0, 31, "Text"],
Cell[105764, 2562, 275, 10, 40, "Input"],
Cell[106042, 2574, 50, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[106117, 2578, 771, 23, 40, "Input"],
Cell[106891, 2603, 4277, 78, 591, "Output"]
}, Open  ]],
Cell[111183, 2684, 194, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[111402, 2692, 673, 22, 40, "Input"],
Cell[112078, 2716, 791, 27, 49, "Output"]
}, Open  ]],
Cell[112884, 2746, 261, 8, 41, "Text"],
Cell[CellGroupData[{
Cell[113170, 2758, 1059, 34, 64, "Input"],
Cell[114232, 2794, 904, 26, 40, "Output"]
}, Open  ]],
Cell[115151, 2823, 107, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[115283, 2830, 1716, 47, 67, "Input"],
Cell[117002, 2879, 6058, 107, 591, "Output"]
}, Open  ]],
Cell[123075, 2989, 65, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[123165, 2993, 1448, 40, 67, "Input"],
Cell[124616, 3035, 490, 15, 32, "Output"]
}, Open  ]],
Cell[125121, 3053, 44, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[125190, 3057, 1592, 46, 60, "Input"],
Cell[126785, 3105, 83, 2, 32, "Output"]
}, Open  ]],
Cell[126883, 3110, 159, 3, 31, "Text"],
Cell[127045, 3115, 703, 22, 49, "Input",
 InitializationCell->True],
Cell[127751, 3139, 47, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[127823, 3143, 1925, 52, 168, "Input",
 InitializationCell->True],
Cell[129751, 3197, 3279, 73, 706, "Output"]
}, Open  ]],
Cell[133045, 3273, 217, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[133287, 3281, 4148, 112, 248, "Input",
 InitializationCell->True],
Cell[137438, 3395, 4054, 93, 712, "Output"]
}, Open  ]],
Cell[141507, 3491, 85, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[141617, 3497, 871, 26, 32, "Input"],
Cell[142491, 3525, 631, 22, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143159, 3552, 974, 28, 32, "Input"],
Cell[144136, 3582, 473, 18, 51, "Output"]
}, Open  ]],
Cell[144624, 3603, 195, 4, 31, "Text"],
Cell[144822, 3609, 325, 12, 65, "Input"],
Cell[145150, 3623, 20, 0, 30, "Text"],
Cell[145173, 3625, 332, 12, 65, "Input"],
Cell[145508, 3639, 73, 0, 31, "Text"],
Cell[145584, 3641, 214, 4, 31, "Text"],
Cell[145801, 3647, 76, 0, 31, "Text"],
Cell[145880, 3649, 290, 5, 51, "Text"],
Cell[146173, 3656, 552, 16, 49, "Input",
 InitializationCell->True],
Cell[146728, 3674, 425, 13, 49, "Input",
 InitializationCell->True],
Cell[147156, 3689, 419, 13, 49, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[147600, 3706, 3771, 103, 308, "Input",
 InitializationCell->True],
Cell[151374, 3811, 5645, 118, 786, "Output"]
}, Open  ]],
Cell[157034, 3932, 1284, 27, 142, "Text"],
Cell[158321, 3961, 94, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[158440, 3967, 132, 4, 32, "Input"],
Cell[158575, 3973, 269, 9, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158881, 3987, 127, 4, 32, "Input"],
Cell[159011, 3993, 157, 5, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159205, 4003, 383, 12, 32, "Input"],
Cell[159591, 4017, 31, 0, 30, "Output"]
}, Open  ]],
Cell[159637, 4020, 72, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[159734, 4024, 269, 8, 32, "Input"],
Cell[160006, 4034, 1151, 38, 40, "Output"]
}, Open  ]],
Cell[161172, 4075, 153, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[161350, 4082, 372, 13, 32, "Input"],
Cell[161725, 4097, 835, 25, 40, "Output"]
}, Open  ]],
Cell[162575, 4125, 226, 4, 31, "Text"],
Cell[162804, 4131, 1231, 39, 49, "Input",
 InitializationCell->True],
Cell[164038, 4172, 66, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[164129, 4176, 321, 10, 32, "Input"],
Cell[164453, 4188, 940, 29, 77, "Output"]
}, Open  ]],
Cell[165408, 4220, 40, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[165473, 4224, 847, 27, 32, "Input"],
Cell[166323, 4253, 83, 2, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166443, 4260, 944, 30, 32, "Input"],
Cell[167390, 4292, 83, 2, 32, "Output"]
}, Open  ]],
Cell[167488, 4297, 377, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[167890, 4307, 395, 12, 48, "Input",
 InitializationCell->True],
Cell[168288, 4321, 923, 27, 89, "Output"]
}, Open  ]],
Cell[169226, 4351, 35, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[169286, 4355, 461, 15, 32, "Input"],
Cell[169750, 4372, 166, 5, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169953, 4382, 456, 15, 32, "Input"],
Cell[170412, 4399, 133, 4, 32, "Output"]
}, Open  ]],
Cell[170560, 4406, 86, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[170671, 4412, 580, 17, 32, "Input"],
Cell[171254, 4431, 923, 27, 73, "Output"]
}, Open  ]],
Cell[172192, 4461, 123, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[172340, 4468, 191, 6, 40, "Input"],
Cell[172534, 4476, 339, 13, 62, "Output"]
}, Open  ]],
Cell[172888, 4492, 111, 3, 31, "Text"],
Cell[173002, 4497, 56, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[173083, 4501, 800, 24, 83, "Input"],
Cell[173886, 4527, 1006, 34, 98, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174929, 4566, 138, 4, 32, "Input"],
Cell[175070, 4572, 1001, 34, 104, "Output"]
}, Open  ]],
Cell[176086, 4609, 50, 0, 31, "Text"],
Cell[176139, 4611, 1067, 34, 81, "Input",
 InitializationCell->True],
Cell[177209, 4647, 51, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[177285, 4651, 565, 17, 32, "Input"],
Cell[177853, 4670, 1140, 34, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179030, 4709, 191, 6, 40, "Input"],
Cell[179224, 4717, 999, 34, 59, "Output"]
}, Open  ]],
Cell[180238, 4754, 116, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[180379, 4761, 832, 25, 73, "Input"],
Cell[181214, 4788, 1803, 59, 132, "Output"]
}, Open  ]],
Cell[183032, 4850, 1799, 57, 90, "Input"],
Cell[184834, 4909, 140, 3, 31, "Text"],
Cell[184977, 4914, 218, 4, 31, "Text"],
Cell[185198, 4920, 287, 9, 32, "Input"],
Cell[185488, 4931, 684, 12, 110, "Text"],
Cell[CellGroupData[{
Cell[186197, 4947, 1085, 33, 32, "Input"],
Cell[187285, 4982, 4304, 93, 132, "Output"]
}, Open  ]],
Cell[191604, 5078, 52, 0, 30, "Text"],
Cell[CellGroupData[{
Cell[191681, 5082, 329, 9, 32, "Input"],
Cell[192013, 5093, 455, 14, 40, "Output"]
}, Open  ]],
Cell[192483, 5110, 124, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[192632, 5117, 470, 15, 32, "Input"],
Cell[193105, 5134, 142, 5, 40, "Output"]
}, Open  ]],
Cell[193262, 5142, 74, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[193361, 5146, 228, 7, 32, "Input"],
Cell[193592, 5155, 124, 4, 40, "Output"]
}, Open  ]],
Cell[193731, 5162, 476, 9, 90, "Text"],
Cell[194210, 5173, 35, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[194270, 5177, 4195, 113, 248, "Input",
 InitializationCell->True],
Cell[198468, 5292, 4054, 93, 712, "Output"]
}, Open  ]],
Cell[202537, 5388, 283, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[202845, 5397, 1063, 33, 32, "Input"],
Cell[203911, 5432, 4304, 93, 132, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208252, 5530, 329, 9, 32, "Input"],
Cell[208584, 5541, 507, 16, 36, "Output"]
}, Open  ]],
Cell[209106, 5560, 163, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[209294, 5567, 219, 7, 32, "Input"],
Cell[209516, 5576, 144, 5, 40, "Output"]
}, Open  ]],
Cell[209675, 5584, 227, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[209927, 5592, 4131, 111, 248, "Input",
 InitializationCell->True],
Cell[214061, 5705, 4050, 93, 712, "Output"]
}, Open  ]],
Cell[218126, 5801, 318, 5, 51, "Text"],
Cell[218447, 5808, 71, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[218543, 5812, 4949, 132, 268, "Input",
 InitializationCell->True],
Cell[223495, 5946, 4555, 103, 736, "Output"]
}, Open  ]],
Cell[228065, 6052, 189, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[228279, 6060, 167, 5, 32, "Input"],
Cell[228449, 6067, 405, 13, 36, "Output"]
}, Open  ]],
Cell[228869, 6083, 211, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[229105, 6091, 549, 17, 40, "Input"],
Cell[229657, 6110, 380, 12, 40, "Output"]
}, Open  ]],
Cell[230052, 6125, 480, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[230557, 6137, 751, 24, 32, "Input"],
Cell[231311, 6163, 312, 10, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231660, 6178, 374, 13, 40, "Input"],
Cell[232037, 6193, 28, 0, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232102, 6198, 636, 20, 32, "Input"],
Cell[232741, 6220, 279, 10, 36, "Output"]
}, Open  ]],
Cell[233035, 6233, 253, 5, 50, "Text"],
Cell[233291, 6240, 512, 10, 51, "Text"],
Cell[233806, 6252, 53, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[233884, 6256, 1900, 54, 96, "Input"],
Cell[235787, 6312, 398400, 6539, 586, "Output"]
}, Open  ]],
Cell[634202, 12854, 329, 5, 51, "Text"],
Cell[634534, 12861, 56, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[634615, 12865, 2060, 59, 96, "Input"],
Cell[636678, 12926, 276096, 4551, 586, "Output"]
}, Open  ]],
Cell[912789, 17480, 805, 12, 91, "Text"],
Cell[CellGroupData[{
Cell[913619, 17496, 3787, 95, 304, "Input",
 InitializationCell->True],
Cell[917409, 17593, 11682, 207, 648, "Output"]
}, Open  ]],
Cell[929106, 17803, 175, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[929306, 17810, 1332, 39, 69, "Input"],
Cell[930641, 17851, 528, 17, 32, "Output"]
}, Open  ]],
Cell[931184, 17871, 111, 3, 31, "Text"],
Cell[931298, 17876, 622, 9, 71, "Text"],
Cell[CellGroupData[{
Cell[931945, 17889, 578, 17, 32, "Input"],
Cell[932526, 17908, 639, 19, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[933202, 17932, 776, 22, 69, "Input"],
Cell[933981, 17956, 692, 21, 69, "Output"]
}, Open  ]],
Cell[934688, 17980, 868, 19, 112, "Text"],
Cell[CellGroupData[{
Cell[935581, 18003, 3264, 86, 268, "Input",
 InitializationCell->True],
Cell[938848, 18091, 2360, 50, 224, "Output"]
}, Open  ]],
Cell[941223, 18144, 72, 0, 31, "Text"],
Cell[941298, 18146, 560, 18, 49, "Input",
 InitializationCell->True],
Cell[941861, 18166, 127, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[942013, 18173, 2156, 56, 228, "Input",
 InitializationCell->True],
Cell[944172, 18231, 4077, 98, 680, "Output"]
}, Open  ]],
Cell[948264, 18332, 305, 5, 51, "Text"],
Cell[948572, 18339, 57, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[948654, 18343, 5261, 138, 308, "Input",
 InitializationCell->True],
Cell[953918, 18483, 7273, 163, 786, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[961228, 18651, 5812, 148, 368, "Input",
 InitializationCell->True],
Cell[967043, 18801, 7397, 162, 786, "Output"]
}, Open  ]],
Cell[974455, 18966, 224, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[974704, 18974, 693, 20, 32, "Input"],
Cell[975400, 18996, 28, 0, 30, "Output"]
}, Open  ]],
Cell[975443, 18999, 392, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[975860, 19009, 425, 13, 32, "Input"],
Cell[976288, 19024, 1670, 58, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[977995, 19087, 248, 9, 40, "Input"],
Cell[978246, 19098, 1238, 43, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[979521, 19146, 431, 13, 32, "Input"],
Cell[979955, 19161, 1720, 60, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[981712, 19226, 253, 9, 40, "Input"],
Cell[981968, 19237, 1334, 47, 51, "Output"]
}, Open  ]],
Cell[983317, 19287, 230, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[983572, 19295, 315, 10, 33, "Input"],
Cell[983890, 19307, 274, 8, 32, "Output"]
}, Open  ]],
Cell[984179, 19318, 1806, 57, 77, "Input",
 InitializationCell->True],
Cell[985988, 19377, 278, 5, 51, "Text"],
Cell[986269, 19384, 765, 25, 56, "Input",
 InitializationCell->True],
Cell[987037, 19411, 234, 4, 31, "Text"],
Cell[987274, 19417, 142, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[987441, 19424, 660, 21, 32, "Input"],
Cell[988104, 19447, 2006, 63, 68, "Output"]
}, Open  ]],
Cell[990125, 19513, 190, 4, 31, "Text"],
Cell[990318, 19519, 885, 28, 53, "Input",
 InitializationCell->True],
Cell[991206, 19549, 885, 28, 53, "Input",
 InitializationCell->True],
Cell[992094, 19579, 142, 3, 31, "Text"],
Cell[992239, 19584, 2095, 57, 150, "Input",
 InitializationCell->True],
Cell[994337, 19643, 494, 15, 49, "Input",
 InitializationCell->True],
Cell[994834, 19660, 116, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[994975, 19667, 3071, 85, 248, "Input",
 InitializationCell->True],
Cell[998049, 19754, 9519, 228, 762, "Output"]
}, Open  ]],
Cell[1007583, 19985, 577, 9, 71, "Text"],
Cell[1008163, 19996, 113, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[1008301, 20003, 625, 22, 65, "Input"],
Cell[1008929, 20027, 490, 18, 51, "Output"]
}, Open  ]],
Cell[1009434, 20048, 1000, 31, 49, "Input",
 InitializationCell->True],
Cell[1010437, 20081, 732, 23, 49, "Input",
 InitializationCell->True],
Cell[1011172, 20106, 240, 4, 50, "Text"],
Cell[1011415, 20112, 3448, 104, 130, "Input",
 InitializationCell->True],
Cell[1014866, 20218, 162, 3, 31, "Text"],
Cell[1015031, 20223, 1389, 44, 70, "Input",
 InitializationCell->True],
Cell[1016423, 20269, 64, 0, 31, "Text"],
Cell[CellGroupData[{
Cell[1016512, 20273, 5769, 147, 328, "Input",
 InitializationCell->True],
Cell[1022284, 20422, 9671, 216, 690, "Output"]
}, Open  ]],
Cell[1031970, 20641, 2924, 80, 309, "Input",
 InitializationCell->True],
Cell[1034897, 20723, 697, 21, 49, "Input",
 InitializationCell->True],
Cell[1035597, 20746, 1772, 55, 90, "Input",
 InitializationCell->True],
Cell[1037372, 20803, 594, 18, 70, "Input",
 InitializationCell->True],
Cell[1037969, 20823, 255, 8, 49, "Input",
 InitializationCell->True],
Cell[1038227, 20833, 1379, 39, 150, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1039631, 20876, 7263, 178, 528, "Input",
 InitializationCell->True],
Cell[1046897, 21056, 11956, 276, 712, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature EwD54CTRhd@#BBKjCgepWj53 *)
